// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App can render goody: Java IterableDoubleStream 1`] = `
"package iterable_double_stream;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.IntConsumer;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@SuppressWarnings("overloads")
interface IterableDoubleStream extends Iterable<Double>, DoubleStream {
  @Override
  public Spliterator.OfDouble spliterator();

  public static IterableDoubleStream from(final Iterable<Double> iterable) {
    return from(iterable.spliterator());
  }

  public static IterableDoubleStream from(final Iterator<Double> iterator) {
    return from(() -> iterator);
  }

  public static IterableDoubleStream from(
    final Spliterator<Double> spliterator
  ) {
    return from(StreamSupport.stream(spliterator, false));
  }

  public static IterableDoubleStream from(
    final Spliterator.OfDouble spliterator
  ) {
    return from(StreamSupport.doubleStream(spliterator, false));
  }

  public static IterableDoubleStream from(final Stream<Double> stream) {
    return from(stream.mapToDouble(Double::doubleValue));
  }

  public static IterableDoubleStream from(final DoubleStream stream) {
    @SuppressWarnings("unchecked")
    var proxy = (IterableDoubleStream) Proxy.newProxyInstance(
      ClassLoader.getSystemClassLoader(),
      new Class<?>[] { IterableDoubleStream.class },
      (Object _proxy, Method method, Object[] args) ->
        DoubleStream.class.getMethod(
            method.getName(),
            method.getParameterTypes()
          ).invoke(stream, args)
    );
    return proxy;
  }
}"
`;

exports[`App can render goody: Java IterableIntStream 1`] = `
"package iterable_int_stream;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.IntConsumer;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@SuppressWarnings("overloads")
interface IterableIntStream extends Iterable<Integer>, IntStream {
  @Override
  public Spliterator.OfInt spliterator();

  public static IterableIntStream from(final Iterable<Integer> iterable) {
    return from(iterable.spliterator());
  }

  public static IterableIntStream from(final Iterator<Integer> iterator) {
    return from(() -> iterator);
  }

  public static IterableIntStream from(final Spliterator<Integer> spliterator) {
    return from(StreamSupport.stream(spliterator, false));
  }

  public static IterableIntStream from(final Spliterator.OfInt spliterator) {
    return from(StreamSupport.intStream(spliterator, false));
  }

  public static IterableIntStream from(final Stream<Integer> stream) {
    return from(stream.mapToInt(Integer::intValue));
  }

  public static IterableIntStream from(final IntStream stream) {
    @SuppressWarnings("unchecked")
    var proxy = (IterableIntStream) Proxy.newProxyInstance(
      ClassLoader.getSystemClassLoader(),
      new Class<?>[] { IterableIntStream.class },
      (Object _proxy, Method method, Object[] args) ->
        IntStream.class.getMethod(
            method.getName(),
            method.getParameterTypes()
          ).invoke(stream, args)
    );
    return proxy;
  }
}"
`;

exports[`App can render goody: Java IterableLongStream 1`] = `
"package iterable_long_stream;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@SuppressWarnings("overloads")
interface IterableLongStream extends Iterable<Long>, LongStream {
  @Override
  public Spliterator.OfLong spliterator();

  public static IterableLongStream from(final Iterable<Long> iterable) {
    return from(iterable.spliterator());
  }

  public static IterableLongStream from(final Iterator<Long> iterator) {
    return from(() -> iterator);
  }

  public static IterableLongStream from(final Spliterator<Long> spliterator) {
    return from(StreamSupport.stream(spliterator, false));
  }

  public static IterableLongStream from(final Spliterator.OfLong spliterator) {
    return from(StreamSupport.longStream(spliterator, false));
  }

  public static IterableLongStream from(final Stream<Long> stream) {
    return from(stream.mapToLong(Long::longValue));
  }

  public static IterableLongStream from(final LongStream stream) {
    @SuppressWarnings("unchecked")
    var proxy = (IterableLongStream) Proxy.newProxyInstance(
      ClassLoader.getSystemClassLoader(),
      new Class<?>[] { IterableLongStream.class },
      (Object _proxy, Method method, Object[] args) ->
        LongStream.class.getMethod(
            method.getName(),
            method.getParameterTypes()
          ).invoke(stream, args)
    );
    return proxy;
  }
}"
`;

exports[`App can render goody: Java IterableStream 1`] = `
"package iterable_stream;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

interface IterableStream<T> extends Iterable<T>, Stream<T> {
  @Override
  public void forEach(Consumer<? super T> action);

  @Override
  public Spliterator<T> spliterator();

  public static <T> IterableStream<T> from(final Iterable<T> iterable) {
    return from(iterable.spliterator());
  }

  public static <T> IterableStream<T> from(final Iterator<T> iterator) {
    return from(() -> iterator);
  }

  public static <T> IterableStream<T> from(final Spliterator<T> spliterator) {
    return from(StreamSupport.stream(spliterator, false));
  }

  public static <T> IterableStream<T> from(final Stream<T> stream) {
    @SuppressWarnings("unchecked")
    var proxy = (IterableStream<T>) Proxy.newProxyInstance(
      ClassLoader.getSystemClassLoader(),
      new Class<?>[] { IterableStream.class },
      (Object _proxy, Method method, Object[] args) ->
        Stream.class.getMethod(
            method.getName(),
            method.getParameterTypes()
          ).invoke(stream, args)
    );
    return proxy;
  }
}"
`;

exports[`App can render goody: Java Pair 1`] = `
"package pair;

record Pair<TFirst, TSecond>(TFirst first, TSecond second) {}"
`;

exports[`App can render goody: Java SimpleIterator 1`] = `
"package simple_iterator;

import java.util.Iterator;
import java.util.NoSuchElementException;

interface SimpleIterator<T> {
  public T next();

  static enum HasNextState {
    TRUE,
    FALSE,
    UNKNOWN,
  }

  public static <T> Iterator<T> toIterator(final SimpleIterator<T> iterator) {
    final HasNextState[] hasNextState = { HasNextState.UNKNOWN };
    final Object[] elementReserve = { null };

    return new Iterator<T>() {
      public boolean hasNext() {
        if (hasNextState[0] == HasNextState.UNKNOWN) {
          try {
            elementReserve[0] = iterator.next();
            hasNextState[0] = HasNextState.TRUE;
          } catch (NoSuchElementException e) {
            hasNextState[0] = HasNextState.FALSE;
          }
        }

        return hasNextState[0] == HasNextState.TRUE;
      }

      public T next() {
        if (hasNextState[0] == HasNextState.TRUE) {
          hasNextState[0] = HasNextState.UNKNOWN;

          @SuppressWarnings("unchecked")
          T element = (T) elementReserve[0];

          elementReserve[0] = null;
          return element;
        }

        if (hasNextState[0] == HasNextState.UNKNOWN) {
          return iterator.next();
        }

        throw new NoSuchElementException();
      }
    };
  }
}"
`;

exports[`App can render goody: Java UnionFind 1`] = `
"package union_find;

/**
 * The classic disjoint-set data structure!
 */
class UnionFind {
  private final int[] parent;
  private final int[] componentSize;
  private int components;

  public UnionFind(int n) {
    parent = new int[n];
    componentSize = new int[n];
    components = n;
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
      componentSize[i] = 1;
    }
  }

  public boolean union(int a, int b) {
    int pa = find(a);
    int pb = find(b);

    if (pa == pb) {
      return false;
    }

    if (componentSize[pa] > componentSize[pb]) {
      componentSize[pa] += componentSize[pb];
      parent[pb] = parent[pa];
    } else {
      componentSize[pb] += componentSize[pa];
      parent[pa] = parent[pb];
    }
    --components;

    return true;
  }

  public int find(int a) {
    if (parent[a] == a) {
      return a;
    }

    return parent[a] = find(parent[a]);
  }

  public boolean areConnected(int a, int b) {
    return find(a) == find(b);
  }

  public int components() {
    return components;
  }
}"
`;

exports[`App can render goody: Java VirtualList 1`] = `
"package virtual_list;

import java.util.AbstractList;
import java.util.function.IntFunction;

final class VirtualList<T> extends AbstractList<T> {
  private final int size;
  private final IntFunction<T> getter;

  public VirtualList(int size, IntFunction<T> getter) {
    this.getter = getter;
    this.size = size;
  }

  public T get(int index) {
    if (index < 0 || index >= this.size) {
      throw new IndexOutOfBoundsException();
    }
    return this.getter.apply(index);
  }

  public int size() {
    return this.size;
  }
}"
`;

exports[`App can render goody: Java digits(int) 1`] = `
"package digits_int;

import iterable_int_stream.IterableIntStream;

import java.util.stream.IntStream;

final class AP {
  private AP() {}

  /**
   * Get the digits in the given integer. The digits are returned as an
   * {@link IterableIntStream integer stream} with the least significant digit as the first element
   * in the stream. For example, for integer 27363, [3,6,3,7,2] is returned.
   * @param number Integer of interest.
   * @return The {@link IterableIntStream stream} of digits.
   */
  public static IterableIntStream digits(int number) {
    return digits(number, 10);
  }

  /**
   * Get the digits in the given integer for the given radix value. The digits are returned as an
   * {@link IterableIntStream integer stream} with the least significant digit as the first element
   * in the stream. For example, for integer 27363, [3,6,3,7,2] is returned with radix = 10.
   * @param number Integer of interest.
   * @param radix Radix value of interest.
   * @return The {@link IterableIntStream stream} of digits.
   */
  public static IterableIntStream digits(int number, int radix) {
    if (number < 0) throw new IllegalArgumentException(
      "Please provide a positive integer."
    );

    if (radix < 2) throw new IllegalArgumentException(
      "Please provide a radix greater than or equal to 2."
    );

    return IterableIntStream.from(
      number == 0
        ? IntStream.of(0)
        : IntStream.iterate(number, num -> num != 0, num -> num / radix).map(
          num -> num % radix
        )
    );
  }
}"
`;

exports[`App can render goody: Java gcd(int,int) 1`] = `
"package gcd_int_int;

final class AP {
  private AP() {}

  public static int gcd(int a, int b) {
    if (a < 0 || b < 0) {
      throw new IllegalArgumentException(
        "Can only find the GCD of non-negative integers!"
      );
    }

    while (b != 0) {
      int tmp = b;
      b = a % b;
      a = tmp;
    }

    return a;
  }
}"
`;

exports[`App can render goody: Java lcm(int,int) 1`] = `
"package lcm_int_int;

import static gcd_int_int.AP.*;

final class AP {
  private AP() {}

  public static int lcm(int a, int b) {
    return (a / gcd(a, b)) * b;
  }
}"
`;

exports[`App can render goody: Java primes() 1`] = `
"package primes;

import iterable_int_stream.IterableIntStream;
import simple_iterator.SimpleIterator;

import java.util.ArrayList;
import java.util.List;

final class AP {
  private AP() {}

  public static IterableIntStream primes() {
    final boolean[] yieldedTwo = { false };
    final List<Integer> oddPrimes = new ArrayList<>();

    return IterableIntStream.from(
      SimpleIterator.toIterator(() -> {
        if (!yieldedTwo[0]) {
          yieldedTwo[0] = true;
          return 2;
        }

        for (
          int num = oddPrimes.isEmpty()
            ? 3
            : oddPrimes.get(oddPrimes.size() - 1) + 2;;
          num += 2
        ) {
          boolean isPrime = true;
          for (int p : oddPrimes) {
            if (p * p > num) {
              break;
            }
            if (num % p == 0) {
              isPrime = false;
              break;
            }
          }
          if (isPrime) {
            oddPrimes.add(num);
            return num;
          }
        }
      })
    );
  }
}"
`;

exports[`App can render goody: Java traverseInOrder() 1`] = `
"package traverse_in_order;

import iterable_stream.IterableStream;
import pair.Pair;
import simple_iterator.SimpleIterator;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Stack;

final class AP {
  private AP() {}

  public static IterableStream<TreeNode> traverseInOrder(final TreeNode root) {
    final var stack = new Stack<Pair<TreeNode, Boolean>>();
    stack.push(new Pair<>(root, false));

    return IterableStream.from(
      SimpleIterator.toIterator(() -> {
        while (!stack.isEmpty()) {
          var nodeAndDidTraverseLeftChild = stack.pop();

          var node = nodeAndDidTraverseLeftChild.first();
          if (node == null) {
            continue;
          }

          if (nodeAndDidTraverseLeftChild.second()) {
            return node;
          }

          stack.push(new Pair<>(node.right, false));
          stack.push(new Pair<>(node, true));
          stack.push(new Pair<>(node.left, false));
        }

        throw new NoSuchElementException();
      })
    );
  }
}"
`;

exports[`App can render goody: Java traversePostOrder() 1`] = `
"package traverse_post_order;

import iterable_stream.IterableStream;
import pair.Pair;
import simple_iterator.SimpleIterator;

import java.util.NoSuchElementException;
import java.util.Stack;

final class AP {
  private AP() {}

  /**
   * Get an {@link IterableStream iterable stream} of all the {@link TreeNode nodes} in the binary
   * tree in post-order.
   * @param root Binary tree root {@link TreeNode node}.
   * @return The {@link IterableStream iterable stream} in post-order.
   */
  public static IterableStream<TreeNode> traversePostOrder(
    final TreeNode root
  ) {
    final var stack = new Stack<Pair<TreeNode, Boolean>>();
    stack.push(new Pair<>(root, false));

    return IterableStream.from(
      SimpleIterator.toIterator(() -> {
        while (!stack.isEmpty()) {
          var nodeAndDidTraverseChildren = stack.pop();

          var node = nodeAndDidTraverseChildren.first();
          if (node == null) {
            continue;
          }

          if (nodeAndDidTraverseChildren.second()) {
            return node;
          }

          stack.push(new Pair<>(node, true));
          stack.push(new Pair<>(node.right, false));
          stack.push(new Pair<>(node.left, false));
        }

        throw new NoSuchElementException();
      })
    );
  }
}"
`;

exports[`App can render goody: Java traversePreOrder() 1`] = `
"package traverse_pre_order;

import iterable_stream.IterableStream;
import simple_iterator.SimpleIterator;

import java.util.NoSuchElementException;
import java.util.Stack;

final class AP {
  private AP() {}

  /**
   * Get an {@link IterableStream iterable stream} of all the {@link TreeNode nodes} in the binary
   * tree in pre-order.
   * @param root Binary tree root {@link TreeNode node}.
   * @return The {@link IterableStream iterable stream} in pre-order.
   */
  public static IterableStream<TreeNode> traversePreOrder(final TreeNode root) {
    final var stack = new Stack<TreeNode>();
    stack.push(root);

    return IterableStream.from(
      SimpleIterator.toIterator(() -> {
        while (!stack.isEmpty()) {
          var node = stack.pop();

          if (node != null) {
            stack.push(node.right);
            stack.push(node.left);
            return node;
          }
        }

        throw new NoSuchElementException();
      })
    );
  }
}"
`;

exports[`App can render goody: JavaScript Array.prototype.slidingWindows 1`] = `
"import "ArraySlice";

Array.prototype.slidingWindows = function* (windowSize) {
  for (
    let win = ArraySlice.get(this, 0, windowSize - 1);
    win != null;
    win = win.isSuffix() ? null : win.slide()
  ) {
    yield win;
  }
};"
`;

exports[`App can render goody: JavaScript Array.prototype.swap 1`] = `
"Array.prototype.swap = function (i, j) {
  const tmp = this[i];
  this[i] = this[j];
  this[j] = tmp;
};"
`;

exports[`App can render goody: JavaScript ArraySlice 1`] = `
"export class ArraySlice {
  constructor(array, start, end) {
    this.array = array;
    this.start = start;
    this.end = end;
  }

  get length() {
    return this.end - this.start + 1;
  }

  at(index) {
    const adjustedIndex = index < 0 ? index + this.length : index;
    return this.array[this.start + adjustedIndex];
  }

  *[Symbol.iterator]() {
    for (let i = this.start; i <= this.end; ++i) {
      yield this.array[i];
    }
  }

  slide(delta = 1) {
    return ArraySlice.get(this.array, this.start + delta, this.end + delta);
  }

  isPrefix() {
    return this.start === 0;
  }

  isSuffix() {
    return this.end === this.array.length - 1;
  }

  static get(array, start, end) {
    ArraySlice.proxyHandler ??= {
      get(target, property, receiver) {
        if (typeof property === "string" || typeof property === "number") {
          const index = parseInt(String(property), 10);
          if (String(index) === String(property)) {
            if (index < 0 || index >= receiver.length) {
              return undefined;
            }
            return receiver.at(index);
          }
        }

        return target[property];
      },
    };

    return new Proxy(
      new ArraySlice(array, start, end),
      ArraySlice.proxyHandler,
    );
  }
}"
`;

exports[`App can render goody: JavaScript BinaryHeap 1`] = `
"import "Array.prototype.swap";

export class BinaryHeap {
  elements = [];

  constructor(compareFn) {
    this.compareFn = compareFn;
  }

  push(element) {
    this.elements.push(element);
    this.bubbleUp(this.size - 1);
  }

  peek() {
    return this.elements[0];
  }

  pop() {
    if (this.isEmpty()) {
      return undefined;
    }

    this.elements.swap(0, this.size - 1);
    const res = this.elements.pop();
    this.bubbleDown(0);
    return res;
  }

  get size() {
    return this.elements.length;
  }

  isEmpty() {
    return this.size === 0;
  }

  static getParentIndex(index) {
    return Math.floor((index - 1) / 2);
  }

  static getChildIndexes(index) {
    // TODO: investigate whether listing the right child first can offer a
    // performance boost in bubbleDown(), due to favoring the side of the
    // tree that may be smaller
    return [2 * index + 1, 2 * index + 2];
  }

  bubbleUp(index) {
    if (index === 0) {
      return;
    }

    const parentIndex = BinaryHeap.getParentIndex(index);
    if (this.compareFn(this.elements[index], this.elements[parentIndex]) < 0) {
      this.elements.swap(index, parentIndex);
      this.bubbleUp(parentIndex);
    }
  }

  bubbleDown(index) {
    let bestIndex = index;
    for (const childIndex of BinaryHeap.getChildIndexes(index)) {
      if (
        childIndex < this.size &&
        this.compareFn(this.elements[childIndex], this.elements[bestIndex]) < 0
      ) {
        bestIndex = childIndex;
      }
    }

    if (bestIndex !== index) {
      this.elements.swap(index, bestIndex);
      this.bubbleDown(bestIndex);
    }
  }
}"
`;

exports[`App can render goody: JavaScript Function.returnThis 1`] = `
"Function.returnThis = function () {
  return this;
};"
`;

exports[`App can render goody: JavaScript Iterator.from 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

globalThis.Iterator ??= {};
globalThis.Iterator.from ??= function (object) {
  const toIterable = iteratorPrototype.toIterable;

  const iteratorFactory = object[Symbol.iterator];
  if (typeof iteratorFactory === "function") {
    return toIterable.call(iteratorFactory.call(object));
  }

  if (Object.prototype.isPrototypeOf.call(iteratorPrototype, object)) {
    return toIterable.call(object);
  }

  if (typeof object.next === "function") {
    return (function* () {
      yield* toIterable.call(object);
    })();
  }

  throw new TypeError(
    "Object is not an iterator, iterable, or an object with a next method",
  );
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype 1`] = `
"export const iteratorPrototype = Object.getPrototypeOf(
  Object.getPrototypeOf([].values()),
);"
`;

exports[`App can render goody: JavaScript Iterator.prototype.drop 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.drop ??= function (limit) {
  if (!Number.isInteger(limit) || limit < 0) {
    throw new RangeError(\`Limit must be a non-negative integer, got \${limit}\`);
  }
  return function* () {
    let index = 0;
    // Skip the first \`limit\` elements.
    for (const value of this.toIterable()) {
      if (index++ < limit) {
        continue;
      }
      yield value;
    }
  }.call(this);
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.every 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.every ??= function (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    if (!callbackFn(element, index)) {
      return false;
    }
    ++index;
  }
  return true;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.filter 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.filter ??= function* (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      yield element;
    }
    ++index;
  }
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.find 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.find ??= function (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      return element;
    }
    ++index;
  }
  return undefined;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.flatMap 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.flatMap ??= function* (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    const res = callbackFn(element, index);
    if (!(Symbol.iterator in res || typeof res.next === "function")) {
      throw new TypeError("Callback must return an iterable or iterator");
    }
    yield* Symbol.iterator in res ? res : res.toIterable();
    ++index;
  }
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.forEach 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.forEach ??= function (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    callbackFn(element, index);
    ++index;
  }
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.map 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.map ??= function* (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    yield callbackFn(element, index);
    ++index;
  }
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.max 1`] = `
"import "compareNatural";
import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.max = function (
  compareFn = compareNatural,
  { nanBehavior = "avoid" } = {},
) {
  let res = undefined;

  let isFirst = true;
  for (const element of this.toIterable()) {
    if (
      isFirst ||
      compareFn(element, res) > 0 ||
      (nanBehavior === "avoid" && Number.isNaN(res) && !Number.isNaN(element))
    ) {
      res = element;
      isFirst = false;
    }
  }

  return res;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.min 1`] = `
"import "compareNatural";
import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.min = function (
  compareFn = compareNatural,
  { nanBehavior = "avoid" } = {},
) {
  let res = undefined;

  let isFirst = true;
  for (const element of this.toIterable()) {
    if (
      isFirst ||
      compareFn(element, res) < 0 ||
      (nanBehavior === "avoid" && Number.isNaN(res) && !Number.isNaN(element))
    ) {
      res = element;
      isFirst = false;
    }
  }

  return res;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.product 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.product = function () {
  let res = 1;
  for (const element of this.toIterable()) {
    res *= element;
  }

  return res;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.reduce 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.reduce ??= function (callbackFn, initialValue) {
  let index = 0;
  let accumulator = initialValue;
  let isAccumulatorInitialized = arguments.length > 1;

  for (const element of this.toIterable()) {
    if (!isAccumulatorInitialized) {
      accumulator = element;
      isAccumulatorInitialized = true;
    } else {
      accumulator = callbackFn(accumulator, element, index);
    }
    ++index;
  }

  if (!isAccumulatorInitialized) {
    throw new TypeError("Reduce of empty iterator with no initial value");
  }

  return accumulator;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.some 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.some ??= function (callbackFn) {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      return true;
    }
    ++index;
  }
  return false;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.sum 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.sum = function () {
  let res = 0;
  for (const element of this.toIterable()) {
    res += element;
  }
  return res;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.take 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.take ??= function (limit) {
  if (!Number.isInteger(limit) || limit < 0) {
    throw new RangeError(\`Limit must be a non-negative integer, got \${limit}\`);
  }
  if (limit === 0) {
    return [].values();
  }
  return function* () {
    let index = 0;
    for (const value of this.toIterable()) {
      yield value;
      if (++index >= limit) {
        return;
      }
    }
  }.call(this);
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.tally 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.tally = function () {
  const tally = new Map();

  for (const element of this.toIterable()) {
    tally.set(element, (tally.get(element) ?? 0) + 1);
  }

  return tally;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.toArray 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.toArray ??= function () {
  return [...this.toIterable()];
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.toIterable 1`] = `
"import "Function.returnThis";
import "Iterator.prototype";

iteratorPrototype.toIterable = function () {
  this[Symbol.iterator] ??= Function.returnThis;
  return this;
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.toMap 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.toMap = function () {
  return new Map(this.toIterable());
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.toObject 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.toObject = function () {
  return Object.fromEntries(this.toIterable());
};"
`;

exports[`App can render goody: JavaScript Iterator.prototype.toSet 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

iteratorPrototype.toSet ??= function () {
  return new Set(this.toIterable());
};"
`;

exports[`App can render goody: JavaScript Map.groupBy 1`] = `
"Map.groupBy ??= function (iterable, callbackFn) {
  const groups = new Map();

  let index = 0;
  for (const value of iterable) {
    const key = callbackFn(value, index++);
    const group = groups.get(key);
    if (group == null) {
      groups.set(key, [value]);
    } else {
      group.push(value);
    }
  }

  return groups;
};"
`;

exports[`App can render goody: JavaScript Math.gcd 1`] = `
"Math.gcd = function (a, b) {
  a = Math.abs(a);
  b = Math.abs(b);

  while (b !== 0) {
    const temp = b;
    b = a % b;
    a = temp;
  }
  return a;
};"
`;

exports[`App can render goody: JavaScript Math.lcm 1`] = `
"import "Math.gcd";

Math.lcm = function (a, b) {
  if (a === 0 || b === 0) {
    return 0;
  }

  a = Math.abs(a);
  b = Math.abs(b);
  return (a / Math.gcd(a, b)) * b;
};"
`;

exports[`App can render goody: JavaScript Math.primes 1`] = `
"Math.primes = function* () {
  yield 2;

  const oddPrimes = [];
  for (let num = 3; ; num += 2) {
    let isPrime = true;
    for (const p of oddPrimes) {
      if (p * p > num) {
        break;
      }
      if (num % p === 0) {
        isPrime = false;
        break;
      }
    }
    if (isPrime) {
      yield num;
      oddPrimes.push(num);
    }
  }
};"
`;

exports[`App can render goody: JavaScript Number.prototype.chr 1`] = `
"Number.prototype.chr = function () {
  return String.fromCodePoint(Number(this));
};"
`;

exports[`App can render goody: JavaScript Number.prototype.digits 1`] = `
"Number.prototype.digits = function (radix = 10) {
  let num = Number(this);
  if (!(Number.isInteger(num) && num >= 0)) {
    throw new Error("Must invoke on a non-negative integer.");
  }
  if (!(Number.isInteger(radix) && radix >= 2)) {
    throw new Error("Radix must be an integer >= 2.");
  }

  return (function* () {
    do {
      yield num % radix;
      num = Math.floor(num / radix);
    } while (num > 0);
  })();
};"
`;

exports[`App can render goody: JavaScript Object.getUnsafe 1`] = `
"Object.getUnsafe = function (obj, properties) {
  let res = obj;
  for (const property of properties) {
    res = res[property];
  }
  return res;
};"
`;

exports[`App can render goody: JavaScript Object.prototype.entries 1`] = `
"import "Iterator.prototype.map";
import "Object.prototype.keys";

Object.prototype.entries = function () {
  return this.keys().map((k) => [k, this[k]]);
};"
`;

exports[`App can render goody: JavaScript Object.prototype.keys 1`] = `
"Object.prototype.keys = function* () {
  for (const key in this) {
    if (Object.hasOwn(this, key)) {
      yield key;
    }
  }
};"
`;

exports[`App can render goody: JavaScript Object.prototype.values 1`] = `
"import "Iterator.prototype.map";
import "Object.prototype.keys";

Object.prototype.values = function () {
  return this.keys().map((k) => this[k]);
};"
`;

exports[`App can render goody: JavaScript Object.setUnsafe 1`] = `
"Object.setUnsafe = function (obj, properties, value) {
  let map = obj;
  for (let i = 0; i < properties.length - 1; ++i) {
    map = map[properties[i]] ??= {};
  }
  map[properties.at(-1)] = value;
};"
`;

exports[`App can render goody: JavaScript String.prototype.chars 1`] = `"String.prototype.chars = String.prototype[Symbol.iterator];"`;

exports[`App can render goody: JavaScript String.prototype.ord 1`] = `
"String.prototype.ord = function () {
  return this.codePointAt(0);
};"
`;

exports[`App can render goody: JavaScript compareNatural 1`] = `
"export function compareNatural(a, b) {
  if (
    (typeof a === "number" && typeof b === "number") ||
    (typeof a === "string" && typeof b === "string") ||
    (typeof a === "bigint" && typeof b === "bigint")
  ) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  if (Array.isArray(a) && Array.isArray(b)) {
    for (let i = 0; i < a.length && i < b.length; ++i) {
      const compareResult = compareNatural(a[i], b[i]);
      if (compareResult !== 0) {
        return compareResult;
      }
    }

    return a.length - b.length;
  }

  throw new Error("Comparing mismatched types!");
}"
`;

exports[`App can render goody: JavaScript console.meow 1`] = `
"console.meow = function () {
  console.log.call(this, "😺", ...arguments);
};"
`;

exports[`App can render goody: JavaScript invariant 1`] = `
"export function invariant(condition, errorMessage = "Invariant violation!") {
  if (!condition) {
    throw new Error(errorMessage);
  }
}"
`;

exports[`App can render goody: JavaScript invariantViolation 1`] = `
"import "invariant";

export function invariantViolation(errorMessage) {
  invariant(false, errorMessage);
}"
`;

exports[`App can render goody: JavaScript isNonNullish 1`] = `
"export function isNonNullish(value) {
  return value != null;
}"
`;

exports[`App can render goody: JavaScript newArray 1`] = `
"import "nullthrows";

export function newArray([first, ...rest], fillValue = null) {
  const outer = Array(nullthrows(first, "Missing dimensions!"));
  if (rest.length === 0) {
    return outer.fill(fillValue);
  }
  for (let i = 0; i < first; ++i) {
    outer[i] = newArray(rest, fillValue);
  }
  return outer;
}"
`;

exports[`App can render goody: JavaScript nullthrows 1`] = `
"export function nullthrows(value, errorMessage = "Unexpected nullish value!") {
  if (value == null) {
    throw new Error(errorMessage);
  }
  return value;
}"
`;

exports[`App can render goody: JavaScript traverseInOrder 1`] = `
"export function* traverseInOrder(root) {
  const stack = [[root, false]];

  do {
    const [node, didTraverseLeftChild] = stack.pop();
    if (node == null) {
      continue;
    }

    if (didTraverseLeftChild) {
      yield node;
      continue;
    }

    stack.push([node.right, false], [node, true], [node.left, false]);
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: JavaScript traverseLevelOrder 1`] = `
"import "isNonNullish";

export function* traverseLevelOrder(root) {
  if (root == null) {
    return;
  }

  let level = [root];
  do {
    yield level;

    level = level
      .flatMap((node) => [node.left, node.right])
      .filter(isNonNullish);
  } while (level.length > 0);
}"
`;

exports[`App can render goody: JavaScript traversePostOrder 1`] = `
"export function* traversePostOrder(root) {
  const stack = [[root, false]];

  do {
    const [node, didTraverseChildren] = stack.pop();
    if (node == null) {
      continue;
    }

    if (didTraverseChildren) {
      yield node;
      continue;
    }

    stack.push([node, true], [node.right, false], [node.left, false]);
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: JavaScript traversePostOrderNAry 1`] = `
"export function* traversePostOrderNAry(root) {
  const stack = [[root, false]];

  do {
    const [node, didTraverseChildren] = stack.pop();
    if (node == null) {
      continue;
    }

    if (didTraverseChildren) {
      yield node;
      continue;
    }

    stack.push([node, true]);
    // TODO: add an Array.prototype.valuesReversed() goody and use it here
    for (let i = node.children.length - 1; i >= 0; --i) {
      stack.push([node.children[i], false]);
    }
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: JavaScript traversePreOrder 1`] = `
"export function* traversePreOrder(root) {
  const stack = [root];

  do {
    const node = stack.pop();

    if (node != null) {
      yield node;
      stack.push(node.right, node.left);
    }
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: Kotlin gcd(Int,Int) 1`] = `
"package gcd_int_int

public fun gcd(a: Int, b: Int): Int {
  var mutableA = a
  var mutableB = b

  while (mutableB != 0) {
    mutableB = (mutableA % mutableB).also { mutableA = mutableB }
  }

  return mutableA
}"
`;

exports[`App can render goody: Kotlin lcm(Int,Int) 1`] = `
"package lcm_int_int

import gcd_int_int.gcd

public fun lcm(a: Int, b: Int): Int = a / gcd(a, b) * b"
`;

exports[`App can render goody: Kotlin traverseLevelOrder() 1`] = `
"package traverse_level_order

public data class TreeNode(val \`val\`: Int, var left: TreeNode? = null, var right: TreeNode? = null)

public fun TreeNode?.traverseLevelOrder(): Sequence<List<TreeNode>> {
  if (this == null) {
    return sequenceOf()
  }

  var nodesAtLevel = listOf(this)

  return sequence {
    do {
      yield(nodesAtLevel)

      nodesAtLevel = nodesAtLevel.flatMap { listOf(it.left, it.right) }.filterNotNull()
    } while (nodesAtLevel.isNotEmpty())
  }
}"
`;

exports[`App can render goody: Python 3 UnionFind 1`] = `
"class UnionFind:

    def __init__(self, n: int):
        self.parents = list(range(n))

        self.component_size = [1] * n
        self.components = n

    def find(self, component) -> int:
        if self.parents[component] != component:
            self.parents[component] = self.find(self.parents[component])

        return self.parents[component]

    def union(self, c1: int, c2: int) -> bool:
        parent1, parent2 = self.find(c1), self.find(c2)
        if parent1 == parent2:
            return False

        if self.component_size[parent2] > self.component_size[parent1]:
            parent1, parent2 = parent2, parent1

        self.parents[parent2] = parent1
        self.component_size[parent1] += self.component_size[parent2]
        self.components -= 1

        return True

    def are_connected(self, c1: int, c2: int) -> bool:
        return self.find(c1) == self.find(c2)"
`;

exports[`App can render goody: Python 3 flatten 1`] = `
"from typing import Generator, TypeVar

T = TypeVar("T")
NestedList = T | list["NestedList"]


def flatten(self: NestedList) -> Generator[T, None, None]:
    for i in self:
        if isinstance(i, list):
            yield from flatten(i)
        else:
            yield i"
`;

exports[`App can render goody: Python 3 int.digits 1`] = `
"from typing import Generator


def set_up_adventure_pack() -> None:
    def digits(self: int, radix: int = 10) -> Generator[int, None, None]:
        if self < 0:
            raise ValueError("Must invoke on a non-negative integer.")

        if self == 0:
            yield 0
            return

        num = self
        while num > 0:
            yield num % radix
            num //= radix

    import ctypes, gc

    gc.get_referents(int.__dict__)[0]["digits"] = digits
    ctypes.pythonapi.PyType_Modified(ctypes.py_object(int))


set_up_adventure_pack()
del set_up_adventure_pack"
`;

exports[`App can render goody: Python 3 is_palindrome 1`] = `
"def is_palindrome(sequence: list | str) -> bool:
    left: int = 0
    right: int = len(sequence) - 1
    while left < right:
        if sequence[left] != sequence[right]:
            return False
        left += 1
        right -= 1
    return True"
`;

exports[`App can render goody: Python 3 transpose_matrix 1`] = `
"from typing import TypeVar

T = TypeVar("T")


def transpose_matrix(input: list[list[T]]) -> list[list[T]]:
    r = len(input)
    c = len(input[0]) if r != 0 else 0
    if r == 0 or c == 0:
        raise ValueError("Can't transpose a matrix that has a 0 dimension!")
    if any(len(row) != c for row in input):
        raise ValueError("Matrix has rows of different lengths!")

    return [list(row) for row in zip(*input)]"
`;

exports[`App can render goody: Python 3 traverse_inorder 1`] = `
"from typing import Generator, Optional


class TreeNode:
    def __init__(
        self,
        val: int = 0,
        left: Optional["TreeNode"] = None,
        right: Optional["TreeNode"] = None,
    ):
        self.val = val
        self.left = left
        self.right = right


def traverse_inorder(
    root: Optional[TreeNode],
) -> Generator[TreeNode, None, None]:
    stack = [(root, False)]
    while stack:
        node, did_traverse_left_child = stack.pop()
        if not node:
            continue

        if did_traverse_left_child:
            yield node
            continue

        stack.append((node.right, False))
        stack.append((node, True))
        stack.append((node.left, False))"
`;

exports[`App can render goody: Python 3 traverse_level_order 1`] = `
"from typing import Generator, Optional, List


class TreeNode:
    def __init__(
        self,
        val: int = 0,
        left: Optional["TreeNode"] = None,
        right: Optional["TreeNode"] = None,
    ):
        self.val = val
        self.left = left
        self.right = right


def traverse_level_order(
    root: Optional[TreeNode],
) -> Generator[List[TreeNode], None, None]:
    level = [root] if root else []
    while level:
        yield level

        level = [
            child
            for node in level
            for child in [node.left, node.right]
            if child is not None
        ]"
`;

exports[`App can render goody: Python 3 traverse_postorder 1`] = `
"from typing import Generator, Optional


class TreeNode:
    def __init__(
        self,
        val: int = 0,
        left: Optional["TreeNode"] = None,
        right: Optional["TreeNode"] = None,
    ):
        self.val = val
        self.left = left
        self.right = right


def traverse_postorder(
    root: Optional[TreeNode],
) -> Generator[TreeNode, None, None]:
    stack = [(root, False)]
    while stack:
        node, did_traverse_children = stack.pop()
        if not node:
            continue

        if did_traverse_children:
            yield node
            continue

        stack.append((node, True))
        stack.append((node.right, False))
        stack.append((node.left, False))"
`;

exports[`App can render goody: Python 3 traverse_preorder 1`] = `
"from typing import Generator, Optional


class TreeNode:
    def __init__(
        self,
        val: int = 0,
        left: Optional["TreeNode"] = None,
        right: Optional["TreeNode"] = None,
    ):
        self.val = val
        self.left = left
        self.right = right


def traverse_preorder(
    root: Optional[TreeNode],
) -> Generator[TreeNode, None, None]:
    stack = [root]
    while stack:
        node = stack.pop()
        if not node:
            continue

        yield node

        stack.append(node.right)
        stack.append(node.left)"
`;

exports[`App can render goody: TypeScript Array.prototype.slidingWindows 1`] = `
"import "ArraySlice";

declare global {
  interface Array<T> {
    slidingWindows(
      this: ReadonlyArray<T>,
      windowSize: number,
    ): Generator<IndexableArraySlice<T>, void, void>;
  }

  interface ReadonlyArray<T> {
    slidingWindows(
      this: ReadonlyArray<T>,
      windowSize: number,
    ): Generator<IndexableArraySlice<T>, void, void>;
  }
}

Array.prototype.slidingWindows = function* <T>(
  this: ReadonlyArray<T>,
  windowSize: number,
): Generator<IndexableArraySlice<T>, void, void> {
  for (
    let win: IndexableArraySlice<T> | null = ArraySlice.get(
      this,
      0,
      windowSize - 1,
    );
    win != null;
    win = win.isSuffix() ? null : win.slide()
  ) {
    yield win;
  }
};"
`;

exports[`App can render goody: TypeScript Array.prototype.swap 1`] = `
"declare global {
  interface Array<T> {
    swap(this: T[], i: number, j: number): void;
  }
}

Array.prototype.swap = function <T>(this: T[], i: number, j: number): void {
  const tmp = this[i];
  this[i] = this[j];
  this[j] = tmp;
};"
`;

exports[`App can render goody: TypeScript ArraySlice 1`] = `
"type ArraySliceProxyHandler<T> = {
  get(
    target: ArraySlice<T>,
    property: PropertyKey,
    receiver: ArraySlice<T>,
  ): unknown;
};

export type IndexableArraySlice<T> = ArraySlice<T> & {
  [index: number]: T | undefined;
};

export class ArraySlice<T> {
  private constructor(
    public readonly array: ReadonlyArray<T>,
    public readonly start: number,
    public readonly end: number,
  ) {}

  get length(): number {
    return this.end - this.start + 1;
  }

  at(index: number): T | undefined {
    const adjustedIndex = index < 0 ? index + this.length : index;
    return this.array[this.start + adjustedIndex];
  }

  *[Symbol.iterator](this: ArraySlice<T>): Generator<T, void, void> {
    for (let i = this.start; i <= this.end; ++i) {
      yield this.array[i];
    }
  }

  slide(delta: number = 1): IndexableArraySlice<T> {
    return ArraySlice.get(this.array, this.start + delta, this.end + delta);
  }

  isPrefix(): boolean {
    return this.start === 0;
  }

  isSuffix(): boolean {
    return this.end === this.array.length - 1;
  }

  private declare static proxyHandler?: ArraySliceProxyHandler<unknown>;

  static get<T>(
    array: ReadonlyArray<T>,
    start: number,
    end: number,
  ): IndexableArraySlice<T> {
    ArraySlice.proxyHandler ??= {
      get(
        target: ArraySlice<unknown>,
        property: PropertyKey,
        receiver: ArraySlice<unknown>,
      ): unknown {
        if (typeof property === "string" || typeof property === "number") {
          const index = parseInt(String(property), 10);
          if (String(index) === String(property)) {
            if (index < 0 || index >= receiver.length) {
              return undefined;
            }
            return receiver.at(index);
          }
        }

        return (target as unknown as Record<PropertyKey, unknown>)[property];
      },
    };

    return new Proxy(
      new ArraySlice(array, start, end),
      ArraySlice.proxyHandler as ArraySliceProxyHandler<T>,
    ) as IndexableArraySlice<T>;
  }
}"
`;

exports[`App can render goody: TypeScript BinaryHeap 1`] = `
"import "Array.prototype.swap";

export class BinaryHeap<T> {
  private readonly elements: T[] = [];

  constructor(private readonly compareFn: (a: T, b: T) => number) {}

  push(element: T): void {
    this.elements.push(element);
    this.bubbleUp(this.size - 1);
  }

  peek(): T | undefined {
    return this.elements[0];
  }

  pop(): T | undefined {
    if (this.isEmpty()) {
      return undefined;
    }

    this.elements.swap(0, this.size - 1);
    const res = this.elements.pop();
    this.bubbleDown(0);
    return res;
  }

  get size(): number {
    return this.elements.length;
  }

  isEmpty(): boolean {
    return this.size === 0;
  }

  private static getParentIndex(index: number): number {
    return Math.floor((index - 1) / 2);
  }

  private static getChildIndexes(index: number): [number, number] {
    // TODO: investigate whether listing the right child first can offer a
    // performance boost in bubbleDown(), due to favoring the side of the
    // tree that may be smaller
    return [2 * index + 1, 2 * index + 2];
  }

  private bubbleUp(index: number): void {
    if (index === 0) {
      return;
    }

    const parentIndex = BinaryHeap.getParentIndex(index);
    if (this.compareFn(this.elements[index], this.elements[parentIndex]) < 0) {
      this.elements.swap(index, parentIndex);
      this.bubbleUp(parentIndex);
    }
  }

  private bubbleDown(index: number): void {
    let bestIndex = index;
    for (const childIndex of BinaryHeap.getChildIndexes(index)) {
      if (
        childIndex < this.size &&
        this.compareFn(this.elements[childIndex], this.elements[bestIndex]) < 0
      ) {
        bestIndex = childIndex;
      }
    }

    if (bestIndex !== index) {
      this.elements.swap(index, bestIndex);
      this.bubbleDown(bestIndex);
    }
  }
}"
`;

exports[`App can render goody: TypeScript Function.returnThis 1`] = `
"declare global {
  interface FunctionConstructor {
    returnThis<T>(this: T): T;
  }
}

Function.returnThis = function <T>(this: T): T {
  return this;
};"
`;

exports[`App can render goody: TypeScript Iterator.from 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface IteratorConstructor {
    from<T>(
      object: Iterator<T> | Iterable<T> | { next(): IteratorResult<T> },
    ): IterableIterator<T>;
  }

  const Iterator: IteratorConstructor;
}

(globalThis as Record<string, unknown>).Iterator ??= {};
((globalThis as Record<string, unknown>).Iterator as { from: unknown }).from ??=
  function <T>(
    object: Iterator<T> | Iterable<T> | { next(): IteratorResult<T> },
  ): IterableIterator<T> {
    const toIterable = iteratorPrototype.toIterable as (
      this: Iterator<T>,
    ) => IterableIterator<T>;

    const iteratorFactory = (object as Iterable<T>)[Symbol.iterator];
    if (typeof iteratorFactory === "function") {
      return toIterable.call(iteratorFactory.call(object));
    }

    if (Object.prototype.isPrototypeOf.call(iteratorPrototype, object)) {
      return toIterable.call(object as Iterator<T>);
    }

    if (typeof (object as Record<string, unknown>).next === "function") {
      return (function* () {
        yield* toIterable.call(object as Iterator<T>);
      })();
    }

    throw new TypeError(
      "Object is not an iterator, iterable, or an object with a next method",
    );
  };"
`;

exports[`App can render goody: TypeScript Iterator.prototype 1`] = `
"export const iteratorPrototype = Object.getPrototypeOf(
  Object.getPrototypeOf([].values()),
) as Iterator<unknown, unknown, unknown>;"
`;

exports[`App can render goody: TypeScript Iterator.prototype.drop 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    drop(this: Iterator<T>, limit: number): IterableIterator<T>;
  }
}

iteratorPrototype.drop ??= function <T>(
  this: Iterator<T>,
  limit: number,
): IterableIterator<T> {
  if (!Number.isInteger(limit) || limit < 0) {
    throw new RangeError(\`Limit must be a non-negative integer, got \${limit}\`);
  }

  return function* (this: Iterator<T>) {
    let index = 0;

    // Skip the first \`limit\` elements.
    for (const value of this.toIterable()) {
      if (index++ < limit) {
        continue;
      }
      yield value;
    }
  }.call(this);
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.every 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    every(
      this: Iterator<T>,
      callbackFn: (value: T, index: number) => unknown,
    ): boolean;
  }
}

iteratorPrototype.every ??= function <T>(
  this: Iterator<T>,
  callbackFn: (element: T, index: number) => unknown,
): boolean {
  let index = 0;
  for (const element of this.toIterable()) {
    if (!callbackFn(element, index)) {
      return false;
    }
    ++index;
  }
  return true;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.filter 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    filter(
      this: Iterator<T>,
      callbackfn: (value: T, index: number) => unknown,
    ): Generator<T, void, void>;
  }
}

iteratorPrototype.filter ??= function* <T>(
  this: Iterator<T>,
  callbackFn: (element: T, index: number) => unknown,
): Generator<T, void, void> {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      yield element;
    }
    ++index;
  }
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.find 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    find(
      this: Iterator<T>,
      callbackFn: (element: T, index: number) => boolean,
    ): T | undefined;
  }
}

iteratorPrototype.find ??= function <T>(
  this: Iterator<T>,
  callbackFn: (element: T, index: number) => boolean,
): T | undefined {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      return element;
    }
    ++index;
  }
  return undefined;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.flatMap 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    flatMap<TOut>(
      this: Iterator<T>,
      callbackFn: (
        element: T,
        index: number,
      ) => Iterator<TOut> | Iterable<TOut>,
    ): Generator<TOut, void, undefined>;
  }
}

iteratorPrototype.flatMap ??= function* <TIn, TOut>(
  this: Iterator<TIn>,
  callbackFn: (element: TIn, index: number) => Iterator<TOut> | Iterable<TOut>,
): Generator<TOut, void, undefined> {
  let index = 0;
  for (const element of this.toIterable()) {
    const res = callbackFn(element, index);
    if (!(Symbol.iterator in res || typeof res.next === "function")) {
      throw new TypeError("Callback must return an iterable or iterator");
    }
    yield* Symbol.iterator in res
      ? (res as Iterable<TOut>)
      : (res as Iterator<TOut>).toIterable();
    ++index;
  }
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.forEach 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    forEach(
      this: Iterator<T>,
      callbackFn: (element: T, index: number) => void,
    ): void;
  }
}

iteratorPrototype.forEach ??= function <T>(
  this: Iterator<T>,
  callbackFn: (element: T, index: number) => void,
): void {
  let index = 0;
  for (const element of this.toIterable()) {
    callbackFn(element, index);
    ++index;
  }
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.map 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    map<TOut>(
      this: Iterator<T>,
      callbackFn: (element: T, index: number) => TOut,
    ): Generator<TOut, void, void>;
  }
}

iteratorPrototype.map ??= function* <TIn, TOut>(
  this: Iterator<TIn>,
  callbackFn: (element: TIn, index: number) => TOut,
): Generator<TOut, void, void> {
  let index = 0;
  for (const element of this.toIterable()) {
    yield callbackFn(element, index);
    ++index;
  }
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.max 1`] = `
"import "compareNatural";
import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    max(
      this: Iterator<T>,
      compareFn?: (a: T, b: T) => number,
      options?: { nanBehavior?: "avoid" | "compare" },
    ): T | undefined;
  }
}

iteratorPrototype.max = function <T>(
  this: Iterator<T>,
  compareFn: (a: T, b: T) => number = compareNatural,
  { nanBehavior = "avoid" }: { nanBehavior?: "avoid" | "compare" } = {},
): T | undefined {
  let res: T | undefined = undefined;

  let isFirst = true;
  for (const element of this.toIterable()) {
    if (
      isFirst ||
      compareFn(element, res as T) > 0 ||
      (nanBehavior === "avoid" && Number.isNaN(res) && !Number.isNaN(element))
    ) {
      res = element;
      isFirst = false;
    }
  }

  return res;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.min 1`] = `
"import "compareNatural";
import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    min(
      this: Iterator<T>,
      compareFn?: (a: T, b: T) => number,
      options?: { nanBehavior?: "avoid" | "compare" },
    ): T | undefined;
  }
}

iteratorPrototype.min = function <T>(
  this: Iterator<T>,
  compareFn: (a: T, b: T) => number = compareNatural,
  { nanBehavior = "avoid" }: { nanBehavior?: "avoid" | "compare" } = {},
): T | undefined {
  let res: T | undefined = undefined;

  let isFirst = true;
  for (const element of this.toIterable()) {
    if (
      isFirst ||
      compareFn(element, res as T) < 0 ||
      (nanBehavior === "avoid" && Number.isNaN(res) && !Number.isNaN(element))
    ) {
      res = element;
      isFirst = false;
    }
  }

  return res;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.product 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    product(this: Iterator<number>): number;
  }
}

iteratorPrototype.product = function (this: Iterator<number>): number {
  let res = 1;
  for (const element of this.toIterable()) {
    res *= element;
  }

  return res;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.reduce 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    reduce(
      this: Iterator<T>,
      callbackFn: (accumulator: T, value: T, index: number) => T,
    ): T;
    reduce(
      this: Iterator<T>,
      callbackFn: (accumulator: T, value: T, index: number) => T,
      initialValue: T,
    ): T;
    reduce<U>(
      this: Iterator<T>,
      callbackFn: (accumulator: U, value: T, index: number) => U,
      initialValue: U,
    ): U;
  }
}

iteratorPrototype.reduce ??= function <T, U>(
  this: Iterator<T>,
  callbackFn: (accumulator: U, value: T, index: number) => U,
  initialValue?: U,
): U {
  let index = 0;
  let accumulator: U = initialValue!;
  let isAccumulatorInitialized = arguments.length > 1;

  for (const element of this.toIterable()) {
    if (!isAccumulatorInitialized) {
      accumulator = element as unknown as U;
      isAccumulatorInitialized = true;
    } else {
      accumulator = callbackFn(accumulator, element, index);
    }
    ++index;
  }

  if (!isAccumulatorInitialized) {
    throw new TypeError("Reduce of empty iterator with no initial value");
  }

  return accumulator;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.some 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    some(
      this: Iterator<T>,
      callbackFn: (value: T, index: number) => unknown,
    ): boolean;
  }
}

iteratorPrototype.some ??= function <T>(
  this: Iterator<T>,
  callbackFn: (element: T, index: number) => unknown,
): boolean {
  let index = 0;
  for (const element of this.toIterable()) {
    if (callbackFn(element, index)) {
      return true;
    }
    ++index;
  }
  return false;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.sum 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    sum(this: Iterator<number>): number;
  }
}

iteratorPrototype.sum = function (this: Iterator<number>): number {
  let res = 0;
  for (const element of this.toIterable()) {
    res += element;
  }
  return res;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.take 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    take(this: Iterator<T>, limit: number): IterableIterator<T>;
  }
}

iteratorPrototype.take ??= function <T>(
  this: Iterator<T>,
  limit: number,
): IterableIterator<T> {
  if (!Number.isInteger(limit) || limit < 0) {
    throw new RangeError(\`Limit must be a non-negative integer, got \${limit}\`);
  }

  if (limit === 0) {
    return [].values();
  }

  return function* (this: Iterator<T>) {
    let index = 0;

    for (const value of this.toIterable()) {
      yield value;
      if (++index >= limit) {
        return;
      }
    }
  }.call(this);
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.tally 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    tally(this: Iterator<T>): Map<T, number>;
  }
}

iteratorPrototype.tally = function <T>(this: Iterator<T>): Map<T, number> {
  const tally = new Map<T, number>();

  for (const element of this.toIterable()) {
    tally.set(element, (tally.get(element) ?? 0) + 1);
  }

  return tally;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.toArray 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    toArray(this: Iterator<T>): T[];
  }
}

iteratorPrototype.toArray ??= function <T>(this: Iterator<T>): T[] {
  return [...this.toIterable()];
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.toIterable 1`] = `
"import "Function.returnThis";
import "Iterator.prototype";

declare global {
  interface Iterator<T> {
    toIterable(this: Iterator<T>): IterableIterator<T>;
  }
}

iteratorPrototype.toIterable = function <T>(
  this: Iterator<T>,
): IterableIterator<T> {
  (this as unknown as Record<symbol, unknown>)[Symbol.iterator] ??=
    Function.returnThis;
  return this as unknown as IterableIterator<T>;
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.toMap 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    toMap<TElem extends readonly [unknown, unknown]>(
      this: Iterator<TElem>,
    ): Map<TElem[0], TElem[1]>;
    toMap<TElem extends readonly unknown[]>(
      this: Iterator<TElem>,
    ): Map<TElem[number], TElem[number]>;
  }
}

iteratorPrototype.toMap = function (this: Iterator<unknown>) {
  return new Map(this.toIterable() as unknown as Iterable<[unknown, unknown]>);
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.toObject 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    toObject<TElem extends readonly [unknown, unknown]>(
      this: Iterator<TElem>,
    ): Record<PropertyKeyify<TElem[0]>, TElem[1]>;
    toObject<TElem extends readonly unknown[]>(
      this: Iterator<TElem>,
    ): Map<PropertyKeyify<TElem[number]>, TElem[number]>;
  }
}

type PropertyKeyify<T> = T extends string | symbol
  ? T
  : T extends number | bigint | boolean | null | undefined
    ? \`\${T}\`
    : T extends { toString(): infer S extends PropertyKey }
      ? S
      : string;

iteratorPrototype.toObject = function (this: Iterator<unknown>) {
  return Object.fromEntries(
    this.toIterable() as unknown as Iterable<[unknown, unknown]>,
  );
};"
`;

exports[`App can render goody: TypeScript Iterator.prototype.toSet 1`] = `
"import "Iterator.prototype";
import "Iterator.prototype.toIterable";

declare global {
  interface Iterator<T> {
    toSet(this: Iterator<T>): Set<T>;
  }
}

iteratorPrototype.toSet ??= function <T>(this: Iterator<T>): Set<T> {
  return new Set(this.toIterable());
};"
`;

exports[`App can render goody: TypeScript Map.groupBy 1`] = `
"declare global {
  interface MapConstructor {
    groupBy<K, V>(
      iterable: Iterable<V>,
      callbackFn: (value: V, index: number) => K,
    ): Map<K, V[]>;
  }
}

Map.groupBy ??= function <K, V>(
  iterable: Iterable<V>,
  callbackFn: (value: V, index: number) => K,
): Map<K, V[]> {
  const groups = new Map<K, V[]>();

  let index = 0;
  for (const value of iterable) {
    const key = callbackFn(value, index++);
    const group = groups.get(key);
    if (group == null) {
      groups.set(key, [value]);
    } else {
      group.push(value);
    }
  }

  return groups;
};"
`;

exports[`App can render goody: TypeScript Math.gcd 1`] = `
"declare global {
  interface Math {
    gcd(a: number, b: number): number;
  }
}

Math.gcd = function (a: number, b: number): number {
  a = Math.abs(a);
  b = Math.abs(b);

  while (b !== 0) {
    const temp = b;
    b = a % b;
    a = temp;
  }
  return a;
};"
`;

exports[`App can render goody: TypeScript Math.lcm 1`] = `
"import "Math.gcd";

declare global {
  interface Math {
    lcm(a: number, b: number): number;
  }
}

Math.lcm = function (a: number, b: number): number {
  if (a === 0 || b === 0) {
    return 0;
  }

  a = Math.abs(a);
  b = Math.abs(b);
  return (a / Math.gcd(a, b)) * b;
};"
`;

exports[`App can render goody: TypeScript Math.primes 1`] = `
"declare global {
  interface Math {
    primes(): Generator<number, void, void>;
  }
}

Math.primes = function* (): Generator<number, void, void> {
  yield 2;

  const oddPrimes: number[] = [];
  for (let num = 3; ; num += 2) {
    let isPrime = true;
    for (const p of oddPrimes) {
      if (p * p > num) {
        break;
      }
      if (num % p === 0) {
        isPrime = false;
        break;
      }
    }
    if (isPrime) {
      yield num;
      oddPrimes.push(num);
    }
  }
};"
`;

exports[`App can render goody: TypeScript Number.prototype.chr 1`] = `
"declare global {
  interface Number {
    chr(this: Number): string;
  }
}

Number.prototype.chr = function (this: Number): string {
  return String.fromCodePoint(Number(this));
};"
`;

exports[`App can render goody: TypeScript Number.prototype.digits 1`] = `
"declare global {
  interface Number {
    digits(this: Number): Generator<number, void, void>;
    digits(this: Number, radix: number): Generator<number, void, void>;
  }
}

Number.prototype.digits = function (
  this: Number,
  radix: number = 10,
): Generator<number, void, void> {
  let num = Number(this);
  if (!(Number.isInteger(num) && num >= 0)) {
    throw new Error("Must invoke on a non-negative integer.");
  }
  if (!(Number.isInteger(radix) && radix >= 2)) {
    throw new Error("Radix must be an integer >= 2.");
  }

  return (function* () {
    do {
      yield num % radix;
      num = Math.floor(num / radix);
    } while (num > 0);
  })();
};"
`;

exports[`App can render goody: TypeScript Object.getUnsafe 1`] = `
"declare global {
  interface ObjectConstructor {
    getUnsafe(
      obj: unknown,
      properties: readonly [string, ...string[]],
    ): unknown;
  }
}

Object.getUnsafe = function (
  obj: unknown,
  properties: readonly [string, ...string[]],
): unknown {
  let res = obj;
  for (const property of properties) {
    res = (res as Record<string, unknown>)[property];
  }
  return res;
};"
`;

exports[`App can render goody: TypeScript Object.prototype.entries 1`] = `
"import "Iterator.prototype.map";
import "Object.prototype.keys";

declare global {
  interface Object {
    entries<T extends {}>(
      this: T,
    ): Generator<{ [K in keyof T]: [K, T[K]] }[keyof T], void, void>;
  }
}

Object.prototype.entries = function <T extends {}>(
  this: T,
): Generator<{ [K in keyof T]: [K, T[K]] }[keyof T], void, void> {
  return this.keys().map((k) => [k, this[k]]);
};"
`;

exports[`App can render goody: TypeScript Object.prototype.keys 1`] = `
"declare global {
  interface Object {
    keys<T extends {}>(this: T): Generator<keyof T, void, void>;
  }
}

Object.prototype.keys = function* <T extends {}>(
  this: T,
): Generator<keyof T, void, void> {
  for (const key in this) {
    if (Object.hasOwn(this, key)) {
      yield key;
    }
  }
};"
`;

exports[`App can render goody: TypeScript Object.prototype.values 1`] = `
"import "Iterator.prototype.map";
import "Object.prototype.keys";

declare global {
  interface Object {
    values<T extends {}>(this: T): Generator<T[keyof T], void, void>;
  }
}

Object.prototype.values = function <T extends {}>(
  this: T,
): Generator<T[keyof T], void, void> {
  return this.keys().map((k) => this[k]);
};"
`;

exports[`App can render goody: TypeScript Object.setUnsafe 1`] = `
"declare global {
  interface ObjectConstructor {
    setUnsafe(
      obj: unknown,
      properties: readonly [string, ...string[]],
      value: unknown,
    ): void;
  }
}

Object.setUnsafe = function (
  obj: unknown,
  properties: readonly [string, ...string[]],
  value: unknown,
): void {
  let map = obj;
  for (let i = 0; i < properties.length - 1; ++i) {
    map = (map as Record<string, unknown>)[properties[i]] ??= {};
  }
  (map as Record<string, unknown>)[properties.at(-1)!] = value;
};"
`;

exports[`App can render goody: TypeScript String.prototype.chars 1`] = `
"declare global {
  interface String {
    chars(this: String): IterableIterator<string>;
  }
}

String.prototype.chars = String.prototype[Symbol.iterator];"
`;

exports[`App can render goody: TypeScript String.prototype.ord 1`] = `
"declare global {
  interface String {
    ord(this: String): number | undefined;
  }
}

String.prototype.ord = function (this: String): number | undefined {
  return this.codePointAt(0);
};"
`;

exports[`App can render goody: TypeScript compareNatural 1`] = `
"export function compareNatural<T>(a: T, b: T): number {
  if (
    (typeof a === "number" && typeof b === "number") ||
    (typeof a === "string" && typeof b === "string") ||
    (typeof a === "bigint" && typeof b === "bigint")
  ) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  if (Array.isArray(a) && Array.isArray(b)) {
    for (let i = 0; i < a.length && i < b.length; ++i) {
      const compareResult = compareNatural(a[i], b[i]);
      if (compareResult !== 0) {
        return compareResult;
      }
    }

    return a.length - b.length;
  }

  throw new Error("Comparing mismatched types!");
}"
`;

exports[`App can render goody: TypeScript console.meow 1`] = `
"declare global {
  interface Console {
    meow: Console["log"];
  }
}

console.meow = function () {
  console.log.call(this, "😺", ...arguments);
};"
`;

exports[`App can render goody: TypeScript invariant 1`] = `
"export function invariant(
  condition: boolean,
  errorMessage: string = "Invariant violation!",
): asserts condition {
  if (!condition) {
    throw new Error(errorMessage);
  }
}"
`;

exports[`App can render goody: TypeScript invariantViolation 1`] = `
"import "invariant";

export function invariantViolation(errorMessage?: string): never {
  invariant(false, errorMessage);
}"
`;

exports[`App can render goody: TypeScript isNonNullish 1`] = `
"export function isNonNullish<T>(value: T | null | undefined): value is T {
  return value != null;
}"
`;

exports[`App can render goody: TypeScript newArray 1`] = `
"import "nullthrows";

export function newArray(dimensions: [], fillValue?: unknown): never;
export function newArray<T>(dimensions: [number]): (T | null)[];
export function newArray<T>(dimensions: [number, number]): (T | null)[][];
export function newArray<T>(
  dimensions: [number, number, number],
): (T | null)[][][];
export function newArray<T>(
  dimensions: [number, number, number, number],
): (T | null)[][][][];
export function newArray<T>(
  dimensions: [number, number, number, number, number],
): (T | null)[][][][][];
export function newArray<T>(dimensions: [number], fillValue: T): T[];
export function newArray<T>(dimensions: [number, number], fillValue: T): T[][];
export function newArray<T>(
  dimensions: [number, number, number],
  fillValue: T,
): T[][][];
export function newArray<T>(
  dimensions: [number, number, number, number],
  fillValue: T,
): T[][][][];
export function newArray<T>(
  dimensions: [number, number, number, number, number],
  fillValue: T,
): T[][][][][];
export function newArray(dimensions: number[], fillValue?: unknown): unknown;
export function newArray(
  [first, ...rest]: number[],
  fillValue: unknown = null,
): unknown {
  const outer = Array(nullthrows(first, "Missing dimensions!"));
  if (rest.length === 0) {
    return outer.fill(fillValue);
  }
  for (let i = 0; i < first; ++i) {
    outer[i] = newArray(rest, fillValue);
  }
  return outer;
}"
`;

exports[`App can render goody: TypeScript nullthrows 1`] = `
"export function nullthrows<T>(
  value: T | null | undefined,
  errorMessage: string = "Unexpected nullish value!",
): T {
  if (value == null) {
    throw new Error(errorMessage);
  }
  return value;
}"
`;

exports[`App can render goody: TypeScript traverseInOrder 1`] = `
"export function* traverseInOrder<
  T extends { left?: T | null | undefined; right?: T | null | undefined },
>(root: T | null | undefined): Generator<T, void, void> {
  const stack: [T | null | undefined, boolean][] = [[root, false]];

  do {
    const [node, didTraverseLeftChild] = stack.pop()!;
    if (node == null) {
      continue;
    }

    if (didTraverseLeftChild) {
      yield node;
      continue;
    }

    stack.push([node.right, false], [node, true], [node.left, false]);
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: TypeScript traverseLevelOrder 1`] = `
"import "isNonNullish";

export function* traverseLevelOrder<
  T extends { left?: T | null | undefined; right?: T | null | undefined },
>(root: T | null | undefined): Generator<T[], void, void> {
  if (root == null) {
    return;
  }

  let level = [root];
  do {
    yield level;

    level = level
      .flatMap((node) => [node.left, node.right])
      .filter(isNonNullish);
  } while (level.length > 0);
}"
`;

exports[`App can render goody: TypeScript traversePostOrder 1`] = `
"export function* traversePostOrder<
  T extends { left?: T | null | undefined; right?: T | null | undefined },
>(root: T | null | undefined): Generator<T, void, void> {
  const stack: [T | null | undefined, boolean][] = [[root, false]];

  do {
    const [node, didTraverseChildren] = stack.pop()!;
    if (node == null) {
      continue;
    }

    if (didTraverseChildren) {
      yield node;
      continue;
    }

    stack.push([node, true], [node.right, false], [node.left, false]);
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: TypeScript traversePostOrderNAry 1`] = `
"export function* traversePostOrderNAry<T extends { children: T[] }>(
  root: T | null | undefined,
): Generator<T, void, void> {
  const stack: [T | null | undefined, boolean][] = [[root, false]];

  do {
    const [node, didTraverseChildren] = stack.pop()!;
    if (node == null) {
      continue;
    }

    if (didTraverseChildren) {
      yield node;
      continue;
    }

    stack.push([node, true]);
    // TODO: add an Array.prototype.valuesReversed() goody and use it here
    for (let i = node.children.length - 1; i >= 0; --i) {
      stack.push([node.children[i], false]);
    }
  } while (stack.length > 0);
}"
`;

exports[`App can render goody: TypeScript traversePreOrder 1`] = `
"export function* traversePreOrder<
  T extends { left?: T | null | undefined; right?: T | null | undefined },
>(root: T | null | undefined): Generator<T, void, void> {
  const stack = [root];

  do {
    const node = stack.pop();

    if (node != null) {
      yield node;
      stack.push(node.right, node.left);
    }
  } while (stack.length > 0);
}"
`;
