// THIS FILE IS GENERATED! DO NOT MODIFY IT MANUALLY!!
// Instead, update the generation process or inputs and run `yarn codegen`.

import { z } from "zod";

import { getGraphQLClient } from "../../getGraphQLClient.ts";
import type {
  ActiveDailyCodingChallengeQuestionQuery as OriginalQueryResult,
  ActiveDailyCodingChallengeQuestionQueryVariables as OriginalQueryVariables,
} from "./queryTypes.generated.ts";

export const QUERY =
  "query{activeDailyCodingChallengeQuestion{date question{difficulty questionFrontendId title titleSlug}}}";

export const queryResultZodType = z.object({
  activeDailyCodingChallengeQuestion: z.object({
    date: z.string(),
    question: z.object({
      difficulty: z.string(),
      questionFrontendId: z.string(),
      title: z.string(),
      titleSlug: z.string(),
    }),
  }),
});

export type QueryResult = z.infer<typeof queryResultZodType>;
export type QueryVariables = OriginalQueryVariables;

export async function fetchGraphQL(): Promise<QueryResult> {
  const untrustedData = await getGraphQLClient().request(QUERY);

  // The type annotation serves as a TypeScript assert that the generated
  // Zod type is compatible with the types generated by GraphQL Codegen.
  const validatedData: OriginalQueryResult =
    queryResultZodType.parse(untrustedData);

  return validatedData;
}
