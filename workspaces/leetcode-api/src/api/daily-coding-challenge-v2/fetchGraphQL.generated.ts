// THIS FILE IS GENERATED! DO NOT MODIFY IT MANUALLY!!
// Instead, update the generation process or inputs and run `yarn codegen`.

import { z } from "zod";

import { getGraphQLClient } from "../../getGraphQLClient.ts";
import type * as Types from "../../graphqlTypes.generated.ts";
import { yyyymmddDateZodType } from "../../zod-types/yyyymmddDateZodType.ts";
import { slugZodType } from "../../zod-types/slugZodType.ts";

type DailyCodingChallengeV2QueryVariables = Types.Exact<{
  month: Types.Scalars["Int"]["input"];
  year: Types.Scalars["Int"]["input"];
}>;

type DailyCodingChallengeV2Query = {
  dailyCodingChallengeV2?: {
    challenges: Array<{
      date: string;
      question: {
        difficulty: string;
        questionFrontendId: string;
        title: string;
        titleSlug: string;
      };
    }>;
    weeklyChallenges: Array<{
      date: string;
      question: {
        difficulty: string;
        questionFrontendId: string;
        title: string;
        titleSlug: string;
      };
    }>;
  } | null;
};

export const QUERY =
  "query($month:Int!,$year:Int!){dailyCodingChallengeV2(month:$month,year:$year){challenges{date question{difficulty questionFrontendId title titleSlug}}weeklyChallenges{date question{difficulty questionFrontendId title titleSlug}}}}";

export const queryResultZodType = z.object({
  dailyCodingChallengeV2: z
    .object({
      challenges: z.array(
        z.object({
          date: yyyymmddDateZodType,
          question: z.object({
            difficulty: z.enum(["Easy", "Medium", "Hard"]),
            questionFrontendId: z.string(),
            title: z.string().trim(),
            titleSlug: slugZodType,
          }),
        }),
      ),
      weeklyChallenges: z.array(
        z.object({
          date: yyyymmddDateZodType,
          question: z.object({
            difficulty: z.enum(["Easy", "Medium", "Hard"]),
            questionFrontendId: z.string(),
            title: z.string().trim(),
            titleSlug: slugZodType,
          }),
        }),
      ),
    })
    .nullable()
    .optional(),
});

export type QueryResult = z.infer<typeof queryResultZodType>;
export type QueryVariables = DailyCodingChallengeV2QueryVariables;

export async function fetchGraphQL(
  variables: QueryVariables,
): Promise<QueryResult> {
  const untrustedData = await getGraphQLClient().request(QUERY, variables);

  // The type annotation serves as a TypeScript assert that the generated
  // Zod type is compatible with the types generated by GraphQL Codegen.
  const validatedData: DailyCodingChallengeV2Query & QueryResult =
    queryResultZodType.parse(untrustedData);

  return validatedData;
}
