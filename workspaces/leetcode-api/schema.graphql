"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `Decimal` scalar type represents a python Decimal.
"""
scalar Decimal

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31 - 1) and 2^31 - 1 since represented in JSON as double-precision floating point numbers specifiedby [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Int

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
An enum describing what kind of type a given `__Type` is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
An enumeration.
"""
enum AccessDeniedReasonEnum {
  """
  no such list
  """
  NO_SUCH_LIST

  """
  list is private
  """
  LIST_IS_PRIVATE

  """
  company list not available
  """
  COMPANY_LIST_NOT_AVAILABLE
}

"""
An enumeration.
"""
enum AccountFrozenStatus {
  """
  qualified to frozen
  """
  QUALIFIED_TO_FROZEN

  """
  not qualified to frozen
  """
  NOT_QUALIFIED_TO_FROZEN

  """
  already frozen
  """
  ALREADY_FROZEN

  """
  inactive
  """
  INACTIVE
}

"""
An enumeration.
"""
enum AccountStatus {
  """
  frozen
  """
  FROZEN

  """
  deleted
  """
  DELETED
}

"""
advertisement location enums
"""
enum AdLocationEnum {
  """
  Home Ad
  """
  HOME_AD

  """
  Problemset Ad Sidebar
  """
  PROBLEMSET_AD

  """
  Problemset Ad Primary
  """
  PROBLEMSET_AD_PRIMARY

  """
  Problemset Ad Secondary
  """
  PROBLEMSET_AD_SECONDARY

  """
  Discuss Ad
  """
  DISCUSS_AD

  """
  Study Plan Ad
  """
  STUDY_PLAN_AD

  """
  home feed
  """
  HOME_FEED

  """
  discuss list
  """
  DISCUSS_LIST

  """
  discuss detail
  """
  DISCUSS_DETAIL

  """
  qd description
  """
  QD_DESCRIPTION

  """
  qd solution list
  """
  QD_SOLUTION_LIST

  """
  qd solution detail
  """
  QD_SOLUTION_DETAIL
}

"""
advertisement source enums
"""
enum AdSourceEnum {
  """
  Internal Ad
  """
  INTERNAL_AD

  """
  AdSense
  """
  ADSENSE
}

"""
An enumeration.
"""
enum AllPermission {
  contest_see_private
  contest_private_access_dashboard
  contest_see_private_ranking
  contest_see_private_without_registration
  contest_see_all
  common_change_tag
  authentication_ignore_beta_user_flow
  authentication_see_user_id
  authentication_see_user_email
  authentication_update_school_info
  authentication_see_user_management
  authentication_query_archived_users
  authentication_query_user_info
  authentication_mutate_user_management
  authentication_mutate_archive_user
  authentication_mock_user
  authentication_account_recovery
  authentication_mutate_team_member
  authentication_query_team_member
  authentication_mutate_ip_management
  authentication_query_ip_management
  score_see_admin_panel
  score_mutate_give_leetcoin
  library_see_all_problems
  library_see_all_fields
  library_change_question
  library_change_question_category
  library_content_editor
  library_content_access
  contribution_see_dashboard
  contribution_accept_reject
  debugger_beta_access
  discuss_pin_topic
  discuss_see_unpublished_post
  discuss_review_post
  discuss_change_post
  discuss_delete_post
  discuss_hide_post
  discuss_see_hidden_post
  discuss_pin_contest_topic
  discuss_see_contest_unpublished_post
  discuss_review_contest_post
  discuss_change_contest_post
  discuss_delete_contest_post
  discuss_get_all_posts
  discuss_mark_spammer
  email_batch
  email_batch_send_custom
  email_batch_create_event
  manage
  manage_blacklisted_words
  manage_discuss
  manage_tag_groups
  manage_tag_categories
  manage_tags
  manage_official_solution_feedback
  manage_company_tags
  manage_company_questions
  submission_see_details
  submission_access_diff_tool
  danger_zone_view_admin
  problemset_use_test_mode
  problemset_view_draft_category
}

enum AvatarStatusEnum {
  ALL
  VIEWED
  UNVIEWED
}

"""
An enumeration.
"""
enum BadgeBadge {
  """
  Guardian
  """
  A_1

  """
  Knight
  """
  A_2

  """
  Daily Coding Challenge
  """
  A_3

  """
  Annual Daily Coding Challenge
  """
  A_4

  """
  Study Plan Award
  """
  A_5

  """
  Annual Badge
  """
  A_6

  """
  Study Plan V2 Award
  """
  A_7
}

enum BadgeCategoryEnum {
  COMPETITION
  DCC
  ANNUAL
  STUDY_PLAN
}

"""
An enumeration.
"""
enum Category {
  BASIC
  EDGE
  PERFORMANCE
}

"""
challenge question status enums
"""
enum ChallengeQuestionStatusEnum {
  """
  not started
  """
  NOT_STARTED

  """
  finished
  """
  FINISHED
}

enum ChallengeQuestionTypeEnum {
  DAILY
  WEEKLY
}

"""
An enumeration.
"""
enum CommentSortingOption {
  hot
  best
  oldest_to_newest
  newest_to_oldest
  most_votes
  most_relevant
}

enum CompanyQuestionKeywordType {
  NAME
  ID
}

"""
An enumeration.
"""
enum CompanyQuestionTimeOptionEnum {
  """
  Six Month
  """
  SIX_MONTH

  """
  One Year
  """
  ONE_YEAR

  """
  Two Year
  """
  TWO_YEAR

  """
  All
  """
  ALL
}

"""
An enumeration.
"""
enum CompanyQuestionTimeOptionEnumV2 {
  """
  Recent 30 days
  """
  THIRTY_DAY

  """
  Recent 3 months
  """
  THREE_MONTH

  """
  Recent 6 months
  """
  SIX_MONTH

  """
  More than 6 months
  """
  MORE_THAN_SIX_MONTH

  """
  All
  """
  ALL
}

"""
An enumeration.
"""
enum CompanyStage {
  ONLINE_ASSESSMENT
  PHONE_INTERVIEW
  ONSITE_INTERVIEW
}

"""
An enumeration.
"""
enum ComplexityTypeEnum {
  """
  time_complexity
  """
  TIME_COMPLEXITY

  """
  memory_complexity
  """
  MEMORY_COMPLEXITY
}

"""
An enumeration.
"""
enum ComplexityVoteEnum {
  """
  Thumbs Down
  """
  THUMBS_DOWN

  """
  Upvote
  """
  UPVOTE
}

"""
An enumeration.
"""
enum ContestReportStatus {
  """
  UNPROCESSED
  """
  A_0

  """
  CANCELED
  """
  A_1

  """
  ACCEPTED
  """
  A_2
}

"""
An enumeration.
"""
enum ContestRootBannerAspectRatioType {
  """
  SM Breakpoint Image
  """
  A_0

  """
  MD Breakpoint Image
  """
  A_1

  """
  LG Breakpoint Image
  """
  A_2
}

"""
An enumeration.
"""
enum CreditCardStatus {
  """
  alive
  """
  ALIVE

  """
  deleted
  """
  DELETED
}

"""
An enumeration.
"""
enum DeleteAccountReason {
  """
  Moving to another LeetCode account
  """
  EXTRA_ACCOUNT

  """
  Not using LeetCode anymore
  """
  NO_LONGER_NEEDED

  """
  Security and privacy concerns
  """
  SECURITY_CONCERN

  """
  Want to start over with a new account
  """
  START_OVER

  """
  Other
  """
  OTHER
}

"""
An enumeration.
"""
enum DifficultyDescribedEnum {
  """
  Easy
  """
  EASY

  """
  Medium
  """
  MEDIUM

  """
  Hard
  """
  HARD
}

enum DifficultyEnum {
  EASY
  MEDIUM
  HARD
}

"""
An enumeration.
"""
enum DiscountEventBannerAspectRatioType {
  """
  SM Breakpoint Image
  """
  A_0

  """
  MD Breakpoint Image
  """
  A_1

  """
  LG Breakpoint Image
  """
  A_2
}

"""
An enumeration.
"""
enum EntityType {
  DUMMY
}

"""
An enumeration.
"""
enum FavoriteFavoriteType {
  """
  normal
  """
  A_1

  """
  company favorite
  """
  A_2

  """
  smart list
  """
  A_3
}

"""
An enumeration.
"""
enum FavoriteLockStatusEnum {
  """
  user can unlock
  """
  USER_CAN_UNLOCK

  """
  user cannot unlock
  """
  USER_CANNOT_UNLOCK

  """
  user already unlocked
  """
  USER_ALREADY_UNLOCKED

  """
  no need to unlock
  """
  NO_NEED_TO_UNLOCK
}

"""
An enumeration.
"""
enum FavoriteQuestionStatusEnum {
  """
  to do
  """
  TO_DO

  """
  solved
  """
  SOLVED

  """
  attempted
  """
  ATTEMPTED
}

"""
An enumeration.
"""
enum FavoriteTypeEnum {
  """
  normal
  """
  NORMAL

  """
  company favorite
  """
  COMPANY_FAVORITE

  """
  smart list
  """
  SMART_LIST
}

"""
An enumeration.
"""
enum FeatureGuideType {
  OTHER
  QUESTION_DETAIL_TOUR
  CODE_AUTOCOMPLETE_TOUR
  QUESTION_DETAIL_TOUR_WITH_AUTOCOMPLETE
  NEW_QD_DETAIL_TOUR
  NEW_IDE_DYNAMIC_LAYOUT
  NEW_IDE_DYNAMIC_LAYOUT_V2
}

"""
An enumeration.
"""
enum FeedbackOrderByEnum {
  """
  creation_date
  """
  CREATION_DATE

  """
  rate
  """
  RATE
}

enum FlaggedObjectListOrderByEnum {
  FIRST_FLAGGED_TIME
  FLAGGED_COUNT
}

"""
An enumeration.
"""
enum FlagResultStatus {
  """
  flagged
  """
  A_0

  """
  approved
  """
  A_1

  """
  edit requested
  """
  A_2

  """
  removed
  """
  A_3
}

"""
An enumeration.
"""
enum FlagStatus {
  """
  flagged
  """
  FLAGGED

  """
  approved
  """
  APPROVED

  """
  edit requested
  """
  EDIT_REQUESTED

  """
  removed
  """
  REMOVED
}

"""
An enumeration.
"""
enum Group {
  everyone
  discuss_admin
  contest_discuss_admin
  library_admin
  internal_contest_organizer
  internal_contest_participant
}

enum InterviewAnalysisStatus {
  SKIPPED
  PROCESSING
  COMPLETED
  DELAYED
  NEEDS_DATA
}

"""
An enumeration.
"""
enum IPStatusEnum {
  """
  Banned
  """
  Banned

  """
  Monitored
  """
  Monitored

  """
  Normal
  """
  Normal
}

"""
An enumeration.
"""
enum ManagementRoleEnum {
  """
  Admin
  """
  ADMIN

  """
  Support
  """
  CUSTOMER_SUPPORT

  """
  Moderator
  """
  MODERATORS

  """
  Email
  """
  EMAIL_BATCH_SENDER

  """
  Redeem
  """
  REDEEM_ORDER_MANAGEMENT

  """
  Contest
  """
  INTERNAL_CONTEST_ORGANIZER

  """
  Content
  """
  CONTENT_OPERATION
}

"""
An enumeration.
"""
enum OMFavoriteSearchFieldEnum {
  """
  name
  """
  NAME

  """
  id
  """
  ID

  """
  slug
  """
  SLUG

  """
  author
  """
  AUTHOR
}

"""
An enumeration.
"""
enum OMFavoriteSortFieldEnum {
  """
  default
  """
  DEFAULT

  """
  view_count
  """
  VIEW_COUNT

  """
  save_count
  """
  SAVE_COUNT

  """
  fork_count
  """
  FORK_COUNT
}

"""
An enumeration.
"""
enum PanelQuestionStatusEnum {
  """
  to do
  """
  TO_DO

  """
  solved
  """
  SOLVED

  """
  attempted
  """
  ATTEMPTED
}

enum PasswordErrorEnum {
  INCORRECT_PASSWORD
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_LONG
  MISSING_ALPHA_OR_NUMERIC
  PASSWORD_TOO_COMMON
}

"""
An enumeration.
"""
enum PaymentGateways {
  STRIPE
  PAYPAL
  LEETPAY
}

"""
An enumeration.
"""
enum PlanQuestionStatusEnum {
  """
  to do
  """
  TO_DO

  """
  solved
  """
  SOLVED

  """
  past solved
  """
  PAST_SOLVED

  """
  attempted
  """
  ATTEMPTED
}

"""
An enumeration.
"""
enum PlanUserProgressStatusEnum {
  """
  on going
  """
  ON_GOING

  """
  completed
  """
  COMPLETED

  """
  quitted
  """
  QUITTED

  """
  deleted
  """
  DELETED
}

"""
An enumeration.
"""
enum PlanUserProgressTypeEnum {
  """
  on going
  """
  ON_GOING

  """
  history
  """
  HISTORY
}

"""
An enumeration.
"""
enum PlaygroundCodeLang {
  """
  cpp
  """
  A_0

  """
  java
  """
  A_1

  """
  python
  """
  A_2

  """
  python3
  """
  A_11

  """
  mysql
  """
  A_3

  """
  mssql
  """
  A_14

  """
  oraclesql
  """
  A_15

  """
  c
  """
  A_4

  """
  csharp
  """
  A_5

  """
  javascript
  """
  A_6

  """
  typescript
  """
  A_20

  """
  bash
  """
  A_8

  """
  php
  """
  A_19

  """
  swift
  """
  A_9

  """
  kotlin
  """
  A_13

  """
  dart
  """
  A_24

  """
  golang
  """
  A_10

  """
  ruby
  """
  A_7

  """
  scala
  """
  A_12

  """
  html
  """
  A_16

  """
  pythonml
  """
  A_17

  """
  rust
  """
  A_18

  """
  racket
  """
  A_21

  """
  erlang
  """
  A_22

  """
  elixir
  """
  A_23

  """
  pythondata
  """
  A_25

  """
  react
  """
  A_26

  """
  vanillajs
  """
  A_27

  """
  postgresql
  """
  A_28

  """
  cangjie
  """
  A_29
}

"""
An enumeration.
"""
enum PlaygroundSelectedLang {
  """
  cpp
  """
  A_0

  """
  java
  """
  A_1

  """
  python
  """
  A_2

  """
  python3
  """
  A_11

  """
  mysql
  """
  A_3

  """
  mssql
  """
  A_14

  """
  oraclesql
  """
  A_15

  """
  c
  """
  A_4

  """
  csharp
  """
  A_5

  """
  javascript
  """
  A_6

  """
  typescript
  """
  A_20

  """
  bash
  """
  A_8

  """
  php
  """
  A_19

  """
  swift
  """
  A_9

  """
  kotlin
  """
  A_13

  """
  dart
  """
  A_24

  """
  golang
  """
  A_10

  """
  ruby
  """
  A_7

  """
  scala
  """
  A_12

  """
  html
  """
  A_16

  """
  pythonml
  """
  A_17

  """
  rust
  """
  A_18

  """
  racket
  """
  A_21

  """
  erlang
  """
  A_22

  """
  elixir
  """
  A_23

  """
  pythondata
  """
  A_25

  """
  react
  """
  A_26

  """
  vanillajs
  """
  A_27

  """
  postgresql
  """
  A_28

  """
  cangjie
  """
  A_29
}

"""
An enumeration.
"""
enum PlaygroundSnippetsLang {
  """
  cpp
  """
  A_0

  """
  java
  """
  A_1

  """
  python
  """
  A_2

  """
  python3
  """
  A_11

  """
  mysql
  """
  A_3

  """
  mssql
  """
  A_14

  """
  oraclesql
  """
  A_15

  """
  c
  """
  A_4

  """
  csharp
  """
  A_5

  """
  javascript
  """
  A_6

  """
  typescript
  """
  A_20

  """
  bash
  """
  A_8

  """
  php
  """
  A_19

  """
  swift
  """
  A_9

  """
  kotlin
  """
  A_13

  """
  dart
  """
  A_24

  """
  golang
  """
  A_10

  """
  ruby
  """
  A_7

  """
  scala
  """
  A_12

  """
  html
  """
  A_16

  """
  pythonml
  """
  A_17

  """
  rust
  """
  A_18

  """
  racket
  """
  A_21

  """
  erlang
  """
  A_22

  """
  elixir
  """
  A_23

  """
  pythondata
  """
  A_25

  """
  react
  """
  A_26

  """
  vanillajs
  """
  A_27

  """
  postgresql
  """
  A_28

  """
  cangjie
  """
  A_29
}

"""
An enumeration.
"""
enum PlaygroundTemplateCodeLang {
  """
  cpp
  """
  A_0

  """
  java
  """
  A_1

  """
  python
  """
  A_2

  """
  python3
  """
  A_11

  """
  mysql
  """
  A_3

  """
  mssql
  """
  A_14

  """
  oraclesql
  """
  A_15

  """
  c
  """
  A_4

  """
  csharp
  """
  A_5

  """
  javascript
  """
  A_6

  """
  typescript
  """
  A_20

  """
  bash
  """
  A_8

  """
  php
  """
  A_19

  """
  swift
  """
  A_9

  """
  kotlin
  """
  A_13

  """
  dart
  """
  A_24

  """
  golang
  """
  A_10

  """
  ruby
  """
  A_7

  """
  scala
  """
  A_12

  """
  html
  """
  A_16

  """
  pythonml
  """
  A_17

  """
  rust
  """
  A_18

  """
  racket
  """
  A_21

  """
  erlang
  """
  A_22

  """
  elixir
  """
  A_23

  """
  pythondata
  """
  A_25

  """
  react
  """
  A_26

  """
  vanillajs
  """
  A_27

  """
  postgresql
  """
  A_28

  """
  cangjie
  """
  A_29
}

"""
An enumeration.
"""
enum PostStatus {
  PENDING
  OPEN
  REVIEWED
  DELETED
  NEED_UPDATE
  HIDDEN
  ALL
}

"""
An enumeration.
"""
enum PremiumBetaFeatureType {
  """
  Beta User Flow
  """
  A_1

  """
  New Problemlist Page
  """
  A_2

  """
  New Profile Page
  """
  A_3

  """
  New Problem Detail Page
  """
  A_4

  """
  New Study Plan Access
  """
  A_5

  """
  Ai Helper
  """
  A_6

  """
  New Subscribe Page
  """
  A_7

  """
  New Plan Rank Board Access
  """
  A_8

  """
  Lc Ide
  """
  A_9

  """
  Lc Ide V2
  """
  A_10

  """
  Frontend Category
  """
  A_11

  """
  New Stripe Invoice
  """
  A_12

  """
  Contest Dl
  """
  A_13
}

"""
An enumeration.
"""
enum PremiumTrialApplyStatus {
  """
  Pending
  """
  PENDING

  """
  Approved
  """
  APPROVED

  """
  Rejected
  """
  REJECTED
}

"""
enum value means trial days
"""
enum PremiumTrialSku {
  """
  Monthly Premium Subscription
  """
  MONTHLY

  """
  Annual Premium Subscription
  """
  ANNUAL
}

enum ProfileUpdateErrorEnum {
  INVALID_GITHUB_URL
  INVALID_LINKEDIN_URL
  INVALID_WEBSITE
  INVALID_SKILL_TAGS
  INVALID_REAL_NAME
  INVALID_BIRTHDAY
  INVALID_ABOUT_ME
  INVALID_LOCATION
  INVALID_COMPANY
  INVALID_SCHOOL
  INVALID_JOB_TITLE
}

enum ProgressOrderByEnum {
  FRONTEND_ID
  DIFFICULTY
  LAST_SOLVED
  WRONG_ATTEMPTS
  TOTAL_SOLVES
}

"""
An enumeration.
"""
enum ProgressStatus {
  UNATTEMPTED
  ATTEMPTED
  ACCEPTED
}

enum PublishStatus {
  UNPUBLISHED
  PUBLISHED
  UNKNOWN
}

"""
An enumeration.
"""
enum QuestionEditorTypeEnum {
  """
  CKEditor
  """
  CKEDITOR

  """
  Markdown
  """
  MARKDOWN
}

enum QuestionOrderByEnum {
  FRONTEND_ID
  SOLUTION_NUM
  AC_RATE
  FREQUENCY
  DIFFICULTY
}

enum QuestionSortFieldEnum {
  LAST_CREATE
  LAST_MODIFIED
}

"""
An enumeration.
"""
enum ReportedStatus {
  ALL
  REPORTED_UNHANDLED
  REPORTED_HANDLED
}

enum ReportTypeEnum {
  ADVERTISING
  SEXUAL
  VIOLENT
  TERRORISM
  POLITICS
  FAKE
  ILLEGAL
  ABUSE
  NON_ENGLISH
  OTHER
  ALL
}

enum ResourceTypeEnum {
  DUMMY
}

"""
An enumeration.
"""
enum ScoreCategory {
  """
  ADD_QUESTION
  """
  A_0

  """
  ADD_TESTCASE
  """
  A_1

  """
  TOP_IN_CONTEST
  """
  A_2

  """
  JOIN_CONTEST
  """
  A_3

  """
  JOIN_CONTEST_FIRST_TIME
  """
  A_17

  """
  SOCIAL_ACCOUNT_BINDING
  """
  A_4

  """
  DAILY_LOGIN
  """
  A_5

  """
  SEVEN_DAY_LOGIN
  """
  A_6

  """
  THIRTY_DAY_LOGIN
  """
  A_7

  """
  CREATE_QUESTION_TRANSLATION
  """
  A_9

  """
  QUESTION_TRANSLATION_ACCEPTED
  """
  A_10

  """
  REDEEM
  """
  A_8

  """
  ACCOUNT_TRANSFER
  """
  A_11

  """
  BASIC_INFO_PROVIDED
  """
  A_12

  """
  AVATAR_PROVIDED
  """
  A_13

  """
  EXPERIENCE_PROVIDED
  """
  A_14

  """
  PHONE_BINDING
  """
  A_15

  """
  POST_TOPIC
  """
  A_16

  """
  EMAIL_CONFIRMED
  """
  A_18

  """
  JOIN_INTERNAL_CONTEST
  """
  A_19

  """
  FESTIVAL
  """
  A_20

  """
  SURVEY_COMPLETED
  """
  A_21

  """
  JOIN_BOTH_CONTESTS_SAME_WEEK
  """
  A_22

  """
  THIRTY_DAY_CHALLENGE_DAILY_COMPLETE
  """
  A_23

  """
  THIRTY_DAY_CHALLENGE_25_COMPLETE
  """
  A_24

  """
  THIRTY_DAY_CHALLENGE_30_COMPLETE
  """
  A_25

  """
  LEETCODING_CHALLENGE_DAILY
  """
  A_30

  """
  LEETCODING_CHALLENGE_MID
  """
  A_31

  """
  LEETCODING_CHALLENGE_ALL
  """
  A_32

  """
  LEETCODING_CHALLENGE_PREM
  """
  A_33

  """
  EXPLORE_CARD_COMPLETED
  """
  A_26

  """
  DISCUSS_FIRST_POST
  """
  A_27

  """
  CONTEST_REPORT_APPROVED
  """
  A_28

  """
  DAILY_SUBMIT_ACCEPTED_SOLUTIONS
  """
  A_29

  """
  CONTEST_EASTER_EGG
  """
  A_34

  """
  CUSTOM
  """
  A_100

  """
  QUESTION_DETAIL_SATISFACTION_SURVEY
  """
  A_35

  """
  JAVASCRIPT_PROBLEM_SURVEY
  """
  A_37

  """
  PANDAS_PROBLEM_SURVEY
  """
  A_38

  """
  QD_DYNAMIC_SURVEY
  """
  A_39

  """
  PANDAS_INTRO_STUDY_PLAN_SURVEY
  """
  A_40

  """
  IDE_BACK_QD3_SURVEY
  """
  A_41

  """
  NEW_STUDY_PLAN_SURVEY
  """
  A_36

  """
  CONTEST_DYNAMIC_SURVEY
  """
  A_42
}

"""
An enumeration.
"""
enum ScoreTypeEnum {
  """
  All
  """
  ALL

  """
  Mission Reward
  """
  MISSION_REWARD

  """
  Admin Reward
  """
  ADMIN_REWARD
}

"""
An enumeration.
"""
enum SearchDimensionType {
  """
  all
  """
  ALL

  """
  user_name
  """
  USER_NAME

  """
  user_id
  """
  USER_ID

  """
  email
  """
  EMAIL

  """
  stripe_id
  """
  STRIPE_ID

  """
  previous email
  """
  PREVIOUS_EMAIL

  """
  previous username
  """
  PREVIOUS_USERNAME
}

enum SearchMetaContentType {
  TITLE
  BODY
  COMMENT
  REPLY
}

"""
An enumeration.
"""
enum SearchUserType {
  """
  user_name
  """
  USER_NAME

  """
  user_id
  """
  USER_ID
}

"""
An enumeration.
"""
enum SessionStatus {
  STARTED
  EXITED
  TIMEOUT
  ACCEPTED
}

"""
An enumeration.
"""
enum SortingEnum {
  """
  ascending
  """
  ASCENDING

  """
  descending
  """
  DESCENDING
}

enum SortingOrderEnum {
  ASCENDING
  DESCENDING
}

"""
An enumeration.
"""
enum StripeChargeStatusEnum {
  """
  All
  """
  ALL

  """
  NoPaid
  """
  NO_PAID

  """
  Paid
  """
  PAID

  """
  Disputed
  """
  DISPUTED

  """
  Refunded
  """
  REFUNDED
}

"""
An enumeration.
"""
enum SubmissionFlagTypeEnum {
  """
  white, not marked
  """
  WHITE

  """
  blue
  """
  BLUE

  """
  orange
  """
  ORANGE

  """
  green
  """
  GREEN

  """
  purple
  """
  PURPLE

  """
  red
  """
  RED
}

"""
An enumeration.
"""
enum SubmissionMemoryComplexity {
  """
  O(1)
  """
  A_1

  """
  O(log n)
  """
  A_2

  """
  O(n)
  """
  A_3

  """
  O(n log n)
  """
  A_4

  """
  O(n²)
  """
  A_5

  """
  O(n³)
  """
  A_6

  """
  O(n⁴)
  """
  A_7

  """
  O(n⁵)
  """
  A_8

  """
  O(n⁶)
  """
  A_9

  """
  O(2ⁿ)
  """
  A_10

  """
  O(n!)
  """
  A_11
}

"""
An enumeration.
"""
enum SubmissionStatusEnum {
  """
  Accepted
  """
  AC

  """
  Wrong Answer
  """
  WA

  """
  Memory Limit Exceeded
  """
  MLE

  """
  Output Limit Exceeded
  """
  OLE

  """
  Time Limit Exceeded
  """
  TLE

  """
  Runtime Error
  """
  RE

  """
  Internal Error
  """
  IE

  """
  Compile Error
  """
  CE

  """
  Timeout
  """
  TO
}

"""
An enumeration.
"""
enum SubmissionTimeComplexity {
  """
  O(1)
  """
  A_1

  """
  O(log n)
  """
  A_2

  """
  O(n)
  """
  A_3

  """
  O(n log n)
  """
  A_4

  """
  O(n²)
  """
  A_5

  """
  O(n³)
  """
  A_6

  """
  O(n⁴)
  """
  A_7

  """
  O(n⁵)
  """
  A_8

  """
  O(n⁶)
  """
  A_9

  """
  O(2ⁿ)
  """
  A_10

  """
  O(n!)
  """
  A_11
}

"""
An enumeration.
"""
enum SurveyQuestionQuestionType {
  """
  Yes/No
  """
  A_0

  """
  Radio
  """
  A_1

  """
  Written Response
  """
  A_2

  """
  Numeric Response
  """
  A_3

  """
  Checkbox
  """
  A_4
}

"""
An enumeration.
"""
enum SurveyType {
  MOCK_INTERVIEW
}

"""
An enumeration.
"""
enum TagAdminOperationType {
  """
  Create
  """
  CREATE

  """
  Map
  """
  MAP

  """
  Edit
  """
  EDIT

  """
  Enable
  """
  ENABLED

  """
  Not Disable
  """
  NOT_ENABLED

  """
  Selectable
  """
  SELECTABLE

  """
  Not Selectable
  """
  NOT_SELECTABLE

  """
  Standard
  """
  STANDARD

  """
  Not Standard
  """
  NOT_STANDARD
}

enum TagTypeEnum {
  COMPANY
  TOPIC
  SKILL
}

"""
An enumeration.
"""
enum TopicSortingOption {
  hot
  oldest_to_newest
  recent_activity
  newest_to_oldest
  most_votes
  most_posts
  most_relevant
}

"""
An enumeration.
"""
enum TopicTagTagType {
  """
  Company
  """
  A_0
}

enum TrendingDirectionEnum {
  UP
  DOWN
  NONE
}

"""
An enumeration.
"""
enum Type {
  BETA_USER_FLOW
  NEW_PROBLEMLIST_PAGE
  NEW_PROFILE_PAGE
  NEW_PROBLEM_DETAIL_PAGE
  NEW_STUDY_PLAN_ACCESS
  AI_HELPER
  NEW_SUBSCRIBE_PAGE
  NEW_PLAN_RANK_BOARD_ACCESS
  LC_IDE
  LC_IDE_V2
  FRONTEND_CATEGORY
  NEW_STRIPE_INVOICE
  CONTEST_DL
}

"""
An enumeration.
"""
enum UmScoreCategoryEnum {
  ADD_QUESTION
  ADD_TESTCASE
  TOP_IN_CONTEST
  JOIN_CONTEST
  JOIN_CONTEST_FIRST_TIME
  SOCIAL_ACCOUNT_BINDING
  DAILY_LOGIN
  SEVEN_DAY_LOGIN
  THIRTY_DAY_LOGIN
  CREATE_QUESTION_TRANSLATION
  QUESTION_TRANSLATION_ACCEPTED
  REDEEM
  ACCOUNT_TRANSFER
  BASIC_INFO_PROVIDED
  AVATAR_PROVIDED
  EXPERIENCE_PROVIDED
  PHONE_BINDING
  POST_TOPIC
  EMAIL_CONFIRMED
  JOIN_INTERNAL_CONTEST
  FESTIVAL
  SURVEY_COMPLETED
  JOIN_BOTH_CONTESTS_SAME_WEEK
  THIRTY_DAY_CHALLENGE_DAILY_COMPLETE
  THIRTY_DAY_CHALLENGE_25_COMPLETE
  THIRTY_DAY_CHALLENGE_30_COMPLETE
  LEETCODING_CHALLENGE_DAILY
  LEETCODING_CHALLENGE_MID
  LEETCODING_CHALLENGE_ALL
  LEETCODING_CHALLENGE_PREM
  EXPLORE_CARD_COMPLETED
  DISCUSS_FIRST_POST
  CONTEST_REPORT_APPROVED
  DAILY_SUBMIT_ACCEPTED_SOLUTIONS
  CONTEST_EASTER_EGG
  CUSTOM
  QUESTION_DETAIL_SATISFACTION_SURVEY
  JAVASCRIPT_PROBLEM_SURVEY
  PANDAS_PROBLEM_SURVEY
  QD_DYNAMIC_SURVEY
  PANDAS_INTRO_STUDY_PLAN_SURVEY
  IDE_BACK_QD3_SURVEY
  NEW_STUDY_PLAN_SURVEY
  CONTEST_DYNAMIC_SURVEY
}

"""
An enumeration.
"""
enum UmStoreOrderStatusEnum {
  Canceled
  Processing
  Shipped
}

"""
An enumeration.
"""
enum UPCResponseType {
  BASIC_INFO
  DESIRED_JOB
  INTERVIEW_PREP_TIME
}

"""
An enumeration.
"""
enum UpcV2CodingLevelEnum {
  """
  BEGINNER
  """
  BEGINNER

  """
  INTERMEDIATE
  """
  INTERMEDIATE

  """
  ADVANCED
  """
  ADVANCED

  """
  EXPERT
  """
  EXPERT
}

"""
An enumeration.
"""
enum UpcV2PurposeEnum {
  """
  INTERVIEW
  """
  INTERVIEW

  """
  STUDY
  """
  STUDY

  """
  ALL
  """
  ALL
}

enum UserDailyQuestionStatus {
  NotStart
  Finish
}

enum UserDailyQuestionStatusV2 {
  NotStart
  Finish
}

"""
An enumeration.
"""
enum UserOperationEnum {
  """
  Login
  """
  LOGIN

  """
  Account Created
  """
  ACCOUNT_CREATED

  """
  Account Banned
  """
  ACCOUNT_BANNED

  """
  Email Added
  """
  EMAIL_ADDED

  """
  Email Removed
  """
  EMAIL_REMOVED

  """
  Email Verified
  """
  EMAIL_VERIFIED

  """
  Email Primary Updated
  """
  EMAIL_PRIMARY_UPDATED

  """
  Username Updated
  """
  USERNAME_UPDATED

  """
  Realname Updated
  """
  REALNAME_UPDATED

  """
  Avatar Updated
  """
  AVATAR_UPDATED

  """
  Passward Updated
  """
  PASSWORD_UPDATED

  """
  Oauth Connected
  """
  OAUTH_CONNECTED

  """
  Oauth Removed
  """
  OAUTH_REMOVED

  """
  Account Deleted
  """
  ACCOUNT_DELETED
}

"""
An enumeration.
"""
enum UserProfileCountry {
  """
  Afghanistan
  """
  AF

  """
  Åland Islands
  """
  AX

  """
  Albania
  """
  AL

  """
  Algeria
  """
  DZ

  """
  American Samoa
  """
  AS

  """
  Andorra
  """
  AD

  """
  Angola
  """
  AO

  """
  Anguilla
  """
  AI

  """
  Antarctica
  """
  AQ

  """
  Antigua and Barbuda
  """
  AG

  """
  Argentina
  """
  AR

  """
  Armenia
  """
  AM

  """
  Aruba
  """
  AW

  """
  Australia
  """
  AU

  """
  Austria
  """
  AT

  """
  Azerbaijan
  """
  AZ

  """
  Bahamas
  """
  BS

  """
  Bahrain
  """
  BH

  """
  Bangladesh
  """
  BD

  """
  Barbados
  """
  BB

  """
  Belarus
  """
  BY

  """
  Belgium
  """
  BE

  """
  Belize
  """
  BZ

  """
  Benin
  """
  BJ

  """
  Bermuda
  """
  BM

  """
  Bhutan
  """
  BT

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Botswana
  """
  BW

  """
  Bouvet Island
  """
  BV

  """
  Brazil
  """
  BR

  """
  British Indian Ocean Territory
  """
  IO

  """
  Brunei
  """
  BN

  """
  Bulgaria
  """
  BG

  """
  Burkina Faso
  """
  BF

  """
  Burundi
  """
  BI

  """
  Cabo Verde
  """
  CV

  """
  Cambodia
  """
  KH

  """
  Cameroon
  """
  CM

  """
  Canada
  """
  CA

  """
  Cayman Islands
  """
  KY

  """
  Central African Republic
  """
  CF

  """
  Chad
  """
  TD

  """
  Chile
  """
  CL

  """
  China
  """
  CN

  """
  Christmas Island
  """
  CX

  """
  Cocos (Keeling) Islands
  """
  CC

  """
  Colombia
  """
  CO

  """
  Comoros
  """
  KM

  """
  Congo
  """
  CG

  """
  Congo (the Democratic Republic of the)
  """
  CD

  """
  Cook Islands
  """
  CK

  """
  Costa Rica
  """
  CR

  """
  Côte d'Ivoire
  """
  CI

  """
  Croatia
  """
  HR

  """
  Cuba
  """
  CU

  """
  Curaçao
  """
  CW

  """
  Cyprus
  """
  CY

  """
  Czechia
  """
  CZ

  """
  Denmark
  """
  DK

  """
  Djibouti
  """
  DJ

  """
  Dominica
  """
  DM

  """
  Dominican Republic
  """
  DO

  """
  Ecuador
  """
  EC

  """
  Egypt
  """
  EG

  """
  El Salvador
  """
  SV

  """
  Equatorial Guinea
  """
  GQ

  """
  Eritrea
  """
  ER

  """
  Estonia
  """
  EE

  """
  Eswatini
  """
  SZ

  """
  Ethiopia
  """
  ET

  """
  Falkland Islands (Malvinas)
  """
  FK

  """
  Faroe Islands
  """
  FO

  """
  Fiji
  """
  FJ

  """
  Finland
  """
  FI

  """
  France
  """
  FR

  """
  French Guiana
  """
  GF

  """
  French Polynesia
  """
  PF

  """
  French Southern Territories
  """
  TF

  """
  Gabon
  """
  GA

  """
  Gambia
  """
  GM

  """
  Georgia
  """
  GE

  """
  Germany
  """
  DE

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greece
  """
  GR

  """
  Greenland
  """
  GL

  """
  Grenada
  """
  GD

  """
  Guadeloupe
  """
  GP

  """
  Guam
  """
  GU

  """
  Guatemala
  """
  GT

  """
  Guernsey
  """
  GG

  """
  Guinea
  """
  GN

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Haiti
  """
  HT

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Holy See
  """
  VA

  """
  Honduras
  """
  HN

  """
  Hong Kong
  """
  HK

  """
  Hungary
  """
  HU

  """
  Iceland
  """
  IS

  """
  India
  """
  IN

  """
  Indonesia
  """
  ID

  """
  Iran
  """
  IR

  """
  Iraq
  """
  IQ

  """
  Ireland
  """
  IE

  """
  Isle of Man
  """
  IM

  """
  Israel
  """
  IL

  """
  Italy
  """
  IT

  """
  Jamaica
  """
  JM

  """
  Japan
  """
  JP

  """
  Jersey
  """
  JE

  """
  Jordan
  """
  JO

  """
  Kazakhstan
  """
  KZ

  """
  Kenya
  """
  KE

  """
  Kiribati
  """
  KI

  """
  Kuwait
  """
  KW

  """
  Kyrgyzstan
  """
  KG

  """
  Laos
  """
  LA

  """
  Latvia
  """
  LV

  """
  Lebanon
  """
  LB

  """
  Lesotho
  """
  LS

  """
  Liberia
  """
  LR

  """
  Libya
  """
  LY

  """
  Liechtenstein
  """
  LI

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Macao
  """
  MO

  """
  Madagascar
  """
  MG

  """
  Malawi
  """
  MW

  """
  Malaysia
  """
  MY

  """
  Maldives
  """
  MV

  """
  Mali
  """
  ML

  """
  Malta
  """
  MT

  """
  Marshall Islands
  """
  MH

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Mauritius
  """
  MU

  """
  Mayotte
  """
  YT

  """
  Mexico
  """
  MX

  """
  Micronesia (Federated States of)
  """
  FM

  """
  Moldova
  """
  MD

  """
  Monaco
  """
  MC

  """
  Mongolia
  """
  MN

  """
  Montenegro
  """
  ME

  """
  Montserrat
  """
  MS

  """
  Morocco
  """
  MA

  """
  Mozambique
  """
  MZ

  """
  Myanmar
  """
  MM

  """
  Namibia
  """
  NA

  """
  Nauru
  """
  NR

  """
  Nepal
  """
  NP

  """
  Netherlands
  """
  NL

  """
  New Caledonia
  """
  NC

  """
  New Zealand
  """
  NZ

  """
  Nicaragua
  """
  NI

  """
  Niger
  """
  NE

  """
  Nigeria
  """
  NG

  """
  Niue
  """
  NU

  """
  Norfolk Island
  """
  NF

  """
  North Korea
  """
  KP

  """
  North Macedonia
  """
  MK

  """
  Northern Mariana Islands
  """
  MP

  """
  Norway
  """
  NO

  """
  Oman
  """
  OM

  """
  Pakistan
  """
  PK

  """
  Palau
  """
  PW

  """
  Palestine, State of
  """
  PS

  """
  Panama
  """
  PA

  """
  Papua New Guinea
  """
  PG

  """
  Paraguay
  """
  PY

  """
  Peru
  """
  PE

  """
  Philippines
  """
  PH

  """
  Pitcairn
  """
  PN

  """
  Poland
  """
  PL

  """
  Portugal
  """
  PT

  """
  Puerto Rico
  """
  PR

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Russia
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saint Barthélemy
  """
  BL

  """
  Saint Helena, Ascension and Tristan da Cunha
  """
  SH

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Saint Lucia
  """
  LC

  """
  Saint Martin (French part)
  """
  MF

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Saint Vincent and the Grenadines
  """
  VC

  """
  Samoa
  """
  WS

  """
  San Marino
  """
  SM

  """
  Sao Tome and Principe
  """
  ST

  """
  Saudi Arabia
  """
  SA

  """
  Senegal
  """
  SN

  """
  Serbia
  """
  RS

  """
  Seychelles
  """
  SC

  """
  Sierra Leone
  """
  SL

  """
  Singapore
  """
  SG

  """
  Sint Maarten (Dutch part)
  """
  SX

  """
  Slovakia
  """
  SK

  """
  Slovenia
  """
  SI

  """
  Solomon Islands
  """
  SB

  """
  Somalia
  """
  SO

  """
  South Africa
  """
  ZA

  """
  South Georgia and the South Sandwich Islands
  """
  GS

  """
  South Korea
  """
  KR

  """
  South Sudan
  """
  SS

  """
  Spain
  """
  ES

  """
  Sri Lanka
  """
  LK

  """
  Sudan
  """
  SD

  """
  Suriname
  """
  SR

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Sweden
  """
  SE

  """
  Switzerland
  """
  CH

  """
  Syria
  """
  SY

  """
  Taiwan
  """
  TW

  """
  Tajikistan
  """
  TJ

  """
  Tanzania
  """
  TZ

  """
  Thailand
  """
  TH

  """
  Timor-Leste
  """
  TL

  """
  Togo
  """
  TG

  """
  Tokelau
  """
  TK

  """
  Tonga
  """
  TO

  """
  Trinidad and Tobago
  """
  TT

  """
  Tunisia
  """
  TN

  """
  Türkiye
  """
  TR

  """
  Turkmenistan
  """
  TM

  """
  Turks and Caicos Islands
  """
  TC

  """
  Tuvalu
  """
  TV

  """
  Uganda
  """
  UG

  """
  Ukraine
  """
  UA

  """
  United Arab Emirates
  """
  AE

  """
  United Kingdom
  """
  GB

  """
  United States Minor Outlying Islands
  """
  UM

  """
  United States of America
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vanuatu
  """
  VU

  """
  Venezuela
  """
  VE

  """
  Vietnam
  """
  VN

  """
  Virgin Islands (British)
  """
  VG

  """
  Virgin Islands (U.S.)
  """
  VI

  """
  Wallis and Futuna
  """
  WF

  """
  Western Sahara
  """
  EH

  """
  Yemen
  """
  YE

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

"""
An enumeration.
"""
enum UserProfileOccupation {
  """
  Student
  """
  A_1

  """
  Professional
  """
  A_2
}

enum UserQuestionStatus {
  NOT_STARTED
  AC
  TRIED
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

input BatchReviewFlaggedObjectsInput {
  description: String
  flagResultIds: [ID!]!
  operation: FlagStatus!
  reasonId: ID
}

input DeleteAccountInput {
  otherReason: String
  reason: DeleteAccountReason!
  usernameOrEmail: String!
}

input DeleteUserRequestInput {
  endDate: DateTime
  limit: Int!
  skip: Int!
  startDate: DateTime
  userEmail: String
  userId: String
  username: String
}

input FavoriteQuestionFilterInput {
  difficultyList: [DifficultyDescribedEnum]
  positionRoleTagSlug: String
  questionStatusList: [FavoriteQuestionStatusEnum]
}

input FlagInput {
  description: String
  reasonId: ID
  resourceId: String!
  resourceType: ResourceTypeEnum!
}

input InterviewedStatsInput {
  companyId: Int
  companyName: String
  interviewedStatsId: Int!
  isInterviewed: Boolean
  positionTagSlug: String
  questionId: String!
  stageOption: Int
  timeOption: Int
}

input LibraryMultiTestcaseInput {
  category: Category!
  expectedOutput: String!
  inputRaw: String!
  name: String!
}

input LibraryQuestionsInput {
  canEdit: Boolean
  isCustom: Boolean
  isNew: Boolean
  isSystemDesign: Boolean
  isUnpublished: Boolean

  """
  Search Keyword
  """
  keyword: String

  """
  Question Type
  """
  quesType: String
  sortField: QuestionSortFieldEnum!
}

input LibrarySolutionsInput {
  code: String!
  lang: String!
  solutionId: ID
}

input ManagementAddInterviewedStatVoteInput {
  """
  position tag id
  """
  positionTagSlug: String
  questionId: ID!

  """
  company tag id
  """
  tagId: ID!
  timeOption: Int
  votedNum: Int!
}

input ManagementAddOrEditTagCategoryInput {
  """
  Group ID for this category
  """
  groupId: ID!

  """
  Category is enabled or not
  """
  isEnabled: Boolean

  """
  Category Name
  """
  name: String!
}

input ManagementAddOrEditTagInput {
  """
  Tag Image URL
  """
  imgUrl: String
  isStandard: Boolean

  """
  Whether the tag is enabled (if not enabled, it's not shown to the users
  """
  isTagEnabled: Boolean!
  isUserSelectable: Boolean
  keywords: JSONString

  """
  Tag Name
  """
  name: String!

  """
  排序
  """
  order: Int

  """
  Tag Slug
  """
  slug: String!

  """
  Category List IDs
  """
  tagCategoryIds: [ID]
}

input managementCompanyQuestionsInput {
  keyword: String
  keywordType: CompanyQuestionKeywordType
  limit: Int!
  offset: Int!
  tagId: Int!
  timeOption: CompanyQuestionTimeOptionEnum
}

input managementCompanyQuestionsV2Input {
  companyTagId: Int!
  keyword: String
  limit: Int!
  offset: Int!
  positionTagSlug: String
  timeOption: CompanyQuestionTimeOptionEnumV2
}

input ManagementCompanyTagsInput {
  """
  Filter by Standard Tags
  """
  isEnabled: Boolean

  """
  Search Keyword
  """
  keyword: String
  limit: Int!
  offset: Int!

  """
  Tag Slug
  """
  slug: String
}

input managementIncVoteLogsInput {
  limit: Int!
  offset: Int!
  questionId: Int!
  tagId: Int!
}

input ManagementTagCategoriesInput {
  """
  Filter by Category Enabled
  """
  isEnabled: Boolean

  """
  Search Keyword
  """
  keyword: String

  """
  Category Slug
  """
  slug: String

  """
  Group ID
  """
  tagGroupId: Int
}

input ManagementTagsInput {
  excludeTagCategoryIds: [Int]
  isSimilarTag: Boolean

  """
  Filter by Standard Tags
  """
  isStandardTag: Boolean

  """
  Filter by Enabled Tags
  """
  isTagEnabled: Boolean

  """
  Filter by User Selectable Tags
  """
  isUserSelectable: Boolean

  """
  Search Keyword
  """
  keyword: String
  limit: Int!
  offset: Int!

  """
  Filter by Tag Slug startswith
  """
  slug: String

  """
  Category ID
  """
  tagCategoryId: Int

  """
  Group ID
  """
  tagGroupId: Int
}

input ManagementTeamMembersInput {
  limit: Int!
  roleGroup: ManagementRoleEnum
  skip: Int!
  username: String
}

input OfficialSolutionFeedbackFilterInput {
  authors: [String]
  categories: [String]
  endDate: String
  hasComment: Boolean
  orderBy: FeedbackOrderByEnum
  questionSlugs: [String]
  reasons: [Int]
  sortOrder: SortingEnum
  startDate: String
}

input OMFavoriteListInput {
  favoriteType: FavoriteTypeEnum
  limit: Int!
  searchFieldEnum: OMFavoriteSearchFieldEnum
  searchKeyword: String
  skip: Int!
  sortBy: OMFavoriteSortFieldEnum

  """
  sort descending or ascending
  """
  sortDsc: Boolean
}

input PremiumTrialRecordsInput {
  limit: Int!
  searchBy: SearchUserType
  searchKeyword: String
  skip: Int!
}

input ProgressListFilterInput {
  difficulty: DifficultyEnum
  orderBy: ProgressOrderByEnum
  searchKeywords: String
  sortOrder: SortingOrderEnum
  tags: [String!]
}

input QuestionAttachmentInput {
  content: String!
  extension: String!
  name: String!
}

input QuestionListFilterInput {
  companies: [String!]
  difficulty: DifficultyEnum
  listId: String
  orderBy: QuestionOrderByEnum
  premiumOnly: Boolean
  searchKeywords: String
  sortOrder: SortingOrderEnum
  status: UserQuestionStatus
  tags: [String!]
}

input QuestionSolutionsFilterInput {
  first: Int!
  languageTags: [String]
  orderBy: TopicSortingOption
  query: String
  questionSlug: String!
  skip: Int!
  topicTags: [String]
}

input ReviewFlaggedObjectInput {
  description: String

  """
  Use this to locate the object. Will ignore resourceType and resourceId if this is provided.
  """
  flagResultId: ID
  operation: FlagStatus!
  reasonId: ID

  """
  Use this together with resourceType as an alternative way to locate object.
  """
  resourceId: String

  """
  Use this together with resourceId as an alternative way to locate object.
  """
  resourceType: ResourceTypeEnum
}

input StoreAdminCreateOrderInput {
  address: String!
  city: String!
  country: String!
  details: JSONString
  itemSlug: String!
  note: String
  phone: String!
  recipient: String!
  state: String!
  username: String!
  zipCode: String!
}

input UpcV2SubmitSurveyInput {
  codingLevel: UpcV2CodingLevelEnum
  interests: [String]
  purposes: UpcV2PurposeEnum
}

input UserManagementIpListInput {
  endedAt: DateTime
  ip: String
  limit: Int!
  skip: Int!
  startedAt: DateTime
  status: IPStatusEnum
  userName: String
}

input UserManagementOperationHistoryInput {
  endedAt: DateTime
  limit: Int!
  operations: [UserOperationEnum]
  skip: Int!
  startedAt: DateTime
  userId: ID!
}

input UserManagementScoreHistoryInput {
  category: UmScoreCategoryEnum
  endedAt: DateTime
  limit: Int!
  scoreType: ScoreTypeEnum
  skip: Int!
  startedAt: DateTime
  userId: ID!
}

input UserManagementStoreOrdersInput {
  endedAt: DateTime
  keywords: String
  limit: Int!
  skip: Int!
  startedAt: DateTime
  status: UmStoreOrderStatusEnum
  userId: ID
}

input UserManagementStripeChargesInput {
  endedAt: DateTime
  keywords: String
  limit: Int!
  skip: Int!
  startedAt: DateTime
  status: StripeChargeStatusEnum
  userId: ID!
}

input VacRecordsInput {
  limit: Int!

  """
  vac name to search
  """
  searchKeyword: String
  skip: Int!
  userId: ID!
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  args: [__InputValue!]!
  description: String
  locations: [__DirectiveLocation!]!
  name: String!
  onField: Boolean! @deprecated(reason: "Use `locations`.")
  onFragment: Boolean! @deprecated(reason: "Use `locations`.")
  onOperation: Boolean! @deprecated(reason: "Use `locations`.")
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  deprecationReason: String
  description: String
  isDeprecated: Boolean!
  name: String!
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  args: [__InputValue!]!
  deprecationReason: String
  description: String
  isDeprecated: Boolean!
  name: String!
  type: __Type!
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  defaultValue: String
  description: String
  name: String!
  type: __Type!
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation and subscription operations.
"""
type __Schema {
  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  description: String
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  fields(includeDeprecated: Boolean = false): [__Field!]
  inputFields: [__InputValue!]
  interfaces: [__Type!]
  kind: __TypeKind!
  name: String
  ofType: __Type
  possibleTypes: [__Type!]
}

type AcceptAchievementReward {
  error: String
  ok: Boolean
}

type AcceptContribution {
  contribution(id: ID): ContributionNode
  error: String
  ok: Boolean
}

type AccessToFavoriteNode {
  hasAccess: Boolean!
  questionCount: Int
  rejectReason: AccessDeniedReasonEnum
}

type AchievementNode {
  achievementDescription: String
  achievementName: String
  created: DateTime!
  idHash: String
  isRewardAccepted: Boolean!
}

type AcStatsNode {
  acQuestionCount: Int
  acRate: Int
  acSubmissionCount: Int
  totalSubmissionCount: Int
}

type AddFavoriteToMyCollectionV2 {
  error: String
  ok: Boolean!
}

type AddOrUpdateCodeInPlayground {
  error: String
  ok: Boolean
}

type AddQuestionToDefaultFavoriteV2 {
  error: String
  ok: Boolean!
}

type AddQuestionToFavorite {
  error: String
  favoriteIdHash: String
  ok: Boolean
  questionId: String
  userName: String
}

type AddQuestionToFavoriteV2 {
  error: String
  ok: Boolean!
}

type AddQuestionToNewFavorite {
  error: String
  favoriteIdHash: String
  isPublicFavorite: Boolean
  name: String
  ok: Boolean
  questionId: String
  userName: String
}

type AddQuestionToNewFavoriteV2 {
  error: String
  ok: Boolean
  slug: String
}

type AddUserToInternalContest {
  error: String
  user: UserNode
}

type AdvertisementNode {
  """
  the ad slot of google adsense, None for internal ads
  """
  adSlot: String
  adSource: AdSourceEnum!
  bannerUrl: String
  displayTitle: String

  """
  the height of google adsense, None for internal ads
  """
  height: Int
  targetUrl: String
  title: String!

  """
  the width of google adsense, None for internal ads
  """
  width: Int
}

type AnnualReportNode {
  badge: UserBadgeNode!
  content: [String]!
  showPopup: Boolean!
}

type ApplicationNode {
  anonymous: Boolean!
  background: String
  date: Int
  description: String!
  id: ID!
  solutions: String
  status: String
  tags: [String]
  testcases: String
  title: String!
  topic: TopicNode
  type: String
  user: PrivateContestUserNode!
}

type ApplyTimeTravelTicket {
  error: String
  ok: Boolean
}

type ApplyTimeTravelTicketV2 {
  error: String
  ok: Boolean
  streakCounter: StreakCounterNode
}

type ApproveComment {
  error: String
  ok: Boolean
  post: PostNode
}

type ApproveComments {
  error: String
  ok: Boolean
}

type ApproveContestReports {
  approvedReports: [ContestReportNode!]!
}

type ApproveReportedPost {
  error: String
  ok: Boolean
}

type ApproveTopic {
  error: String
  ok: Boolean
}

type ApproveTopics {
  error: String
  ok: Boolean
}

type ArchivedUserNode {
  archiveDate: String
  archiveReason: String
  createDate: DateTime!
  extraInfo: String!
  id: ID!
  originalPrimaryEmail: String!
  originalUsername: String!
  user: PrivateContestUserNode
}

type ArchiveUser {
  allArchivedUsers: [ArchivedUserNode!]!
}

type ArticleNode {
  body: String
  canSeeDetail: Boolean
  content: String
  contentTypeId: ID
  hasVideoSolution: Boolean
  id: ID!
  paidOnly: Boolean
  paidOnlyVideo: Boolean
  rating: RatingNode

  """
  The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
  """
  slug: String!

  """
  The page title as you'd like it to be seen by the public
  """
  title: String!
  titleSlug: String
  topic: TopicNode
  topicId: Int
  url: String
}

"""
取消注销账户请求
"""
type AuthCancelDeleteAccount {
  ok: Boolean!
}

type AwardInternalContestCoin {
  internalContestAwardedUsers: [Int]
  ok: Boolean
}

type BanInfoNode {
  banTypeName: String
  banTypeSlug: String
  endDate: DateTime
  reason: String
  startDate: DateTime
}

type BanIP {
  error: String
  ok: Boolean
}

type BanUser {
  error: String
  ok: Boolean
  user: UserNodeAdminOnly!
}

type BatchReviewFlaggedObjects {
  error: String
  ok: Boolean!
}

type BlacklistNode {
  words: String!
}

type BTSEventNotification {
  error: String
  ok: Boolean
}

type BTSReferralNode {
  link: String!
  referredCount: Int!
}

type BTSReferralRegister {
  error: String
  ok: Boolean
}

type CalendarBadgeNode {
  badge: UserBadgeNode!
  timestamp: Int!
}

type CardNode {
  banner: String
  bannerBackground: String
  categorySlug: String
  categoryTitle: String
  chapters: [ChapterNode!]!
  codingChallengeInfo: CodingChallengeNode
  createdAt: DateTime!
  description: String
  discussCategory: DiscussCategoryNode
  id: ID!
  img: String
  introduction: String
  introText: String
  isFavorite: Boolean
  isFeatured: Boolean
  isPreview: Boolean
  items: [ItemNode]
  lastModified: DateTime!
  numChapters: Int
  numItems: Int
  numUsersCompleted: Int
  numUsersStarted: Int
  paidOnly: Boolean!
  popularity: Int
  prevCompleteLinkInfo: JSONString
  progress: JSONString
  published: Boolean!
  sequentialOnly: Boolean!
  shareEvent: ShareEventNode
  slug: String!
  title: String!
  users: JSONString
  valueAddedContent: ValueAddedContentNode
}

type CategoryNode {
  cards(num: Int): [CardNode]
  description: String
  id: ID!
  order: Int!
  slug: String!
  title: String!
}

type CategoryToSlugNode {
  categoryName: String!
  displayName: String!
  favoriteSlug: String!
}

type CategoryType {
  id: ID!
  isDebuggable: Boolean!
  questionSet: [QuestionNode!]!
  title: String!
  titleSlug: String!
}

type ChallengeQuestionNode {
  date: Date!
  id: ID!
  incompleteChallengeCount: Int!
  status: ChallengeQuestionStatusEnum!
  streakCount: Int!
  type: ChallengeQuestionTypeEnum
}

type ChannelNode {
  identifier: String
  name: String
  shortName: String
}

type ChapterNode {
  description: String
  descriptionText: String
  id: ID!
  isLocked: Boolean
  items: [ItemNode]
  paidOnly: Boolean!
  shareEvent: ShareEventNode
  slug: String!
  title: String!
}

type Checkin {
  checkedIn: Boolean
  error: String
  ok: Boolean
}

type CodeSnippetNode {
  code: String
  lang: String
  langSlug: String
}

type CodingChallengeNode {
  canApplyTimeTravelTicket: Boolean!
  card: CardNode
  challenges: [DailyChallengeNode!]!
  containsPremium: Boolean!
  id: ID!
  questionOfToday: DailyChallengeNode
  startDate: DateTime!
}

type CodingChallengeNodeV2 {
  challenges: [DailyChallengeNodeV2!]!
  id: ID!
  startDate: Date!
  weeklyChallenges: [DailyChallengeNodeV2!]!
}

type CodingChallengePollingNode {
  dccSubmissionInfo: CodingChallengeSubmissionNode
  keepPolling: Boolean!
}

type CodingChallengeSubmissionNode {
  dailyChallengeMedal: MedalNode
  discussLink: String
  showCompleteModal: Boolean!
  showTttModal: Boolean!
  streakCounter: StreakCounterNode
}

type CollectContestEasterEgg {
  ok: Boolean
}

type CommentContribution {
  error: String
  ok: Boolean
}

type CommentNode {
  children: [CommentNode!]!
  id: Int!
  index: Int
  intentionTag: IntentionTagNode
  lastComment: TopicNode
  nodebbPid: Int!
  numChildren: Int!

  """
  Ineffective field: Don't query this field in a list
  """
  pageNum(numPerPage: Int = 10, orderBy: String = ""): Int
  parent: CommentNode
  parentId: ID
  pinned: Boolean
  pinnedAt: DateTime
  pinnedBy: UserNode
  post: PostNode!
  topic: TopicNode!
}

type CommonKeywordNode {
  content: String!
  title: String!
  titleSlug: String!
}

type CommonTagNode {
  imgUrl: String
  name: String!
  nameTranslated: String
  slug: String!
  tagType: TagTypeEnum
}

type CompanyNode {
  id: ID!
  name: String!
  slug: String!
}

type CompanyQuestionDetailNode {
  companyQuestion: CompanyQuestionNode
  frequency: Float!
  incVotedTotalNum: Int
  latestIncVote: LatestIncVoteNode
  periodVotedNum: Int
}

type CompanyQuestionListNode {
  questions: [CompanyQuestionNodeV2!]!
  total: Int!
}

type CompanyQuestionNode {
  frontendId: String
  id: Int
  title: String
  titleSlug: String
}

type CompanyQuestionNodeV2 {
  adminVotedNum: Int
  frequency: Float!
  frontendQuestionId: String!
  id: Int
  title: String!
  titleCn: String
  titleSlug: String!
  userVotedNum: Int
}

type CompanyQuestionOptionsNode {
  positionOptions: [CommonTagNode]
  timeOptions: [CompanyQuestionTimeOptionsNode]
}

type CompanyQuestionTimeOptionsNode {
  name: String

  """
  时间选项
  """
  option: CompanyQuestionTimeOptionEnumV2!
}

type CompanyTagConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [CompanyTagEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `CompanyTag` and its cursor.
"""
type CompanyTagEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: CompanyTagNode
}

type CompanyTagNode {
  companySet: [InterviewCompanyNode!]!
  createdAt: DateTime!
  discussTopicTag: [DiscussTopicTagNode!]!
  favorites: [FeaturedQuestionListNode!]!
  favoriteSet: [FeaturedQuestionListNode!]!
  frequencies: String
  hotScore: Int

  """
  The ID of the object.
  """
  id: ID!
  imgUrl: String
  interviewTagsCategories: [InterviewTagsCategoryNode!]!

  """
  Deprecated in Tag System. Still used by old products.
  """
  isEnabled: Boolean!

  """
  Whether this is a standard tag or not
  """
  isStandard: Boolean!

  """
  Whether this tag is enabled or not. If not enabled, we NEVER show it to our users.
  """
  isTagEnabled: Boolean!

  """
  Whether user can select this tag or not
  """
  isUserSelectable: Boolean!
  keywords: JSONString!
  name: String!
  order: Int
  questionapplicationSet: [ApplicationNode!]!
  questionCount: Int
  questionIds: [Int]
  questions: [QuestionNode!]
  slug: String!
  tagCategories: [TagCategoryNode!]!
  tagId: Int!

  """
  Deprecated in Tag System. Still used by old products.
  """
  tagType: TagTypeNode
  translatedName: String
}

type CompleteFeatureGuide {
  error: String
  ok: Boolean
  userStatus: MeNode
}

type CompleteSurvey {
  error: String
}

type CompletionLikeNode {
  completion: CompletionNode
  creationDate: DateTime!
  id: ID!
  isLike: Boolean!
  updationDate: DateTime!
}

type CompletionNode {
  aiResponse: String!
  completionlikeSet: [CompletionLikeNode!]!
  creationDate: DateTime!
  id: ID!
  updationDate: DateTime!
}

type ComplexityInfoNode {
  complexity: String!
  displayName: String
  funcStr: String
  vote: ComplexityVoteEnum
}

type ConfirmSchoolLogo {
  error: String
  ok: Boolean!
}

type ContestAnnouncementNode {
  content: String!
  currentlyVisible: Boolean
  expiryTime: DateTime!
  id: ID!
  pubDate: DateTime!
}

type ContestDetailNode {
  duration: Int
  enableContestDynamicLayout: Boolean
  failCount: Int
  hasCompletedContest: Boolean
  isDynamicLayout: Boolean
  isVirtualContest: Boolean
  startTime: DateTime
  titleSlug: String
}

type ContestNode {
  cardImg: String
  company: SponsorNode
  containsPremium: Boolean
  description: String!

  """
  in seconds
  """
  duration: Int!
  isVirtual: Boolean
  originStartTime: Int
  questions: [ContestQuestionNode]
  rankingUpdated: Boolean!
  sponsors: [SponsorNode]!
  startTime: Int!
  title: String!
  titleSlug: String
  unrated: Boolean!
}

type ContestQuestionDetailNode {
  languageList: [LanguageNode]
  question: ContestQuestionNodeV2
  statusList: [SubmissionStatusNode]
  submittableLanguageList: [LanguageNode]
  totalAc: Int
  totalAcUser: Int
  totalSubmission: Int
  totalTriedUser: Int
}

type ContestQuestionNode {
  credit: Int!
  questionId: String
  title: String
  titleSlug: String
}

type ContestQuestionNodeV2 {
  canSeeQuestion: Boolean
  categoryTitle: String
  codeSnippets: [CodeSnippetNode]
  content: String
  contentType: QuestionEditorTypeEnum!
  contestQuestionNumber: Int
  difficulty: String
  enableRunCode: Boolean
  enableSubmit: Boolean
  enableTestMode: Boolean
  envInfo: String
  exampleTestcaseList: [String!]!
  metaData: String
  questionFrontendId: String
  questionId: String
  score: Int
  status: String
  title: String
  titleSlug: String
  translatedContent: String
  translatedTitle: String
}

type ContestRatingHistogramBarNode {
  ratingEnd: Int!
  ratingStart: Int!
  topPercentage: Float!
  userCount: Int!
}

type ContestReportBannedNode {
  banDuration: Int
  user: UserNode!
}

type ContestReportLCCNNode {
  contest: ContestNode!
  date: DateTime!
  description: String!
  id: ID!
  reportingUser: UserNode!
  submissionId: Int!
}

type ContestReportNode {
  contest: ContestNode!
  date: DateTime!
  description: String!
  id: ID!
  reportedUser: UserNode!
  reportingUser: UserNode!
  status: ContestReportStatus!
  submissionId: Int!
}

type ContestReportRewardNode {
  rewardAmount: Int!
  user: UserNode!
}

type ContestReportSummaryNode {
  bannedUsers: [ContestReportBannedNode!]!
  contest: ContestNode!
  rewardedUsers: [ContestReportRewardNode!]!
}

type ContestRootBannerNode {
  aspectRatioType: ContestRootBannerAspectRatioType!
  backgroundColor: String!
  banner: String!
  targetUrl: String!
  title: String!
}

type ContestSubmissionListNode {
  hasNext: Boolean
  lastKey: String
  submissions: [ContestSubmissionNodeV2]
}

type ContestSubmissionNodeV2 {
  flagType: SubmissionFlagTypeEnum
  hasNotes: Boolean
  id: ID
  isPending: String
  lang: String
  langName: String
  langVerboseName: String
  memory: String
  notes: String
  penalty: Int
  runtime: String
  status: Int
  statusDisplay: String
  time: String
  timestamp: String
  title: String
  titleSlug: String
  topicTags: [TopicTagNode]
  url: String
}

type ContributionNode {
  application: ApplicationNode
  applyDate: DateTime!
  category: String
  date: Int
  id: ID!
  lastModified: DateTime!
  library: Int
  payload: JSONString
  status: String
  topic: TopicNode
  user: PrivateContestUserNode!
}

type ContributorNode {
  avatarUrl: String
  profileUrl: String
  username: String
}

type CreateCodeErrorHint {
  completion: CompletionNode
  error: String
  ok: Boolean!
}

type CreateComment {
  comment: CommentNode
  commentId: Int
  error: String
  ok: Boolean
}

type CreateCompletionLike {
  completionLike: CompletionLikeNode
  error: String
  ok: Boolean!
}

type CreateContribution {
  error: String
  ok: Boolean
}

type CreateEmail {
  email: EmailNode
  error: String
  ok: Boolean
}

type CreateIdeDynamicLayout {
  error: String
  layout: IDEDynamicLayoutNode
  ok: Boolean!
}

type CreateOrUpdateEditorialFeedback {
  error: String
  ok: Boolean!
}

type CreateOrUpdateEmailEvent {
  emailEvent: EmailEventNode
  errors: JSONString
  ok: Boolean
  wasCreated: Boolean
}

"""
obtain the new annual medals
"""
type CreateOrUpdateUserYearlyMedals {
  error: String
  ok: Boolean!
}

type CreatePlayground {
  error: String
  ok: Boolean
  uuid: String
}

type CreatePlaygroundFolder {
  error: String
  ok: Boolean
}

type CreateTopic {
  error: String
  id: Int
  ok: Boolean
}

type CreateTopicForContest {
  error: String
  topic: TopicNode
}

type CreateTopicForQuestion {
  error: String
  topic: TopicNode
}

type CreateTopicWithCategory {
  error: String
  topic: TopicNode
}

type CreditCardLogNode {
  action: String!
  operator: ManagementUserSimpleNode!

  """
  In seconds
  """
  timestamp: Int!
}

type CurrentSubscriptionInfo {
  billingEmail: String
  cardCountryCode: String
  creditAmount: Float
  currentPeriodEnd: String
  currentPlan: String
  hasStudentPlan: Boolean
  paymentMethod: String
}

type DailyChallengeNode {
  date: DateTime!
  item: ItemNode!
  link: String!
  question: QuestionNode!
  userStatus: UserDailyQuestionStatus!
}

type DailyChallengeNodeV2 {
  date: DateTime!
  id: ID!
  link: String!
  question: QuestionNode!
  userStatus: UserDailyQuestionStatusV2!
}

type DebuggerLanguageFeatureNode {
  id: ID!
  lang: LibraryLanguage!
  supportsDebugging: Boolean!
  supportsDisablingBreakpoints: Boolean!
  supportsExpressions: Boolean!
}

type DebugSessionNode {
  crashed: Boolean!
  endTime: DateTime!
  isActive: Boolean!
  startTime: DateTime!
  updateTime: DateTime!
  user: PrivateContestUserNode!
  uuid: String!
}

"""
user apply to delete account, account gets frozen after success
"""
type DeleteAccount {
  ok: Boolean!
  planDeleteDate: Date
}

type DeleteCodeFromPlayground {
  error: String
  ok: Boolean
}

type DeleteComment {
  error: String
  ok: Boolean
  post: PostNode
}

type DeleteComments {
  error: String
  ok: Boolean
}

type DeleteEducation {
  error: String
  ok: Boolean
}

type DeleteEmail {
  error: String
  ok: Boolean
}

type DeleteFavoriteV2 {
  error: String
  ok: Boolean!
}

type DeleteIdeDynamicLayout {
  error: String
  ok: Boolean!
}

type DeleteNote {
  error: String
  ok: Boolean
}

type DeleteOccupation {
  error: String
  ok: Boolean
}

type DeletePlayground {
  error: String
  ok: Boolean
}

type DeletePlaygroundFolder {
  error: String
  ok: Boolean
}

type DeleteReportedPost {
  error: String
  ok: Boolean
}

type DeleteSocial {
  error: String
  ok: Boolean
}

type DeleteTeamMember {
  error: String
  ok: Boolean
}

type DeleteTopic {
  error: String
  ok: Boolean
}

type DeleteTopics {
  error: String
  ok: Boolean
}

type DeleteUserRequestListNode {
  deletedUsers: [DeleteUserRequestNode!]!
  hasMore: Boolean!
  totalNum: Int!
}

type DeleteUserRequestNode {
  avatar: String
  deactivatedAt: DateTime
  frozenAt: DateTime
  otherReason: String
  primaryEmail: String!
  realName: String
  reason: DeleteAccountReason
  status: AccountStatus
  userId: ID!
  username: String!
}

type DiscountEventBannerNode {
  aspectRatioType: DiscountEventBannerAspectRatioType!
  backgroundColor: String!
  banner: String!
  creationDate: DateTime!
  event: DiscountEventNode!
  id: ID!
  targetUrl: String!
  title: String!
  updationDate: DateTime!
}

type DiscountEventNode {
  banners: [DiscountEventBannerNode]
  couponCode: String
  creationDate: DateTime!
  description: String!
  discounteventbannerSet: [DiscountEventBannerNode!]!
  duration: Int!
  id: ID!
  name: String!
  ogImage: String
  seoDescription: String!
  seoTitle: String!
  startTime: DateTime!
  superuserPreview: Boolean!
  updationDate: DateTime!
}

type DiscountEventRegister {
  error: String
  ok: Boolean
}

type DiscussAnnouncementNode {
  content: String!
  dateCreated: DateTime!
  dateUpdated: DateTime!
  display: Boolean!
  id: ID!
}

type DiscussCategoryNode {
  announcement: String
  anonymousEnabled: Boolean!
  canModerate: Boolean!
  canRewardPosts: Boolean!
  description: String
  id: Int!
  numTopics: Int!
  path: String!
  rootCategory: DiscussCategoryNode!
  slug: String!
  subcategories: [DiscussCategoryNode!]!
  title: String!
  titleLink: String
}

type DiscussTopicTagNode {
  id: ID!
  name: String!
  numTopics(otherTag: Int): Int!
  order: Int!
  slug: String!
  tagFk: TagNode
  tagType: TopicTagTagType
  topicSet: [TopicNode!]!
}

type EducationRecordNode {
  degree: String
  endTime: String
  id: ID!
  startTime: String
  toPresent: Boolean!
  unverifiedOrganizationName: String
  user: PrivateContestUserNode!
}

type EmailEventNode {
  emailsendsessionSet: [EmailSendSessionNode!]!
  id: ID!
  minInterval: Int
  notificationIdentifier: String
  slug: String!
  sqlQuery: String
  template: EmailTemplateNode
  templateId: Int
  title: String!
  truncatedUsers: [UserNode]
  userFilter: JSONString
}

type EmailNode {
  email: String!
  primary: Boolean!
  verified: Boolean!
}

type EmailOpenNode {
  email: String!
  extraInfo: String
  id: ID!
  session: EmailSendSessionNode
  time: DateTime
}

type EmailSendSessionNode {
  clicksPerLink: JSONString
  conversionData: JSONString
  emailsLeft: Int
  event: EmailEventNode!
  eventTitle: String
  groupName: String
  id: ID!
  numClicks: Int
  numOpens: Int
  numOpensPerHour: JSONString
  numSent: Int!
  opens: [EmailOpenNode!]!
  overallClickThroughRate: Int
  startTime: String
  template: EmailTemplateNode!
  totalSent: Int
}

type EmailTemplateNode {
  """
  Resolves the following template variables automatically:<ul><li>next_contest_title</li><li>suggested_q_title</li><li>next_contest_title_slug</li><li>storage_base_url</li><li>q_num_ac_subs</li><li>unsubscribe_url</li><li>q_difficulty_w_article</li><li>real_name</li><li>next_javascript_dcc_day</li><li>suggested_q_slug</li><li>next_biweekly_contest_time_by_timezone</li><li>next_biweekly_contest_title_slug</li><li>next_contest_url</li><li>site_base_url</li><li>next_biweekly_contest_url</li><li>next_javascript_dcc_editorial_link</li><li>current_year</li><li>next_contest_time_by_timezone</li><li>next_biweekly_contest_title</li><li>blocks</li><li>username</li><li>next_biweekly_contest_time_url</li><li>next_javascript_dcc_link</li><li>next_contest_formatted_date</li><li>q_description</li><li>next_contest_time_url</li><li>next_biweekly_contest_formatted_date</li><li>q_difficulty_mandarin</li></ul>
  """
  content: String!
  conversionTargetUrlTemplates: String
  emaileventSet: [EmailEventNode!]!
  emailsendsessionSet: [EmailSendSessionNode!]!
  emailSubject: String!
  id: ID!
  title: String!
}

type EndSession {
  session: DebugSessionNode
}

type ExecuteScript {
  taskId: String!
}

type FavoriteBriefListNode {
  favorites: [FavoriteBriefNode!]!
  hasMore: Boolean!
  totalLength: Int!
}

type FavoriteBriefNode {
  coverBackgroundColor: String
  coverEmoji: String
  coverUrl: String
  favoriteType: FavoriteTypeEnum
  generatedFavoritesInfo: GeneratedFavoritesInfoNode
  generateFromFavoriteSlug: String
  hasCurrentQuestion: Boolean
  isPublicFavorite: Boolean!
  lastQuestionAddedAt: DateTime
  name: String!
  slug: String!
  viewCount: Int
}

type FavoriteBriefUserNode {
  realName: String!
  userAvatar: String!
  userName: String
  userSlug: String!
}

type FavoriteDetailListNode {
  favorites: [FavoriteDetailNode!]!
  hasMore: Boolean!
  totalLength: Int!
}

type FavoriteDetailNode {
  collectCount: Int!

  """
  only for C.N. side
  """
  companyLegalName: String
  companyVerified: Boolean!
  coverBackgroundColor: String
  coverEmoji: String
  coverUrl: String
  creator: FavoriteBriefUserNode!
  description: String!

  """
  user unlock favorite status
  """
  favoriteLockStatus: FavoriteLockStatusEnum
  favoriteType: FavoriteTypeEnum

  """
  only for C.N. side
  """
  financingStageDisplay: String
  generatedFavoritesInfo: GeneratedFavoritesInfoNode
  generateFromFavoriteSlug: String
  hasCurrentQuestion: Boolean

  """
  only for C.N. side
  """
  industryDisplay: String
  isDefaultList: Boolean!
  isPublicFavorite: Boolean!

  """
  for smart list
  """
  languageTagSlug: String
  lastModified: DateTime!
  lastQuestionAddedAt: DateTime
  name: String!
  positionRoleTags: [CommonTagNode!]
  questionNumber: Int!

  """
  only for C.N. side
  """
  scaleDisplay: String
  slug: String!
  viewCount: Int

  """
  only for C.N. side
  """
  website: String
}

type FavoriteNode {
  acStats: [QuestionCountByDifficultyNode!]!
  children: [FeaturedQuestionListNode!]!
  companyTag: TagNode
  coverUrl: String
  created: DateTime!
  creator: String!
  description: String!
  extraInfo: String
  favoriteType: FavoriteFavoriteType
  forkFrom: FeaturedQuestionListNode
  generatedFavorites: [FeaturedQuestionListNode!]!
  generatedFrom: FeaturedQuestionListNode
  id: ID!
  idHash: String!
  isPublicFavorite: Boolean!
  isWatched: Boolean!
  lastModified: DateTime!
  lastQuestionAddedAt: DateTime
  name: String!
  order: Int!
  publicId: String!
  questionCount: Int!
  questions: [QuestionNode!]!
  slug: String
  tags: [CommonTagNode]!
  uuid: UUID!
  viewCount: Int!
}

type FavoriteQuestionListNode {
  hasMore: Boolean
  questions: [FavoriteQuestionNode!]!
  totalLength: Int
}

type FavoriteQuestionNode {
  difficulty: DifficultyDescribedEnum!

  """
  出题频率，企业题单专用字段
  """
  frequency: Float
  id: ID!

  """
  whether the question is in the user's favorites
  """
  isInMyFavorites: Boolean!
  paidOnly: Boolean!
  questionFrontendId: String!
  status: FavoriteQuestionStatusEnum
  title: String!
  titleSlug: String!
  topicTags: [CommonTagNode!]
  translatedTitle: String
}

type FavoritesNode {
  allFavorites: [FavoriteNode]
  officialFavorites: [FavoriteNode]
  privateFavorites: [FavoriteNode]
  publicFavorites: [FavoriteNode]
  watchedFavorites: [FavoriteNode]
}

type FavoriteSubmitACProgressNode {
  totalAcCount: Int!
  totalSubmitCount: Int!
}

type FeaturedQuestionListNode {
  acStats: [QuestionCountByDifficultyNode!]!
  children: [FeaturedQuestionListNode!]!
  companyTag: TagNode
  coverUrl: String
  created: DateTime!
  creator: String!
  description: String!
  extraInfo: String
  favoriteType: FavoriteFavoriteType
  forkFrom: FeaturedQuestionListNode
  generatedFavorites: [FeaturedQuestionListNode!]!
  generatedFrom: FeaturedQuestionListNode
  id: ID!
  idHash: String!
  isPaidOnly: Boolean!
  isPublicFavorite: Boolean!
  isWatched: Boolean!
  lastModified: DateTime!
  lastQuestionAddedAt: DateTime
  name: String!
  order: Int!
  publicId: String!
  questionCount: Int!
  questions: [QuestionNode!]!
  slug: String
  tags: [CommonTagNode]!
  uuid: UUID!
  viewCount: Int!
}

type FeatureNode {
  autocompleteLanguages: JSONString
  chinaProblemDiscuss: Boolean
  cnJobs: Boolean
  contest: Boolean
  dangerZone: Boolean
  discuss: Boolean
  enableAiHelper: Boolean
  enableAllQuestionsRaw: Boolean
  enableAutocomplete: Boolean
  enableAutocompletePremium: Boolean
  enableCfTurnstile: Boolean
  enableChannels: Boolean
  enableCodingChallengeV2: Boolean
  enableDebugger: Boolean
  enableDebuggerPremium: Boolean
  enableFrontendCategory: Boolean
  enableIndiaPricing: Boolean
  enableLcIde: Boolean
  enableLegacyStudyPlanEntry: Boolean
  enableNewPlanRankBoardAccess: Boolean
  enableNewProfile: Boolean
  enableNewQdPage: Boolean
  enableNewStudyPlan: Boolean
  enableRecaptchaV3: Boolean
  enableReferralDiscount: Boolean
  enableSharedWorker: Boolean
  enableStoreShippingForm: Boolean
  interview: Boolean
  maxTimeTravelTicketCount: Int
  mockInterview: Boolean
  questionTranslation: Boolean
  signUp: Boolean
  socialProviders: JSONString
  store: Boolean
  studentFooter: Boolean
  subscription: Boolean
}

type FeedBackMetaNode {
  maxScore: Int!
  name: String!
  options: [FeedBackOptionNode!]
  questionContent: String
}

type FeedBackOptionNode {
  optionId: Int!
  optionName: String!
  optionSlug: String!
}

type FilteredSubmissionNode {
  code: String!
  codeOutput: String
  compareResult: String
  contest: ContestNode
  date: DateTime!
  id: ID!
  lang: String
  memoryComplexity: SubmissionMemoryComplexity
  question: QuestionNode!
  runtime: Int
  status: String
  timeComplexity: SubmissionTimeComplexity
  totalCorrect: Int
  user: PrivateContestUserNode!
}

type FilteredSubmissionOverviewNode {
  pages: Int
  submissions(
    inputFilters: String = ""
    numPerPage: Int = 20
    pageNo: Int = 1
  ): [FilteredSubmissionNode]
}

type FlaggedObjectConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [FlaggedObjectEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `FlaggedObject` and its cursor.
"""
type FlaggedObjectEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: FlaggedObjectNode
}

type FlaggedObjectNode {
  firstFlaggedTime: DateTime!
  flaggedCount: Int!
  flagResult: FlagResultNode!
  reasons: [FlagReasonNode!]
  summary: String!
}

type FlagNode {
  description: String!
  reason: FlagReasonNode
  reporter: PrivateContestUserNode!
}

type FlagPost {
  error: String
  ok: Boolean
}

type FlagReasonNode {
  id: ID!
  name: String!
}

type FlagResultNode {
  created: DateTime!
  modified: DateTime!
  reviewer: PrivateContestUserNode
  status: FlagResultStatus!
}

type FlagSetContentStatus {
  error: String
  ok: Boolean!
}

type FlagSomething {
  error: String
  flag: FlagNode
  ok: Boolean!
}

type ForkFavoriteV2 {
  error: String
  ok: Boolean!
  slug: String
}

type FrontendQuestionResultNode {
  actual: String
  codePreview: String
  errorMessage: String
  expected: String
  failingLine: Int
  passed: Boolean!
  shortError: String
  showDiff: Boolean
  stdout: String
  testFn: String
  title: String!
}

type GeneratedFavoritesInfoNode {
  categoriesToSlugs: [CategoryToSlugNode!]
  defaultFavoriteSlug: String
}

type GetOrCreateExploreSession {
  cardId: String
  errors: JSONString
  ok: Boolean
  progress: JSONString
}

type GlobalRankingNode {
  myRank: RankingNode
  page: Int
  rankingNodes: [RankingNode]
  totalUsers: Int
  userPerPage: Int
}

type HandleUserReports {
  error: String
  ok: Boolean
}

type HideComments {
  error: String
  ok: Boolean
}

type HideLastTestcasesNode {
  count: Int!
  id: ID!
  question: QuestionNode!
}

type HidePost {
  error: String
  ok: Boolean
  post: PostNode
}

type HideTopicFromTrending {
  ok: Boolean
  topic: TopicNode
}

type HideTopics {
  error: String
  ok: Boolean
}

type HitResource {
  count: Int
  error: String
  ok: Boolean!
}

type HtmlArticleNode {
  editLink: String
  html: String!
  id: ID!
  originalLink: String
  paidOnly: Boolean!
}

type IDEDynamicLayoutNode {
  layoutId: String!
  layoutJson: JSONString!
  layoutName: String!
}

type IntentionTagNode {
  name: String!
  slug: String!
}

type InterviewCardNode {
  company: InterviewCompanyNode
  hasNewInterview: Boolean
  id: ID!
  numInterview: Int
  numParticipants: Int
  numPass: Int
  stage: CompanyStage
}

type InterviewCompanyGlobalScoreNode {
  companyName: String!
  score: Float!
}

type InterviewCompanyNode {
  id: ID!
  imgUrl: String
  name: String!
  stage: CompanyStage!
}

type InterviewCompanyOption {
  id: Int
  keywords: [String!]!
  name: String
  slug: String
}

type InterviewedStatsPost {
  error: String
  interviewedStatsId: Int
  ok: Boolean
}

type InterviewEnd {
  session: InterviewSessionNode
}

type InterviewGlobalStatsNode {
  averageCompanyScores: [InterviewCompanyGlobalScoreNode!]!
  categories: [InterviewTagsCategoryNode!]!
}

type InterviewNode {
  company: InterviewCompanyNode!
  createTime: DateTime
  disabled: Boolean!
  id: ID!
  premiumOnly: Boolean!
  questions: [QuestionNode!]!
  sessionSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): InterviewSessionNodeConnection!

  """
  in seconds
  """
  timeConstraint: Int
  updateTime: DateTime
}

type InterviewProgressNode {
  id: ID!
  lastSavedCode: String
  questionId: ID!
  status: ProgressStatus!
}

type InterviewQuestionReportNode {
  content: String!
  questionId: String!
  submission: InterviewSubmissionNode
  submissionHistory(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): InterviewSubmissionConnection!
}

type InterviewReportNode {
  analysisStatus: InterviewAnalysisStatus!
  distribution: [[Int]!]
  hasRequestedEmail: Boolean!
  isDuplicateAttempt: Boolean!
  percentile: Float
  questions: [InterviewQuestionReportNode!]!
  score: Float
}

type InterviewScoreProgressNode {
  score: Float!
  session: InterviewSessionNode!
}

type InterviewSessionConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [InterviewSessionEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `InterviewSession` and its cursor.
"""
type InterviewSessionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: InterviewSessionNode
}

type InterviewSessionNode {
  card: InterviewCardNode!
  endTime: Int!
  expiredTime: Int!

  """
  The ID of the object.
  """
  id: ID!
  interview: InterviewNode!
  progress: [InterviewProgressNode!]!
  remainingTime: Int!
  report: InterviewReportNode!
  startTime: Int!
  status: SessionStatus!
}

type InterviewSessionNodeConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [InterviewSessionNodeEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
}

"""
A Relay edge containing a `InterviewSessionNode` and its cursor.
"""
type InterviewSessionNodeEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: InterviewSessionNode
}

type InterviewStageOption {
  id: Int
  name: String
}

type InterviewStart {
  session: InterviewSessionNode
}

type InterviewSubmissionConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [InterviewSubmissionEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `InterviewSubmission` and its cursor.
"""
type InterviewSubmissionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: InterviewSubmissionNode
}

type InterviewSubmissionNode {
  code: String

  """
  The ID of the object.
  """
  id: ID!
  isPending: String
  lang: String
  memory: String
  numCorrect: Int
  runtime: String
  statusDisplay: String
  timestamp: Int
  total: Int
}

type InterviewSurveyNode {
  companies: [InterviewCompanyOption]
  interviewedUrl: String
  popularCompanies: [InterviewCompanyOption]
  positions: [CommonTagNode!]
  stageOptions: [InterviewStageOption]
  timeOptions: [InterviewTimeOption]
}

type InterviewTagsCategoryNode {
  description: String
  exploreCards: [CardNode!]!
  id: ID!
  name: String!
  score: InterviewTagsCategoryScoreNode
  suggestedQuestions: [QuestionNode!]!
}

type InterviewTagsCategoryScoreNode {
  category: InterviewTagsCategoryNode!
  creationDate: DateTime!
  distribution: [[Int]!]
  id: ID!
  percentile: Float!
  score: Float!
  updationDate: DateTime!
  user: PrivateContestUserNode!
}

type InterviewTimeOption {
  id: Int
  name: String
}

type IPManagementLogNode {
  operation: String!
  operationTime: DateTime!
  operator: ManagementUserSimpleNode!
}

type ItemBaseNode {
  article: ArticleNode
  cardTitle: String
  chapter: ChapterNode!
  chapterId: Int
  chapterTitle: String
  completedWithTimeTravelTicket: Boolean
  hasAppliedTimeTravelTicket: Boolean
  htmlArticle: HtmlArticleNode
  id: ID!
  info: String
  isComplete: Boolean
  isEligibleForCompletion: Boolean!
  lang: String
  numUsersCompleted: Int
  numUsersStarted: Int
  paidOnly: Boolean
  question: QuestionNode
  type: Int
  users: JSONString
  verboseLang: String
  video: VideoNode
  webPage: WebPageNode
}

type ItemNode {
  article: ArticleNode
  cardTitle: String
  chapter: ChapterNode!
  chapterId: Int
  chapterTitle: String
  completedWithTimeTravelTicket: Boolean
  hasAppliedTimeTravelTicket: Boolean
  htmlArticle: HtmlArticleNode
  id: ID!
  info: String
  isComplete: Boolean
  isEligibleForCompletion: Boolean!
  isLocked: Boolean!
  lang: String
  numUsersCompleted: Int
  numUsersStarted: Int
  paidOnly: Boolean
  prerequisites: [ItemBaseNode!]
  question: QuestionNode
  title: String!
  type: Int
  users: JSONString
  verboseLang: String
  video: VideoNode
  webPage: WebPageNode
}

"""
join a study plan
"""
type JoinStudyPlan {
  ok: Boolean!
  progressId: String!
}

type LanguageNode {
  id: Int
  name: String
  verboseName: String
}

type LanguageProblemCountNode {
  languageName: String!
  problemsSolved: Int!
}

type LatestIncVoteNode {
  incVotedAt: DateTime!
  incVotedNum: Int!
}

type LearningContextNode {
  backLink: String!
  name: String!
  nextQuestion: QuestionNode
  previousQuestion: QuestionNode
}

type LearningContextNodeV2 {
  name: String!
  nextQuestion: QuestionNode
  previousQuestion: QuestionNode
}

type LearningContextNodeV3 {
  backLink: String!
  name: String!
  nextQuestion: PanelQuestionNode
  previousQuestion: PanelQuestionNode
}

type LevelBeatPercentageMixin {
  difficulty: DifficultyDescribedEnum!
  percentage: Float
}

type LibraryActivityConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [LibraryActivityEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `LibraryActivity` and its cursor.
"""
type LibraryActivityEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: QuestionActivityNode
}

type LibraryActivityType {
  id: Int!
  name: String!
}

type LibraryCodeDefinition {
  content: String!
  id: ID!
  lang: LibraryLanguage!
  question: LibraryQuestionNode!
}

type LibraryDefinitionSave {
  question: LibraryQuestionNode!
}

type LibraryDifficulty {
  id: Int!
  name: String!
}

type LibraryDraftDelete {
  deleted: Boolean!
}

type LibraryDriver {
  content: String!
  id: ID!
  lang: LibraryLanguage!
  question: LibraryQuestionNode!
}

type LibraryFrontendPreview {
  content: String!
  id: ID!
  lang: LibraryLanguage!
  question: LibraryQuestionNode!
}

type LibraryFrontendQuestionIdChange {
  question: LibraryQuestionNode!
}

type LibraryGenerateSampleTestcase {
  content: String!
}

type LibraryHideLastTestcases {
  count: Int!
  id: ID!
  question: LibraryQuestionNode!
}

type LibraryLanguage {
  displayName: String!
  environmentInfo: String!
  fileExtension: String!
  name: String!
}

type LibraryMatchType {
  id: Int!
  name: String!
}

type LibraryMultiTestcase {
  category: Category!
  expectedOutput: String!
  inputRaw: String!
  name: String!
  question: LibraryQuestionNode!
}

type LibraryMultiTestcaseSave {
  question: LibraryQuestionNode!
}

type LibraryQuestionAttachmentNode {
  content: String!
  extension: String!
  id: ID!
  name: String!
}

type LibraryQuestionConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [LibraryQuestionEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `LibraryQuestion` and its cursor.
"""
type LibraryQuestionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: LibraryQuestionNode
}

type LibraryQuestionNode {
  activities(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): LibraryActivityConnection!
  attachments: [LibraryQuestionAttachmentNode!]
  canEdit: Boolean!
  codeDefinitions: [LibraryCodeDefinition]!
  codedefinitionSet: [LibraryCodeDefinition!]!
  content: String!
  contribution: ContributionNode
  contributors: [PrivateContestUserNode!]!
  contributorSet: [ContributorNode!]!
  createDate: DateTime!
  createdBy: PrivateContestUserNode
  customLimits: JSONString
  customMatcher: String!
  defaultCustomMatchers: JSONString!
  defaultValidator: LibraryValidator!
  difficulty: LibraryDifficulty!
  drivers: [LibraryDriver!]!
  driverSet: [LibraryDriver!]!
  followup: String!
  frontendPreviews: [LibraryFrontendPreview!]!
  frontendpreviewSet: [LibraryFrontendPreview!]!
  frontendQuestionId: ID
  hasFrontendPreview: Boolean
  hideLastTestcases: LibraryHideLastTestcases
  hidelasttestcases: LibraryHideLastTestcases
  id: ID!
  includeHeaders: String!
  inputCpp: String!
  isCustom: Boolean
  isMultitestsQuestion: Boolean
  isPrivate: Boolean!
  isSystemDesign: Boolean
  lastModified: DateTime!
  latestActivity: QuestionActivityNode
  libraryactivitySet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): QuestionActivityNodeConnection!
  matchType: LibraryMatchType!
  mergedContent: String!
  metadata: String!
  multiTestcases: [LibraryMultiTestcase!]!
  multitestcaseSet: [LibraryMultiTestcase!]!
  note: String!
  prodQuestion: QuestionNode
  prodTestcase: ProdTestcase
  publishedRevisionId: Int!
  publishError: Boolean!
  publishStatus: PublishStatus!
  questionapplicationSet: [ApplicationNode!]!
  questionattachmentSet: [LibraryQuestionAttachmentNode!]!
  questionTypes: [LibraryQuestionType!]!
  revisionId: Int!
  sampleTestcase: String!
  solutions: [LibrarySolution!]!
  solutionSet: [LibrarySolution!]!
  syncCategories: [String!]!
  testcase: LibraryTestcase!
  title: String!
  validator: LibraryValidator!
}

type LibraryQuestionNodeConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [LibraryQuestionNodeEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
}

"""
A Relay edge containing a `LibraryQuestionNode` and its cursor.
"""
type LibraryQuestionNodeEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: LibraryQuestionNode
}

type LibraryQuestionType {
  id: Int!
  name: String!
}

type LibrarySetHide {
  question: LibraryQuestionNode!
}

type LibrarySetPerm {
  question: LibraryQuestionNode!
}

type LibrarySolution {
  code: String!
  complexity: String!
  expectedStatus: LibrarySolutionStatus!
  fileName: String!
  id: ID!
  isModelSolution: Boolean!
  lang: LibraryLanguage!
  name: String
  order: Int!
  question: LibraryQuestionNode!
}

type LibrarySolutionDelete {
  question: LibraryQuestionNode!
}

type LibrarySolutionSave {
  question: LibraryQuestionNode!
  solutionId: ID!
}

type LibrarySolutionsOrderSave {
  question: LibraryQuestionNode!
}

type LibrarySolutionsOutput {
  lang: String!
  solutionId: ID!
}

type LibrarySolutionsSave {
  question: LibraryQuestionNode!
  solutions: [LibrarySolutionsOutput]
}

type LibrarySolutionStatus {
  id: Int!
  name: String!
}

type LibraryStatementSave {
  question: LibraryQuestionNode!
}

type LibraryTemplate {
  codeDefinitions: JSONString!
  drivers: JSONString!
  frontendPreviews: JSONString!
}

type LibraryTestcase {
  expectedOutput: String!
  inputFormatted: String!
  inputRaw: String!
  jsonBlob: JSONString!
  question: LibraryQuestionNode!
}

type LibraryTestcaseSave {
  question: LibraryQuestionNode!
}

type LibraryValidator {
  code: String!
  driver: String!
}

type LibraryValidatorSave {
  question: LibraryQuestionNode!
}

type Like {
  error: String
  likeResult: Boolean
  ok: Boolean
}

type LocalRankingNode {
  myRank: RankingNode
  page: Int
  rankingNodes: [RankingNode]
  totalUsers: Int
  userPerPage: Int
}

type LocationAutocomplete {
  id: String!
  name: String!
}

type ManagementAddInterviewedStatVote {
  ok: Boolean!
}

type ManagementAddOrEditTag {
  ok: Boolean!
}

type ManagementAddOrEditTagCategory {
  ok: Boolean!
}

type ManagementCompanyQuestionListNode {
  maxFreq: Float!
  questions: [CompanyQuestionDetailNode!]!
  totalNum: Int!
}

type ManagementCompanyTagNode {
  tags: [CompanyTagNode]!
  totalCount: Int
}

type ManagementCreditCardNode {
  cardLast4: String!
  id: ID!
  operationLog: [CreditCardLogNode!]!
  status: CreditCardStatus!
}

type ManagementIncVoteLogListNone {
  nodes: [ManagementIncVoteLogNode]!
  totalNum: Int
}

type ManagementIncVoteLogNode {
  createdAt: DateTime!
  createdBy: UserNode
  positionTag: CommonTagNode
  votedDate: DateTime!
  votedNum: Int!
}

type ManagementIpListNode {
  nodes: [ManagementIpNode!]!
  totalNum: Int!
}

type ManagementIpNode {
  address: String!
  firstAccessed: DateTime!
  id: ID!
  ip: String!
  lastAccessed: DateTime!
  sharingUsers: [ManagementUserSimpleNode]!
  status: IPStatusEnum!
}

type ManagementOperationHistoryNode {
  nodes: [ManagementOperationLogNode!]!
  totalNum: Int!
}

type ManagementOperationLogNode {
  address: String!
  browser: String!
  description: String!
  ip: String!
  operation: UserOperationEnum!
  operationTime: DateTime!
  os: String!
}

type ManagementRemoveTagCategoryToTag {
  ok: Boolean!
}

type ManagementRoleNode {
  permissions: [String]
  roleName: String
}

type ManagementScoreListNode {
  nodes: [ManagementScoreNode!]!
  totalNum: Int!
}

type ManagementScoreNode {
  category: UmScoreCategoryEnum!
  date: DateTime!
  description: String!
  extraInfo: String
  id: ID!
  score: Int!
  scoreType: ScoreTypeEnum!
}

type ManagementSetNonofficialTagSimilar {
  ok: Boolean!
}

type ManagementStoreOrderListNode {
  nodes: [ManagementStoreOrderNode!]!
  totalNum: Int!
}

type ManagementStoreOrderNode {
  address: StoreAddressNode
  buckydropPackageCode: String
  buckydropShopOrderId: String
  createDate: DateTime!
  details: JSONString
  id: ID!
  items: String
  note: String
  orderId: String!
  status: UmStoreOrderStatusEnum!
  trackingId: String
  user: ManagementUserSimpleNode
}

type ManagementStripeChargeListNode {
  nodes: [ManagementStripeChargeNode!]!
  totalNum: Int!
}

type ManagementStripeChargeNode {
  amount: Int!
  created: DateTime!
  id: ID!
  invoiceId: ID
  status: StripeChargeStatusEnum!
}

type ManagementTagAdminLogListNode {
  nodes: [ManagementTagAdminLogNode]!
  totalNum: Int
}

type ManagementTagAdminLogNode {
  creationDate: DateTime!
  operateUser: UserNode!
  operationContent: String
  operationType: TagAdminOperationType!
}

type ManagementTagNode {
  tags: [TagNode]!
  totalCount: Int
}

type ManagementTeamMemberListNode {
  nodes: [ManagementTeamMemberNode!]!
  totalNum: Int!
}

type ManagementTeamMemberNode {
  avatar: String
  id: ID!
  lastLoginTime: DateTime
  managementRoles: [String]!
  note: String
  realName: String
  username: String!
}

type ManagementUserDetailNode {
  avatar: String
  banInfo: BanInfoNode
  contestBan: BanInfoNode
  dateJoined: DateTime!
  discussBanned: Boolean
  emails: [EmailNode]
  id: ID!
  isBanned: Boolean
  isDeleted: Boolean
  isInactive: Boolean
  isSpammer: Boolean
  isStaff: Boolean
  isSuperuser: Boolean
  lastLoginTime: DateTime
  managementRoles: [String]!
  otherRoles: [String]!
  premiumInfos: [PremiumInfoNode]
  realName: String
  socialAccounts: [SocialAccountNode!]!
  stripeCredit: Int
  stripeCustomeId: ID
  totalScore: Int!
  username: String!
}

type ManagementUserListNode {
  nodes: [ManagementUserNode!]!
  totalNum: Int!
}

type ManagementUserNode {
  avatar: String
  dateJoined: DateTime!
  emails: [EmailNode]
  id: ID!
  lastLoginTime: DateTime
  premiumInfos: [PremiumInfoNode]
  realName: String
  stripeCustomeId: ID
  username: String!
}

type ManagementUserSimpleNode {
  avatar: String
  email: String
  id: ID!
  realName: String
  username: String!
}

type MarkItemComplete {
  cardId: String
  errors: JSONString
  newProgress: JSONString
  ok: Boolean
}

type MarkItemIncomplete {
  cardId: String
  errors: JSONString
  newProgress: JSONString
  ok: Boolean
}

type MarkSolvedQuestion {
  ok: Boolean!
  progressDetail: PlanUserProgressDetailNode!
}

type MarkSpammers {
  error: String
  ok: Boolean
}

type MedalBriefNode {
  awardDescription: String!
  config: MedalConfigNode!
  name: String!
  obtainDescription: String!
  slug: String!
}

type MedalConfigNode {
  """
  The original image URL of the medal
  """
  icon: String

  """
  GIF URL of the medal
  """
  iconGif: String

  """
  GIF background URL of the medal
  """
  iconGifBackground: String

  """
  URL of the medal wearing picture
  """
  iconWearing: String
}

type MedalNode {
  awardDescription: String!
  config: MedalConfigNode!
  name: String!
  obtainDescription: String!
  shortName: String
  slug: String!
}

type MeNode {
  activeSessionId: Int
  annualReport: AnnualReportNode
  avatar: String
  checkedInToday: Boolean
  completedFeatureGuides: [FeatureGuideType]
  groups: [Group]
  isAdmin: Boolean
  isMockUser: Boolean!
  isPremium: Boolean
  isSignedIn: Boolean
  isStaff: Boolean
  isSuperuser: Boolean
  isTranslator: Boolean
  isVerified: Boolean
  notificationStatus: UserNotificationNode
  optedIn: Boolean
  permissions: [AllPermission]
  realName: String
  region: String
  requestRegion: String
  socketToken: String
  userId: Int
  username: String
  userSlug: String
}

type MigrateDiscussionToSolution {
  ok: Boolean
  topic: TopicNode
}

type MigrateSolutionToDiscussion {
  comment: CommentNode
  ok: Boolean
}

type MockUser {
  ok: Boolean
}

type ModifyIdeDynamicLayout {
  error: String
  layout: IDEDynamicLayoutNode
  ok: Boolean!
}

type MoveTopic {
  categorySlugs: [String!]
  topic: TopicNode
}

type Mutation {
  acceptAchievementReward(achievementName: String!): AcceptAchievementReward
  acceptContribution(comment: String, contributionId: ID): AcceptContribution
  addFavoriteToMyCollectionV2(
    favoriteSlug: String!
  ): AddFavoriteToMyCollectionV2
  addOrUpdateCodeInPlayground(
    code: String
    langSlug: String
    uuid: String
  ): AddOrUpdateCodeInPlayground
  addQuestionToDefaultFavoriteV2(
    questionSlug: String!
  ): AddQuestionToDefaultFavoriteV2
  addQuestionToFavorite(
    favoriteIdHash: String
    questionId: String
  ): AddQuestionToFavorite
  addQuestionToFavoriteV2(
    favoriteSlug: String!
    questionSlug: String!
  ): AddQuestionToFavoriteV2
  addQuestionToNewFavorite(
    isPublicFavorite: Boolean
    name: String
    questionId: String
  ): AddQuestionToNewFavorite
  addQuestionToNewFavoriteV2(
    isPublicFavorite: Boolean!
    name: String!
    questionSlug: String!
  ): AddQuestionToNewFavoriteV2
  addUserToInternalContest(userInput: String): AddUserToInternalContest
  applyTimeTravelTicket(itemId: String): ApplyTimeTravelTicket
  applyTimeTravelTicketV2(
    challengeQuestionId: ID!
    submissionId: ID
  ): ApplyTimeTravelTicketV2
  approveComment(id: Int): ApproveComment
  approveComments(ids: [Int]): ApproveComments
  approveContestReports(reportIds: [String]!): ApproveContestReports
  approveReportedPosts(postIds: [Int]!): ApproveReportedPost
  approveTopic(id: Int): ApproveTopic
  approveTopics(ids: [Int]): ApproveTopics
  archiveUser(reason: String, username: String!): ArchiveUser
  awardInternalContestCoin(
    coins: Int
    contestSlug: String
    userId: Int
  ): AwardInternalContestCoin
  banIp(banTypeSlug: String!, ipAddress: String!): BanIP
  banUser(banTypeSlug: String!, username: String!): BanUser
  batchReviewFlaggedObjects(
    data: BatchReviewFlaggedObjectsInput!
  ): BatchReviewFlaggedObjects
  btsEventNotification(enable: Boolean!): BTSEventNotification
  btsReferralRegister(refer: String!): BTSReferralRegister

  """
  取消注销账户请求
  """
  cancelDeleteAccount: AuthCancelDeleteAccount
  checkin: Checkin
  collectContestEasterEgg: CollectContestEasterEgg
  commentContribution(comment: String, contributionId: ID): CommentContribution
  completeFeatureGuide(guideType: FeatureGuideType!): CompleteFeatureGuide
  completeSurvey(response: JSONString, surveyType: SurveyType!): CompleteSurvey
  confirmSchoolLogo(schoolId: Int!): ConfirmSchoolLogo
  createCodeErrorHint(
    code: String!
    codeOutput: String!
    lang: String!
    questionSlug: String!
    status: Int!
  ): CreateCodeErrorHint
  createComment(
    content: String
    intentionTagSlug: String = ""
    mentionedUserSlugs: [String!]
    parentCommentId: Int = 0
    topicId: Int
  ): CreateComment
  createCompletionLike(
    completionId: ID!
    isLike: Boolean!
  ): CreateCompletionLike
  createContribution(
    contributionType: String
    payload: JSONString
  ): CreateContribution
  createEmail(email: String): CreateEmail
  createIdeDynamicLayout(
    layoutJson: String!
    layoutName: String!
  ): CreateIdeDynamicLayout
  createOrUpdateEmailEvent(data: String, eventId: Int): CreateOrUpdateEmailEvent
  createOrUpdateOfficialSolutionFeedback(
    additionalComment: String
    optionIds: [Int]!
    questionSlug: String!
    score: Int!
  ): CreateOrUpdateEditorialFeedback

  """
  obtain the new annual medals
  """
  createOrUpdateUserYearlyMedals(
    medalSlugs: [String]!
  ): CreateOrUpdateUserYearlyMedals
  createPlayground(
    name: String
    selectedLang: String
    testcaseInput: String
  ): CreatePlayground
  createPlaygroundFolder(folderName: String): CreatePlaygroundFolder
  createTopic(content: String, title: String): CreateTopic
  createTopicForContest(
    content: String
    contestTitleSlug: String
    title: String
  ): CreateTopicForContest
  createTopicForQuestion(
    content: String
    questionId: Int
    tags: [String]
    title: String
  ): CreateTopicForQuestion
  createTopicWithCategory(
    anonymous: Boolean
    categorySlugs: [String]
    content: String
    tags: [String]
    title: String
  ): CreateTopicWithCategory

  """
  user apply to delete account, account gets frozen after success
  """
  deleteAccount(data: DeleteAccountInput!): DeleteAccount
  deleteCodeFromPlayground(
    langSlug: String
    uuid: String
  ): DeleteCodeFromPlayground
  deleteComment(id: Int): DeleteComment
  deleteComments(ids: [Int]): DeleteComments
  deleteEducation(id: Int): DeleteEducation
  deleteEmail(email: String): DeleteEmail
  deleteFavoriteV2(favoriteSlug: String!): DeleteFavoriteV2
  deleteIdeDynamicLayout(layoutId: String!): DeleteIdeDynamicLayout
  deleteNote(titleSlug: String!): DeleteNote
  deleteOccupation(id: Int): DeleteOccupation
  deletePlayground(uuid: String): DeletePlayground
  deletePlaygroundFolder(folder: String): DeletePlaygroundFolder
  deleteReportedPosts(postIds: [Int]!): DeleteReportedPost
  deleteSocial(provider: String): DeleteSocial
  deleteTeamMember(username: String!): DeleteTeamMember
  deleteTopic(id: Int): DeleteTopic
  deleteTopics(ids: [Int]): DeleteTopics
  discountEventRegister(discountEventReferral: String!): DiscountEventRegister
  endDebuggerSession(sessionUuid: String!): EndSession
  executeScript(id: Int!, inputJson: String!): ExecuteScript
  flagPost(content: String, flagType: ReportTypeEnum!, postId: Int!): FlagPost
  flagSetContentStatus(data: ReviewFlaggedObjectInput!): FlagSetContentStatus
  flagSomething(data: FlagInput!): FlagSomething
  forkFavoriteV2(favoriteSlug: String!): ForkFavoriteV2
  getOrCreateExploreSession(cardSlug: String): GetOrCreateExploreSession
  handleUserReports(
    resetAvatar: Boolean = false
    resetUsername: Boolean = false
    userSlug: String
    userSlugs: [String]
  ): HandleUserReports
  hideComments(ids: [Int]): HideComments
  hidePost(hide: Boolean!, postId: Int!): HidePost
  hideTopicFromTrending(hide: Boolean!, topicId: Int!): HideTopicFromTrending
  hideTopics(ids: [Int]): HideTopics
  hitResource(entityId: ID!, entityType: EntityType!): HitResource
  interviewedStatsPost(
    interviewedStats: InterviewedStatsInput!
  ): InterviewedStatsPost
  interviewEnd: InterviewEnd
  interviewStart(cardId: ID!): InterviewStart

  """
  join a study plan
  """
  joinStudyPlan(
    planSlug: String!

    """
    e.g. [1,0,0,1,1,1,0], length should be 7
    """
    weeklyTaskSchedule: [Int!]
  ): JoinStudyPlan
  libraryDefinitionSave(
    codeDefinitions: JSONString
    customLimits: JSONString
    customMatcher: String
    drivers: JSONString
    frontendPreviews: JSONString
    hasFrontendPreview: Boolean
    matchType: Int
    metadata: String
    questionId: ID!
  ): LibraryDefinitionSave
  libraryDraftDelete(questionId: ID!): LibraryDraftDelete
  libraryFrontendQuestionIdChange(
    frontendQuestionId: ID!
    questionId: ID!
  ): LibraryFrontendQuestionIdChange
  libraryGenerateSampleTestcase(
    count: Int!
    expectedOutput: String!
    inputRaw: String!
    questionId: ID!
  ): LibraryGenerateSampleTestcase
  libraryMultiTestcaseSave(
    questionId: ID!
    sampleTestcase: String!
    testcaseList: [LibraryMultiTestcaseInput!]!
  ): LibraryMultiTestcaseSave
  librarySetHide(hide: Boolean!, questionId: ID!): LibrarySetHide
  librarySetPerm(canEdit: Boolean!, questionId: ID!): LibrarySetPerm
  librarySolutionDelete(questionId: ID!, solutionId: ID!): LibrarySolutionDelete
  librarySolutionSave(
    code: String!
    complexity: String!
    expectedStatus: Int!
    isModelSolution: Boolean
    lang: String!
    name: String
    questionId: ID!
    solutionId: ID
  ): LibrarySolutionSave
  librarySolutionsOrderSave(
    questionId: ID!
    solutions: [ID!]
  ): LibrarySolutionsOrderSave
  librarySolutionsSave(
    questionId: ID!
    solutionsInput: [LibrarySolutionsInput]
  ): LibrarySolutionsSave
  libraryStatementSave(
    attachments: [QuestionAttachmentInput!]
    content: String!
    difficulty: Int!
    followup: String!
    questionId: ID
    questionTypes: [Int!]
    title: String!
  ): LibraryStatementSave
  libraryTestcaseSave(
    expectedOutput: String!
    inputRaw: String!
    questionId: ID!
    sampleTestcase: String!
  ): LibraryTestcaseSave
  libraryValidatorSave(
    code: String!
    driver: String!
    note: String!
    questionId: ID!
  ): LibraryValidatorSave
  like(isLike: Boolean, titleSlug: String): Like
  managementAddInterviewedStatVote(
    """
    Add Vote Info
    """
    data: ManagementAddInterviewedStatVoteInput!
  ): ManagementAddInterviewedStatVote
  managementAddOrEditTag(
    """
    Tag Data
    """
    data: ManagementAddOrEditTagInput!

    """
    Tag ID if updating existing tag
    """
    id: ID
  ): ManagementAddOrEditTag
  managementAddOrEditTagCategory(
    """
    Tag Category Data
    """
    data: ManagementAddOrEditTagCategoryInput!

    """
    Existing Tag Category ID for updation
    """
    id: ID
  ): ManagementAddOrEditTagCategory
  managementRemoveTagCategoryToTag(
    tagCategoryId: ID!
    tagId: ID!
  ): ManagementRemoveTagCategoryToTag
  managementSetNonofficialTagSimilar(
    """
    Child Tag / Non-Standard Tag
    """
    childId: ID!

    """
    Parent Tag / Standard Tag
    """
    parentId: ID!
  ): ManagementSetNonofficialTagSimilar
  markItemComplete(itemId: String, submissionId: Int): MarkItemComplete
  markItemIncomplete(itemId: String): MarkItemIncomplete
  markSolvedQuestion(planSlug: String!, titleSlug: String!): MarkSolvedQuestion
  markSpammers(isSpammer: Boolean!, usernames: [String]!): MarkSpammers
  migrateDiscussionToSolution(
    commentId: Int!
    title: String!
  ): MigrateDiscussionToSolution
  migrateSolutionToDiscussion(topicId: Int!): MigrateSolutionToDiscussion
  mockUser(usernameToMock: String): MockUser
  modifyIdeDynamicLayout(
    layoutId: String!
    layoutJson: String
    layoutName: String
  ): ModifyIdeDynamicLayout
  moveTopic(categoryId: Int!, topicId: Int!): MoveTopic

  """
  online management generate favorite
  """
  omGenerateFavorite(
    difficultyTagSlugs: [String!]
    favoriteDescription: String
    favoriteName: String!
    favoriteSlug: String!
    favoriteType: FavoriteTypeEnum!
    isPublic: Boolean!
    knowledgeTagSlugs: [String!]
    languageTagSlug: String
    questionIdListStr: String
  ): OMGenerateFavorite

  """
  online management remove question from favorite
  """
  omRemoveQuestionFromFavorite(
    favoriteSlug: String!
    questionSlug: String!
  ): OMRemoveQuestionFromFavorite

  """
  online management update favorite
  """
  omUpdateFavorite(
    favoriteDescription: String
    favoriteName: String
    favoriteSlug: String
    isPublic: Boolean
    questionIdListStr: String
  ): OMUpdateFavorite
  openNotifications: OpenNotifications
  optInOrOutDynamicLayoutFeature(
    optIn: Boolean!
  ): OptInOrOutDynamicLayoutFeature
  optInOrOutOfPremiumFeature(
    featureId: Int!
    optIn: Boolean!
  ): OptInOrOutPremiumFeature
  performNotificationAction(id: Int): PerformNotificationAction
  planStartProgress(planSlug: String!): StartProgress
  publishContestAnnouncement(content: String): PublishContestAnnouncement
  publishSolution(
    content: String!
    questionSlug: String!
    tags: [String]!
    title: String!
  ): PublishSolution

  """
  quit a study plan
  """
  quitStudyPlan(planSlug: String!): QuitStudyPlan
  rateArticle(contentTypeId: ID!, objectId: ID!, score: Int!): RateArticle
  recordAbExperimentEvent(
    experimentKey: String!
    featureId: String!
    identifierType: String!
    identifierValue: String
    variationId: Int!
    variationValue: String!
  ): RecordABExperimentEvent
  rejectContestReports(reportIds: [String]!): RejectContestReports
  rejectContribution(comment: String, contributionId: ID): RejectContribution
  removeFavoriteFromMyCollectionV2(
    favoriteSlug: String!
  ): RemoveFavoriteFromMyCollectionV2
  removeQuestionFromFavorite(
    favoriteIdHash: String
    questionId: String
  ): RemoveQuestionFromFavorite
  removeQuestionFromFavoriteV2(
    favoriteSlug: String!
    questionSlug: String!
  ): RemoveQuestionFromFavoriteV2
  removeUsersFromInternalContest(userIds: [ID]): RemoveUsersFromInternalContest
  reorderFavoriteQuestionV2(
    favoriteSlug: String!
    moveToBottom: Boolean
    moveToTop: Boolean
    questionSlug: String!
    reorderNewIndex: Int
  ): ReorderFavoriteQuestionV2
  reportUser(message: String = "", userSlug: String!): ReportUser
  requestAnalysisEmail(sessionId: ID!): RequestAnalysisEmail
  requestUpdateToReportedPosts(postIds: [Int]!): RequestUpdateToReportedPost
  resetFavoriteSessionV2(
    deleteSyncedCode: Boolean = false
    favoriteSlug: String!
  ): ResetFavoriteSessionV2
  resetWeeklyTaskSchedule(
    planSlug: String!

    """
    e.g. [1,0,0,1,1,1,0], length should be 7
    """
    weeklyTaskSchedule: [Int!]!
  ): ResetWeeklyTaskSchedule
  rewardPostCoins(id: Int, numCoins: Int, reason: String): RewardPost
  runDebuggerCommand(
    command: JSONString!
    sessionUuid: String!
  ): RunDebuggerCommand
  saveSessionCode(code: String!, questionId: ID!): SaveSessionCode
  sendAccountRecoveryEmail(
    email: String
    userId: String
  ): SendAccountRecoveryEmail
  sendInternalContestEmail(
    content: String
    userIds: [ID]
  ): SendInternalContestEmail
  sendVerificationEmail(email: String): SendVerificationEmail
  setBlacklist(words: String): SetBlacklistWords
  setItemStartTime(itemId: String): SetItemStartTime
  setNotificationSetting(
    channelIdentifier: String
    notificationIdentifier: String
    status: Boolean
  ): SetNotificationSetting

  """
  whether hide current user rank info on rank boards
  """
  setVisibleOnPlanRank(hideOnBoard: Boolean!): SetVisibleOnPlanRank
  startDebuggerSession(
    commands: [JSONString]!
    language: String!
    questionId: String!
    queueName: String
    testcaseInput: String!
    testMode: Boolean
    typedCode: String!
  ): StartSession
  storeAdminCreateOrder(
    input: StoreAdminCreateOrderInput!
  ): StoreAdminCreateOrder
  storeOrderEdit(
    id: ID!
    note: String
    status: UmStoreOrderStatusEnum
    trackingId: String
  ): StoreOrderEdit
  storeOrderSave(
    address: String
    city: String
    country: String
    details: JSONString
    fullName: String
    item: String!
    note: String
    phone: String
    postalCode: String
    province: String
    shirtSize: String
  ): StoreOrderSave

  """
  comment submission complexity
  """
  submissionNoteComplexity(
    complexityType: ComplexityTypeEnum!
    note: String!
    submissionId: ID!
  ): SubmissionNoteComplexity

  """
  vote submission complexity
  """
  submissionVoteComplexity(
    complexityType: ComplexityTypeEnum!
    submissionId: ID!
    vote: ComplexityVoteEnum!
  ): SubmissionVoteComplexity
  submitCancelSurvey(answers: [JSONString!]): SubmitCancelSurvey
  submitQuestionSatisfactionSurvey(
    cancelled: Boolean!
    completedAllQuestions: Boolean!
    completedRequiredQuestions: Boolean!
    surveyResponse: JSONString!
  ): SubmitQuestionSatisfactionSurvey
  submitQuestionSuggestion(
    checkedDictStr: String!
    comment: String
    questionId: Int!
  ): SubmitQuestionSuggestion
  submitSubscriptionSurvey(answers: [JSONString!]): SubmitSubscriptionSurvey
  submitSurveyV2(
    cancelled: Boolean!
    completedAllQuestions: Boolean!
    completedRequiredQuestions: Boolean!
    surveyResponse: JSONString!
    surveySlug: String!
  ): SubmitSurveyV2
  subscribeTopic(subscribe: Boolean, topicId: Int): SubscribeTopic
  subscriptionViewCountIncrement(
    ref: String
    source: String
  ): SubscriptionViewCountIncrement
  tagSearchHit(tagSlug: String!): TagSearchHit
  toggleContestDynamicLayout(enable: Boolean): ToggleContestDynamicLayout
  toggleContestRankingDynamicLayout(
    enable: Boolean
  ): ToggleContestRankingDynamicLayout
  toggleFavorite(cardSlug: String): ToggleFavorite
  toggleFavoriteSolution(
    isFavorite: Boolean!
    topicId: Int!
  ): ToggleFavoriteSolution
  togglePinComment(commentId: Int, pinned: Boolean): TogglePinComment
  togglePinTopic(pinned: Boolean, topicId: Int): TogglePinTopic
  unlockFavorite(favoriteSlug: String!): UnlockFavorite
  unlockShareEvent(cardSlug: String): UnlockShareEvent
  unpublishContestAnnouncement(id: Int): UnpublishContestAnnouncement
  upcSubmitResponse(
    response: JSONString
    type: UPCResponseType!
  ): UPCSubmitResponse
  upcV2SubmitSurvey(data: UpcV2SubmitSurveyInput!): UpcV2SubmitSurvey
  updateAnnualReportViewStatus(viewed: Boolean!): UpdateAnnualReportViewStatus
  updateAvatarStatus(viewedSlugs: [String]): UpdateUserAvatarStatus
  updateBetaParticipation(
    optIn: Boolean!
    participationType: Type = 1
  ): UpdateBetaParticipation
  updateComment(content: String, id: Int): UpdateComment
  updateContribution(
    applicationId: ID
    contributionId: ID
    contributionType: String
    payload: JSONString
  ): UpdateContribution
  updateEducation(
    degree: String
    endTime: String
    id: Int
    schoolName: String
    startTime: String
    toPresent: Boolean
  ): UpdateEducation
  updateEmailPrimary(email: String, password: String): UpdateEmailPrimary
  updateFavoriteEmojiBackgroundV2(
    backgroundColor: String
    emoji: String
    favoriteSlug: String!
  ): UpdateFavoriteEmojiBackgroundV2
  updateFavoriteIsPublicV2(
    favoriteSlug: String!
    isPublic: Boolean!
  ): UpdateFavoriteIsPublicV2
  updateFavoriteNameDescriptionV2(
    description: String
    favoriteSlug: String!
    name: String!
  ): UpdateFavoriteNameDescriptionV2
  updateInvalidUsername(username: String): UpdateInvalidUsername
  updateNote(content: String!, titleSlug: String!): UpdateNote
  updateOccupation(
    companyName: String
    endTime: String
    id: Int
    jobTitle: String
    startTime: String
    toPresent: Boolean
  ): UpdateOccupation
  updatePassword(newPassword: String!, oldPassword: String!): UpdatePassword
  updatePlayground(
    codeSnippetMode: Boolean
    folder: String
    isLive: Boolean
    isShared: Boolean
    name: String
    selectedLang: String
    testcaseInput: String
    uuid: String
  ): UpdatePlayground
  updatePlaygroundFolder(
    newFolderName: String
    oldFolderName: String
  ): UpdatePlaygroundFolder
  updateProblematicPost(
    content: String
    id: Int
    title: String
  ): UpdateProblematicPost
  updateProfile(fieldName: String, value: String): UpdateProfile
  updateProfileV3(
    aboutMe: String
    birthday: String
    company: String
    githubUrl: String
    jobTitle: String
    linkedinUrl: String
    locationId: String
    locationName: String
    realName: String
    school: String
    skillTags: [String]
    website: String
  ): UpdateProfileV3
  updatePublicBadge(badgeId: ID): UpdatePublicBadge
  updateSolution(
    content: String!
    tags: [String]!
    title: String!
    topicId: Int
  ): UpdateSolution
  updateSubmissionNote(
    flagType: SubmissionFlagTypeEnum
    note: String
    submissionId: ID!
    tagIds: [Int]
  ): UpdateSubmissionNote
  updateSyncedCode(
    code: String!
    lang: Int!
    questionId: Int!
  ): UpdateSyncedCode
  updateTeamMember(
    note: String
    roleGroups: [String]!
    username: String!
  ): UpdateTeamMember
  updateTopic(
    content: String
    id: Int
    tags: [String]
    title: String
  ): UpdateTopic
  updateTopicWithCategory(
    categorySlugs: [String]
    content: String
    id: Int
    tags: [String]
    title: String
  ): UpdateTopicWithCategory
  updateUsername(username: String): UpdateUsername
  userManagementApplyForPremiumTrial(
    """
    urls of the images
    """
    attachments: [String!]
    notes: String
    sku: PremiumTrialSku!
    userId: ID
    username: String
  ): UmApplyForPremiumTrial
  userManagementBanIp(
    banTypeSlug: String
    days: Int!
    ip: String!
    reason: String = ""
  ): UmBanIP
  userManagementBanUser(
    banTypeSlug: String
    days: Int!
    reason: String = ""
    userId: ID!
  ): UmBanUser
  userManagementCreateScore(
    description: String!
    score: Int!
    userId: ID!
  ): UmCreateScore
  userManagementDeleteUserCreditCard(id: ID!): UmDeleteUserCreditCard
  userManagementEditIpStatus(ip: String!, status: IPStatusEnum!): UmEditIPStatus
  userManagementSendVerificationEmail(
    email: String!
    userId: ID!
  ): UmSendVerificationEmail
  userManagementSetEmailPrimary(email: String!, userId: ID!): UmSetEmailPrimary
  userUploadSchoolLogo(schoolId: Int!, url: String!): UserUploadSchoolLogo
  votePost(postId: Int, value: Int): VotePost
}

type NewFeatureAnnouncementNode {
  id: ID!
  isShown: Boolean!
  link: String!
  text: String!
}

type NotificationCategoryNode {
  configurableNotificationTypes: [NotificationTypeNode]
  slug: String
  title: String
}

type NotificationConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [NotificationEdge]!
  id: String

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
}

type NotificationDataNode {
  content: String!
  id: ID!
  metadata: JSONString
  notificationSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): NotificationNodeConnection!
  type: String
}

"""
A Relay edge containing a `Notification` and its cursor.
"""
type NotificationEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: NotificationNode
}

type NotificationNode {
  actioned: Boolean!
  creationDate: Int

  """
  The ID of the object.
  """
  id: ID!
  modifiedDate: Int!
  notificationData: NotificationDataNode!
  notificationId: Int
  user: UserNode
}

type NotificationNodeConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [NotificationNodeEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
}

"""
A Relay edge containing a `NotificationNode` and its cursor.
"""
type NotificationNodeEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: NotificationNode
}

type NotificationTypeNode {
  channelSettings: JSONString
  description: String
  identifier: String
  name: String
}

type OccupationRecordNode {
  endTime: String
  id: ID!
  jobTitle: String
  startTime: String
  toPresent: Boolean!
  unverifiedOrganizationName: String
  user: PrivateContestUserNode!
}

type OfficialIDELayoutNode {
  layoutJson: JSONString!
  slug: String!
}

type OfficialSolutionFeedbackBriefNode {
  additionalComment: String
  createdAt: DateTime!
  metaInfo: FeedBackMetaNode!
  rateScore: Int!
  reasonTagIds: [Int!]!
}

type OfficialSolutionFeedbackDetailNode {
  additionalComment: String
  authorName: String!
  createdAt: DateTime!
  feedbackUser: String!
  metaInfo: FeedBackMetaNode!
  questionInfo: QuestionNode
  rateScore: Int!
  reasonTagIds: [Int!]!
}

type OMFavoriteBriefNode {
  author: FavoriteBriefUserNode!
  collectCount: Int!
  coverBackgroundColor: String
  coverEmoji: String
  coverUrl: String
  created: DateTime!
  description: String!
  favoriteType: FavoriteTypeEnum
  forkCount: Int!
  generatedFavoritesInfo: GeneratedFavoritesInfoNode
  generateFromFavoriteSlug: String
  hasCurrentQuestion: Boolean
  isDefaultList: Boolean!
  isPublicFavorite: Boolean!
  lastModified: DateTime!
  lastQuestionAddedAt: DateTime
  name: String!
  questionNumber: Int!
  rule: RuleNode
  slug: String!
  viewCount: Int
}

type OMFavoriteListNode {
  favorites: [OMFavoriteBriefNode!]!
  totalNum: Int!
}

type OMFavoriteLogNode {
  createdAt: DateTime!
  operation: String!
  operator: FavoriteBriefUserNode!
}

type OMFavoriteQuestionListNode {
  questions: [OMFavoriteQuestionNode!]!
  totalNum: Int!
}

type OMFavoriteQuestionNode {
  createdAt: DateTime
  difficulty: DifficultyDescribedEnum!

  """
  出题频率，企业题单专用字段
  """
  frequency: Float
  id: ID!

  """
  whether the question is in the user's favorites
  """
  isInMyFavorites: Boolean!
  paidOnly: Boolean!
  questionFrontendId: String!
  questionStats: JSONString
  status: FavoriteQuestionStatusEnum
  submissionNumFromFav: Int!
  title: String!
  titleSlug: String!
  topicTags: [CommonTagNode!]
  translatedTitle: String
}

type OMGenerateFavorite {
  error: String
  ok: Boolean!
}

type OMRemoveQuestionFromFavorite {
  error: String
  ok: Boolean!
}

type OMUpdateFavorite {
  error: String
  ok: Boolean!
}

type OpenNotifications {
  error: String
  ok: Boolean
}

type OptInOrOutDynamicLayoutFeature {
  error: String
  ok: Boolean!
  optInResult: Boolean
}

type OptInOrOutPremiumFeature {
  error: String
  success: Boolean
}

type OrderOperationLogNode {
  action: String!
  createdAt: DateTime!
  operator: PrivateContestUserNode!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PagifiedCommentNode {
  currentPage: Int!
  data: [CommentNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedContestNode {
  currentPage: Int!
  data: [ContestNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedContributionNode {
  currentPage: Int!
  data: [ContributionNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedOfficialSolutionFeedbackDetailNode {
  currentPage: Int!
  data: [OfficialSolutionFeedbackDetailNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedPostNode {
  currentPage: Int!
  data: [PostNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedQuestionFeedbackNode {
  currentPage: Int!
  data: [QuestionFeedbackNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedQuestionLastSolveNode {
  currentPage: Int!
  data: [QuestionLastSolveNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedQuestionNode {
  currentPage: Int!
  data: [QuestionNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedTopicNode {
  currentPage: Int!
  data: [TopicNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedUserContestStatNode {
  currentPage: Int!
  data: [UserContestStatNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedUserNode {
  currentPage: Int!
  data: [UserNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedUserReportNode {
  currentPage: Int!
  data: [UserReportNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PagifiedVirtualContestScoreNode {
  currentPage: Int!
  data: [VirtualContestScoreNode!]!
  numPerPage: Int!
  pageNum: Int!
  totalNum: Int!
}

type PanelQuestionListNode {
  finishedLength: Int
  hasViewPermission: Boolean!
  panelName: String!
  questions: [PanelQuestionNode!]!
  totalLength: Int
}

type PanelQuestionNode {
  difficulty: DifficultyDescribedEnum!
  id: ID!
  paidOnly: Boolean!
  questionFrontendId: String!
  questionNumber: Int
  score: Int
  status: PanelQuestionStatusEnum
  title: String!
  titleSlug: String!
  topicTags: [CommonTagNode!]
  translatedTitle: String
}

type PerformNotificationAction {
  error: String
  notification: NotificationNode
  ok: Boolean
}

type PlanBriefPlanGroupNode {
  cover: String!
  dailyQuestionNum: String!
  days: String!
  hidden: Boolean!
  name: String!
  slug: String!
}

type PlanBriefProgressNodeWithPlan {
  completedNum: Int!
  daysPassed: Int!
  endAt: Date!
  hasCompleted: Boolean!
  id: ID!
  isAborted: Boolean!

  """
  Study Plan
  """
  plan: PlanBriefStudyPlanNodeWithGroup!
  questionNum: Int!
  startedAt: Date!
}

type PlanBriefStudyPlanNode {
  """
  Whether to get reward
  """
  awarded: Boolean!

  """
  Period (number of days)
  """
  days: Int!

  """
  Medal corresponding to the plan
  """
  medal: MedalNode!
  name: String!
  slug: String!
}

type PlanBriefStudyPlanNodeWithGroup {
  """
  Whether to get reward
  """
  awarded: Boolean!

  """
  Period (number of days)
  """
  days: Int!

  """
  Study Plan Group
  """
  group: PlanBriefPlanGroupNode!

  """
  Medal corresponding to the plan
  """
  medal: MedalNode!
  name: String!
  slug: String!
}

type PlanBriefUserNode {
  realName: String!
  userAvatar: String!
  userName: String
  userSlug: String!
}

type PlanCatalogNode {
  name: String!
  ordering: Int!
  slug: String!
}

type PlanCompletedStatusNode {
  """
  If null, keep polling
  """
  completedStudyPlan: Boolean

  """
  Whether user joined this plan
  """
  joinedStudyPlan: Boolean!
  planProgressDetail: PlanUserProgressDetailNode
}

"""
Used to describe PlanGroup details
"""
type PlanDetailPlanGroupNode {
  cover: String!
  creator: UserNode
  dailyQuestionNum: String!
  days: String!
  desc: String!
  hidden: Boolean!
  name: String!
  ongoingProgress: PlanProgressNode

  """
  All study plans of the planning group
  """
  plans: [PlanStudyPlanNode!]!
  slug: String!
  tags: [CommonTagNode!]!
}

type PlanDetailStudyPlanNode {
  allowedLanguages: JSONString!

  """
  Whether to get reward
  """
  awarded: Boolean!
  dailyQuestionNum: String!

  """
  Period (number of days)
  """
  days: Int!

  """
  Number of easy questions
  """
  easy: Int!

  """
  Number of hard questions
  """
  hard: Int!
  hasPremiumQuestion: Boolean!
  hint: String!

  """
  Medal corresponding to the plan
  """
  medal: MedalNode!

  """
  Number of medium questions
  """
  medium: Int!
  name: String!

  """
  Plan ordering in the study group
  """
  ordering: Int!
  premiumOnly: Boolean!
  slug: String!

  """
  Tasks of the study plan
  """
  tasks: [PlanTaskNode!]!
}

type PlanGroupListNode {
  """
  List of Plan Groups
  """
  data: [PlanGroupNode!]!

  """
  Number of Plan Groups
  """
  total: Int!
}

type PlanGroupNode {
  cover: String!
  dailyQuestionNum: String!
  days: String!
  hidden: Boolean!
  name: String!
  ongoingProgress: PlanProgressNode

  """
  All study plans of the planning group
  """
  plans: [PlanBriefStudyPlanNode!]!
  slug: String!
}

type PlanNextQuestionNode {
  inPremiumSubgroup: Boolean!
  nextQuestion: PlanQuestionBriefNode
}

type PlanProgressNode {
  completedNum: Int!
  daysPassed: Int!
  endAt: Date!
  hasCompleted: Boolean!
  id: ID!
  isAborted: Boolean!
  questionNum: Int!
  startedAt: Date!
}

type PlanProgressNodeWithPlan {
  completedNum: Int!

  """
  Difficulty distribution of completed questions
  """
  completedQuestionsDifficultyDistribution: JSONString!
  daysPassed: Int!
  endAt: Date!
  hasCompleted: Boolean!
  id: ID!
  isAborted: Boolean!

  """
  Study Plan
  """
  plan: PlanDetailStudyPlanNode!
  startedAt: Date!
}

type PlanQuestionBriefNode {
  id: ID!
  questionFrontendId: String!
  title: String!
  titleSlug: String!
  translatedTitle: String
}

type PlanQuestionLightNode {
  difficulty: DifficultyDescribedEnum!
  hasOfficialSolution: Boolean!
  id: ID!
  paidOnly: Boolean!
  questionFrontendId: String!
  solutionInfo: PlanQuestionSolutionInfoNode
  status: PlanQuestionStatusEnum
  title: String!
  titleSlug: String!
  topicTags: [CommonTagNode!]!
  translatedTitle: String
}

type PlanQuestionSolutionInfoNode {
  solutionSlug: String
  solutionTopicId: Int
}

type PlanStudyPlanNode {
  allowedLanguages: JSONString!

  """
  Whether to get reward
  """
  awarded: Boolean!
  dailyQuestionNum: String!

  """
  Period (number of days)
  """
  days: Int!

  """
  Number of easy questions
  """
  easy: Int!

  """
  Number of hard questions
  """
  hard: Int!
  hasPremiumQuestion: Boolean!
  hint: String!

  """
  Medal corresponding to the plan
  """
  medal: MedalNode!

  """
  Number of medium questions
  """
  medium: Int!
  name: String!

  """
  Plan ordering in the study group
  """
  ordering: Int!
  premiumOnly: Boolean!
  slug: String!
}

type PlanStudyPlanNodeWithGroup {
  allowedLanguages: JSONString!

  """
  Whether to get reward
  """
  awarded: Boolean!
  dailyQuestionNum: String!

  """
  Period (number of days)
  """
  days: Int!

  """
  Number of easy questions
  """
  easy: Int!

  """
  Study Plan Group
  """
  group: PlanBriefPlanGroupNode!

  """
  Number of hard questions
  """
  hard: Int!
  hasPremiumQuestion: Boolean!
  hint: String!

  """
  Medal corresponding to the plan
  """
  medal: MedalNode!

  """
  Number of medium questions
  """
  medium: Int!
  name: String!

  """
  Plan ordering in the study group
  """
  ordering: Int!
  premiumOnly: Boolean!
  slug: String!
}

type PlanSubGroupInfoNode {
  name: String!
  premiumOnly: Boolean!
  questionNum: Int!
  questions: [PlanQuestionLightNode!]!
  slug: String!
}

type PlanTaskNode {
  """
  Whether the user can complete this task or not
  """
  canComplete: Boolean!

  """
  Day that task will become available for completion
  """
  day: Int!
  desc: String!

  """
  Whether the task has been completed
  """
  hasComplete: Boolean!

  """
  Sequence of questions in study plan
  """
  ordering: Int!
  question: QuestionNode!
}

type PlanUserProgressBriefNode {
  allCompletedAt: DateTime
  finishedQuestionNum: Int!
  id: ID!
  latestSubmissionAt: DateTime!
  nextQuestionInfo: PlanNextQuestionNode
  plan: StudyPlanBriefNode!
  quittedAt: DateTime
  startedAt: DateTime!
}

type PlanUserProgressDetailNode {
  finishedQuestionNum: Int!
  id: ID!
  status: PlanUserProgressStatusEnum!
  studyPlanDetail: StudyPlanDetailNode!
  weeklyTaskScheduleResettable: Boolean
}

type PlanUserProgressListNode {
  hasMore: Boolean!
  planUserProgresses: [PlanUserProgressBriefNode!]!
  total: Int!
}

type PlaygroundCodeNode {
  code: String!
  lang: PlaygroundCodeLang!
  langSlug: String
  playground: PlaygroundNode!
}

type PlaygroundDatasetNode {
  description: String!
  name: String!
  slug: String!
}

type PlaygroundFolderNode {
  name: String!
  playgroundSet: [PlaygroundNode!]!
  user: PrivateContestUserNode!
}

type PlaygroundNode {
  folder: PlaygroundFolderNode
  isLive: Boolean
  isShared: Boolean
  isUserOwner: Boolean
  modifiedDate: DateTime!
  name: String!
  playgroundcodeSet: [PlaygroundCodeNode!]!
  selectedLang: PlaygroundSelectedLang
  selectedLangSlug: String
  showOpenInPlayground: Boolean
  showRunCode: Boolean
  testcaseInput: String!
  uuid: String!
}

type PlaygroundSnippetNode {
  dependencies: [PlaygroundSnippetNode!]!
  description: String!
  foldingPositions: [Int]
  fullSnippetWithDependencies: String
  functionName: String!
  hasDependencies: Boolean
  hidden: Boolean!
  lang: PlaygroundSnippetsLang!
  langSlug: String
  playgroundsnippetsSet: [PlaygroundSnippetNode!]!
  snippet: String!
}

type PlaygroundStateNode {
  createdNum: Int!
  upperLimitToCreate: Int!
}

type PlaygroundTemplateCodeNode {
  foldingPositions: [Int]
  lang: PlaygroundTemplateCodeLang!
  langSlug: String
  templateCode: String!
}

type PlaygroundTemplateNode {
  codes(langSlug: String = ""): [PlaygroundTemplateCodeNode]
  name: String!
  nameSlug: String!
  templateId: String
  testcaseInput: String!
  user: PrivateContestUserNode!
}

type PointListNode {
  hasNext: Boolean
  points: [ScoreNode]
}

type PostMentionedUser {
  key: String!
  nickName: String!
  username: String!
  userSlug: String!
}

type PostNode {
  anonymous: Boolean!
  asTopic: Boolean
  author: UserNode
  authorAdminOnly: UserNodeAdminOnly
  authorIsModerator: Boolean
  coinRewards: [ScoreNode!]!
  comment: CommentNode
  commentId: Int
  content: String!
  contentPreview: String
  creationDate: Int
  id: Int!
  isHidden: Boolean
  isOwnPost: Boolean
  isReported: Boolean
  mentionedUsers: [PostMentionedUser]
  nodebbPid: Int!
  originalContent: String!
  peek: String
  reports: [ReportInfoNode]
  searchScore: Float!
  status: String
  topic: TopicNode
  topicId: Int
  topicTitle: String
  updationDate: Int
  voteCount: Int!
  voteSet: [VoteNode!]!
  voteStatus: Int
  voteUpCount: Int!
}

type PremiumBetaFeatureNode {
  creationDate: DateTime!
  description: String!
  endsAt: DateTime
  featureId: Int!
  featureUrl: String
  feedbackUrl: String

  """
  Indicates whether a user has access to this feature.
  """
  hasAccess: Boolean
  id: ID!
  imageHeight: Int
  imageUrl: String!
  isEnabled: Boolean!

  """
  Indicates whether a user has opted in for this feature.
  """
  optedIn: Boolean
  order: Int
  startsAt: DateTime
  title: String!
  type: PremiumBetaFeatureType!
  updationDate: DateTime!
}

type PremiumInfoNode {
  gateway: PaymentGateways!
  periodEnd: DateTime!
  periodStart: DateTime!
}

type PricingNode {
  originalPrice: Float
  price: Float
}

type PrivateContestUserNode {
  achievementSet: [AchievementNode!]!
  activeBadge: UserBadgeNode
  archiveduserSet: [ArchivedUserNode!]!
  articlepageSet: [ArticleNode!]!
  badges: [UserBadgeNode!]!
  badgeSet: [UserBadgeNode!]!
  categoryscoreSet: [InterviewTagsCategoryScoreNode!]!
  commentSet: [CommentNode!]!
  companySet: [SponsorNode!]!
  completionSet: [CompletionNode!]!
  contestBadge: UserBadgeNode
  contestreportlccnSet: [ContestReportLCCNNode!]!
  contestreportSet: [ContestReportNode!]!
  contributions: UserContributionNode!
  contributionSet: [ContributionNode!]!
  contributorSet: [ContributorNode!]!
  createdBy(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): LibraryQuestionNodeConnection!
  dateJoined: DateTime!
  debugSession: [DebugSessionNode!]!
  educationrecordSet: [EducationRecordNode!]!
  email: String
  emailaddressSet: [EmailNode!]!
  emails: [EmailNode]
  favoriteSet: [FeaturedQuestionListNode!]!
  firstName: String!
  flagresultSet: [FlagResultNode!]!
  flagSet: [FlagNode!]!
  githubUrl: String
  hasChangedUsernameRecently: Boolean
  hasUsablePassword: Boolean
  id: ID

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  isCurrentUserPremium: Boolean
  isCurrentUserVerified: Boolean
  isDiscussAdmin: Boolean
  isDiscussStaff: Boolean

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  joinedTimestamp: Int!
  languageProblemCount: [LanguageProblemCountNode!]
  lastLogin: DateTime
  lastName: String!
  lastParticipatedContest: ContestNode
  libraryactivitySet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): QuestionActivityNodeConnection!
  linkedinUrl: String
  nameColor: String
  notificationSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): NotificationNodeConnection!
  occupationrecordSet: [OccupationRecordNode!]!
  participatedTimes: Int!
  password: String!
  phone: String
  playgroundfolderSet: [PlaygroundFolderNode!]!
  playgroundSet: [PlaygroundNode!]!
  playgroundtemplateSet: [PlaygroundTemplateNode!]!
  postReport: [ReportInfoNode!]!
  postSet: [PostNode!]!
  problemsSolvedBeatsStats: [ProblemSolvedBeatsNode!]!
  profile: UserProfileNode!
  questionapplicationSet: [ApplicationNode!]!
  questionlastsolveSet: [QuestionLastSolveNode!]!
  questionSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): LibraryQuestionNodeConnection!
  questionsolvesessionSet: [QuestionSolveSessionNode!]!
  questionsuggestionSet: [QuestionFeedbackNode!]!
  reportee: [UserReportNode!]!
  reporter: [UserReportNode!]!
  scoreUser: [ManagementScoreNode!]!
  sessionSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): InterviewSessionNodeConnection!
  socialAccounts: [String!]
  storeaddressSet: [StoreAddressNode!]!
  storeorderoperationlogSet: [OrderOperationLogNode!]!
  storeorderSet: [StoreOrderNode!]!
  submissionCalendar: JSONString!
  submissionSet: [FilteredSubmissionNode!]!
  submitStats: UserSubmitStatsNode!
  submitStatsGlobal: UserSubmitStatsNode!
  tagProblemCounts: TagProblemCountsCategoryNode!
  twitterUrl: String
  upcomingBadges: [UpcomingBadgeNode!]!
  userCalendar(year: Int): UserCalendarNode!
  useripSet: [UserIPNode!]!

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
  userratingSet: [UserRatingNode!]!
  userskilltagSet: [UserSkillTagNode!]!
  usersyncedcodeSet: [SyncedCodeNode!]!
  virtualcontestscoreSet: [VirtualContestScoreNode!]!
  voteSet: [VoteNode!]!
  yearJoined: Int!
}

type ProblemSolvedBeatsNode {
  difficulty: String!
  percentage: Float
}

type ProdTestcase {
  expectedOutput: [String]!
  inputFormatted: [String]!
  inputRaw: [String]!
}

type PublishContestAnnouncement {
  ok: Boolean
}

type PublishSolution {
  error: String
  ok: Boolean
  topic: TopicNode
}

type Query {
  achievement(name: String!): AchievementNode
  achievements: [AchievementNode]
  activeDailyCodingChallengeQuestion: DailyChallengeNodeV2
  activeDiscountEvent: DiscountEventNode
  advertisementByLocation(adLocation: AdLocationEnum!): [AdvertisementNode!]!
  allComments(
    endDate: DateTime
    ip: String
    numPerPage: Int = 20
    orderBy: CommentSortingOption
    pageNo: Int = 1
    reported: ReportedStatus = "ALL"
    reportType: ReportTypeEnum = 200
    search: String
    startDate: DateTime
    status: PostStatus = 1000
    submissionCount: Int
    usernames: String
    wordListType: String
  ): PagifiedCommentNode
  allContests: [ContestNode]
  allContributions(
    category: String = ""
    company: Boolean = false
    numPerPage: Int = 20
    page: Int = 1
    questionCategory: String = ""
    status: String = ""
    title: String = ""
    user: String = ""
  ): PagifiedContributionNode
  allLeetcodePlaygroundTemplates: [PlaygroundTemplateNode]

  """
  query a list of common complexities
  """
  allPinnedComplexitys: [ComplexityInfoNode!]
  allPlaygroundCodes(uuid: String): [PlaygroundCodeNode]
  allPlaygroundDatasets: [PlaygroundDatasetNode]
  allPlaygroundFolders: [PlaygroundFolderNode]
  allPlaygrounds: [PlaygroundNode]
  allPlaygroundSnippets(
    langSlug: String
    query: String
  ): [PlaygroundSnippetNode]
  allPrivateContests: [ContestNode!]
  allProgress: JSONString
  allQuestions(
    containContest: Boolean = false
    containExplore: Boolean = false
    containMain: Boolean = true
  ): [QuestionNode]
  allQuestionsCount: [QuestionCountByDifficultyNode!]!
  allQuestionsRaw(
    containContest: Boolean = false
    containExplore: Boolean = false
    containMain: Boolean = true
  ): [RawQuestionNode]
  allSchoolInfoUrl: String!
  allTopics(
    endDate: DateTime
    ip: String
    numPerPage: Int = 20
    orderBy: TopicSortingOption
    pageNo: Int = 1
    reported: ReportedStatus = "ALL"
    reportType: ReportTypeEnum = 200
    search: String
    startDate: DateTime
    status: PostStatus = 1000
    submissionCount: Int
    usernames: String
    wordListType: String
  ): PagifiedTopicNode
  allUserPlaygroundTemplates: [PlaygroundTemplateNode]
  allUsers(
    avatarStatus: AvatarStatusEnum = 1
    endDate: DateTime
    isAvatarCheck: Boolean = false
    numPerPage: Int = 20
    pageNo: Int = 1
    startDate: DateTime
  ): PagifiedUserNode
  allVirtualContestScores: [VirtualContestScoreNode]
  allVirtualContestScoresPagified(
    numPerPage: Int = 10
    pageNo: Int = 1
  ): PagifiedVirtualContestScoreNode!
  announcements: [DiscussAnnouncementNode!]!
  application(id: ID): ApplicationNode
  applications: [ApplicationNode]
  archivedUsers: [ArchivedUserNode!]!
  article(id: String = "", slug: String = ""): ArticleNode
  blacklist: BlacklistNode
  brightTitle: Boolean
  btsReferral: BTSReferralNode
  cachedTrendingCategoryTopics(first: Int): [TopicNode]
  canSeeOtherSubmissionHistory(userSlug: String!): Boolean!
  card(cardSlug: String): CardNode
  cards(categorySlug: String): [CardNode]
  cardsWithStats: [CardNode]
  categories(slug: String): [CategoryNode]
  categoryTopicList(
    after: String
    before: String
    categories: [String]
    first: Int
    last: Int
    orderBy: TopicSortingOption = ""
    query: String = ""
    skip: Int
    tags: [String]
  ): TopicConnection
  cfTurnstileAppearance: String
  cfTurnstileKey: String
  challenges(
    fromDate: String
    includeFuture: Boolean
    includePast: Boolean
    toDate: String
  ): [CodingChallengeNode!]!
  channels: [ChannelNode]
  chapter(cardSlug: String, chapterId: String): ChapterNode
  chapters(cardSlug: String): [ChapterNode]
  chinaHost: String
  codeWithMemory(
    lang: String!
    memory: Int!
    questionId: Int!
    skip: Int! = 0
  ): SampleCodeNode
  codeWithRuntime(
    lang: String!
    questionId: Int!
    runtime: Int!
    skip: Int! = 0
  ): SampleCodeNode
  comment(id: Int): CommentNode
  commentContext(
    commentId: Int
    numPerPage: Int = 10
    orderBy: String = ""
    topicId: Int
  ): JSONString
  commentReplies(commentId: Int): [CommentNode!]
  commonKeyword(slug: String!): CommonKeywordNode
  companies(search: String): [CompanyNode!]!
  companyTag(slug: String): CompanyTagNode
  companyTags: [CompanyTagNode!]
  contest(titleSlug: String): ContestNode
  contestDetail(contestSlug: String): ContestDetailNode
  contestQuestion(
    contestSlug: String
    questionSlug: String
  ): ContestQuestionDetailNode
  contestQuestionSubmissionList(
    contestSlug: String!
    lang: String
    limit: Int
    offset: Int
    questionSlug: String!

    """
    提交结果
    """
    status: SubmissionStatusEnum
  ): ContestSubmissionListNode
  contestRatingHistogram: [ContestRatingHistogramBarNode!]!
  contestReportApproveSummary(reportIds: [String]!): ContestReportSummaryNode!
  contestReports(contestSlug: String!): [ContestReportNode!]!
  contestReportsLccn(contestSlug: String!): [ContestReportLCCNNode!]!
  contestRootBanners: [ContestRootBannerNode!]!
  contestTopics(
    contestTitleSlug: String = ""
    numPerPage: Int = 10
    orderBy: TopicSortingOption
    pageNo: Int = 1
  ): PagifiedTopicNode
  contribution(id: ID): ContributionNode
  contributions: [ContributionNode]
  createdPublicFavoriteList(userSlug: String!): FavoriteDetailListNode!
  currentContestAnnouncements: [ContestAnnouncementNode]
  currentDailyCodingChallenge: CodingChallengeNode
  currentSubscriptionInfo: CurrentSubscriptionInfo
  currentTimestamp: Float
  dailyChallengeMedal(month: Int, year: Int): MedalNode
  dailyCodingChallenge(month: Int, year: Int): CodingChallengeNode
  dailyCodingChallengeV2(month: Int, year: Int): CodingChallengeNodeV2
  dashboardItem(id: String): ItemNode
  dccSubmissionInfo(submissionId: ID): CodingChallengeSubmissionNode
  dccSubmissionPolling(submissionId: ID): CodingChallengePollingNode
  dccSubmissionPollingV2(
    challengeQuestionId: ID
    submissionId: ID
  ): CodingChallengePollingNode
  debuggerLanguageFeatures: [DebuggerLanguageFeatureNode!]
  defaultSubscriptionPricing: SubscriptionsNode
  deleteUserRequests(input: DeleteUserRequestInput!): DeleteUserRequestListNode!
  didCompleteUpc: Boolean!
  discussCategory(slugs: [String]): DiscussCategoryNode
  discussQuestionTopicTags(
    numTags: Int
    questionId: String
    selectedTags: [String]
    tagType: String
  ): [DiscussTopicTagNode!]!
  educationRecordList: [EducationRecordNode]
  emailEvent(id: Int): EmailEventNode
  emailEvents: [EmailEventNode]
  emailSendSession(id: Int): EmailSendSessionNode
  emailSendSessions: [EmailSendSessionNode]
  emailTemplate(id: Int): EmailTemplateNode
  emailTemplates: [EmailTemplateNode]
  enableContestRankingDynamicLayout: Boolean!
  enableIdeDynamicLayoutFeature: Boolean!
  favorite(name: String!): FavoriteNode
  favoriteCards: [CardNode]
  favoriteDetailV2(favoriteSlug: String!): FavoriteDetailNode

  """
  ac, notac, or null
  """
  favoriteQuestionAcStatus(favoriteSlug: String!, titleSlug: String!): String
  favoriteQuestionList(
    favoriteSlug: String!
    filter: FavoriteQuestionFilterInput
  ): FavoriteQuestionListNode!
  favoritesLists: FavoritesNode
  favoriteSubmitAcProgress(favoriteSlug: String!): FavoriteSubmitACProgressNode

  """
  user progress of a favorite, either his own or collected ones
  """
  favoriteUserQuestionProgressV2(
    favoriteSlug: String!
  ): UserQuestionProgressNodeV2!
  feature: FeatureNode
  featuredContests: [ContestNode!]!
  featuredQuestionLists: [FeaturedQuestionListNode!]!
  feedbackMetaInfoBySlug(slug: String!): FeedBackMetaNode
  filterableCategories: [CategoryType]
  filteredSubmissions(
    inputFilters: String = ""
    numPerPage: Int = 20
    pageNo: Int = 1
  ): FilteredSubmissionOverviewNode
  flagReasons: [FlagReasonNode!]!
  flagResourceType(name: ResourceTypeEnum!): ResourceTypeNode
  frontendQuestionSubmissionResults(
    submissionId: String!
  ): [FrontendQuestionResultNode]!
  globalRanking(page: Int = 1): GlobalRankingNode
  growthbookTest(featureKey: String!): String!
  hasAccessToFavorite(favoriteSlug: String!): AccessToFavoriteNode!
  hasFavoriteSessionReset(favoriteSlug: String!): Boolean!
  hasTakenCancelSurvey: Boolean
  hasTakenSubscriptionSurvey: Boolean
  historyCards: [CardNode]
  htmlArticle(id: String): HtmlArticleNode

  """
  user preference dynamic layouts
  """
  ideDynamicLayouts: [IDEDynamicLayoutNode!]!
  intentionTags: [IntentionTagNode]!
  internalContestAwardedUsers(contestSlug: String): [Int]
  internalContestFeedbackEmail: String
  internalContestRegisterEmail: String

  """
  Used for stuff to create orders manually
  """
  internalStoreItems: [StoreItemNode!]!
  interviewAllSessions(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): InterviewSessionConnection!
  interviewCardList: [InterviewCardNode!]
  interviewCurrentSession: InterviewSessionNode
  interviewed: InterviewSurveyNode
  interviewGlobalStats: InterviewGlobalStatsNode!
  interviewIncompleteCards: [ID!]!
  interviewScoreProgress: [InterviewScoreProgressNode!]!
  interviewSession(id: ID!): InterviewSessionNode
  interviewSubmissions(
    after: String
    before: String
    first: Int
    last: Int
    questionId: ID!
    sessionId: ID!
    skip: Int
  ): InterviewSubmissionConnection!
  isCurrentUserAuthenticated: Boolean
  isEasterEggCollected: Boolean!
  isMyCollectedFavorite(favoriteSlug: String!): Boolean!
  isMyCreatedFavorite(favoriteSlug: String!): Boolean!
  isPremium: Boolean
  isProgressCalculated: Boolean!
  isSolutionTopic(id: Int!): Boolean!
  item(id: String): ItemNode
  items(chapterSlug: String): [ItemNode]
  languageList: [LanguageNode]
  lastAcSubmission(questionSlug: String!): SubmissionDetailsNode
  learningContext(
    currentQuestionSlug: String!
    envType: String
    id: String

    """
    whether to fetch prev/next question
    """
    needQuestion: Boolean = true
  ): LearningContextNode
  learningContextV2(
    categorySlug: String = ""

    """
    新版题单的真实收藏夹slug, 仅在env_type为company, problem-list-v2时有效
    """
    childFavoriteSlug: String = ""
    currentQuestionSlug: String!
    envId: String = ""
    envType: String = ""

    """
    新版题单的过滤条件, 仅在env_type为company, problem-list-v2时有效
    """
    favoriteFilters: FavoriteQuestionFilterInput
    filters: QuestionListFilterInput

    """
    是否需要上下题信息
    """
    needQuestion: Boolean = true

    """
    版本号, 默认为空, 新版企业题单需要传版本号v2
    """
    version: String = ""
  ): LearningContextNodeV3
  libraryActivity(id: String!): QuestionActivityNode
  libraryActivityTypes: [LibraryActivityType!]!
  libraryCategories: [String!]!
  libraryDefaultTemplate(metadata: String!): LibraryTemplate
  libraryDifficulties: [LibraryDifficulty!]!
  libraryLangList: [LibraryLanguage!]!
  libraryMatchTypes: [LibraryMatchType!]!
  libraryQuestion(id: ID!): LibraryQuestionNode
  libraryQuestions(
    after: String
    before: String
    first: Int
    last: Int
    param: LibraryQuestionsInput!
    skip: Int
  ): LibraryQuestionConnection!
  libraryQuestionTypes: [LibraryQuestionType!]!
  librarySolutionStatus: [LibrarySolutionStatus!]!
  localRanking(page: Int = 1): LocalRankingNode
  locationDict: JSONString
  locations(search: String): [LocationAutocomplete]!
  loginSocial: [SocialLoginNode]
  loginUrl: String
  managementCompanyQuestionOptions(
    companyTagId: Int!
  ): CompanyQuestionOptionsNode!
  managementCompanyQuestions(
    data: managementCompanyQuestionsInput!
  ): ManagementCompanyQuestionListNode!
  managementCompanyQuestionV2(
    data: managementCompanyQuestionsV2Input!
  ): CompanyQuestionListNode!

  """
  Company Tag List
  """
  managementCompanyTags(
    data: ManagementCompanyTagsInput!
  ): ManagementCompanyTagNode!
  managementIncVoteLogs(
    data: managementIncVoteLogsInput!
  ): ManagementIncVoteLogListNone!
  managementQuestionAdminVoteOptions: QuestionAdminVoteOptionsNode!
  managementRoles: [ManagementRoleNode!]!
  managementTagAdminLogs(
    limit: Int!
    offset: Int!
    tagId: Int!
  ): ManagementTagAdminLogListNode!

  """
  Tag Category List
  """
  managementTagCategories(
    data: ManagementTagCategoriesInput!
  ): [TagCategoryNode]!

  """
  Tag Group List
  """
  managementTagGroups: [TagGroupNode]!

  """
  Tag List
  """
  managementTags(data: ManagementTagsInput!): ManagementTagNode!
  managementTeamMembers(
    data: ManagementTeamMembersInput!
  ): ManagementTeamMemberListNode!
  matchedUser(username: String!): UserNode
  matchedUsers(limit: Int = 10, namePrefix: String!, topicId: Int): [UserNode]
  medal(slug: String): MedalNode
  mostRecentCard: CardNode
  myCollectedFavoriteList: FavoriteBriefListNode!
  myContests(numPerPage: Int = 10, pageNo: Int = 1): PagifiedUserContestStatNode
  myCreatedFavoriteList(currentQuestionSlug: String): FavoriteBriefListNode!
  myOrders: [StoreOrderNode!]
  myPlaygroundState: PlaygroundStateNode!
  newFeatureAnnouncements: [NewFeatureAnnouncementNode!]
  nextChallengePairs(titleSlug: String): JSONString
  nextSolution(filters: QuestionSolutionsFilterInput!, topicId: Int!): TopicNode
  notification(id: Int): NotificationNode
  notificationCategories: [NotificationCategoryNode]
  notifications(
    after: String
    before: String
    first: Int
    last: Int
  ): NotificationConnection
  notificationStatus: JSONString
  notificationTypes: [NotificationTypeNode]
  occupationRecordList: [OccupationRecordNode]

  """
  official IDE dynamic layout
  """
  officialIdeDynamicLayout: [OfficialIDELayoutNode!]!
  officialSolutionFeedbacks(
    filters: OfficialSolutionFeedbackFilterInput!
    numPerPage: Int
    pageNo: Int
  ): PagifiedOfficialSolutionFeedbackDetailNode
  omFavoriteList(data: OMFavoriteListInput!): OMFavoriteListNode!
  omFavoriteLogs(favoriteSlug: String!): [OMFavoriteLogNode]!
  omFavoriteQuestionList(
    favoriteSlug: String!
    searchKeyword: String
  ): OMFavoriteQuestionListNode!
  ongoingVirtualContest: ContestNode
  orderDetails(orderId: String!): StoreOrderNode
  panelQuestionList(
    categorySlug: String = ""
    currentQuestionSlug: String!
    envId: String = ""
    envType: String = ""
    filters: QuestionListFilterInput
  ): PanelQuestionListNode
  pastContests(numPerPage: Int = 10, pageNo: Int = 1): PagifiedContestNode!
  planCompletedPlans: [PlanStudyPlanNodeWithGroup!]!
  planGroupCatalogs: [PlanCatalogNode!]!
  planGroupDetail(slug: String!): PlanDetailPlanGroupNode
  planGroupsByCatalog(
    catalogSlug: String!
    limit: Int = 5
    skip: Int = 0
  ): PlanGroupListNode!
  planGroupsByTag(
    limit: Int = 5
    skip: Int = 0
    tagSlug: String!
  ): PlanGroupListNode!
  planOngoingProgresses(
    limit: Int = 5
    skip: Int = 0
  ): [PlanBriefProgressNodeWithPlan!]!
  planProgressDetail(id: ID!): PlanProgressNodeWithPlan
  playground(uuid: String): PlaygroundNode
  playgroundCode(langSlug: String, uuid: String): PlaygroundCodeNode
  playgroundSnippet(
    functionName: String
    langSlug: String
  ): PlaygroundSnippetNode
  playgroundTemplate(templateId: String): PlaygroundTemplateNode
  pointList(page: Int): PointListNode
  pollInterval: Int
  post(id: Int): PostNode
  premiumBetaFeatures: [PremiumBetaFeatureNode!]!
  prevSolution(filters: QuestionSolutionsFilterInput!, topicId: Int!): TopicNode
  privateContestAllParticipants: [UserNode!]
  privateContestPastParticipants: [PrivateContestUserNode!]
  privateContestRegisteredUserIds(contestSlug: String): [ID]
  problemsetLearningContext(
    categorySlug: String = ""
    filters: QuestionListFilterInput
    limit: Int = 50
    questionSlug: String!
    skip: Int = 0
  ): LearningContextNodeV2
  question(titleSlug: String): QuestionNode
  questionCompanyTags(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): CompanyTagConnection
  questionDiscussionTopic(questionSlug: String): TopicNode
  questionFeedback(
    categories: [String]
    endDate: String
    hasComment: Boolean
    numPerPage: Int
    pageNo: Int
    questionSlugs: [String]
    reasons: [Int]
    startDate: String
  ): PagifiedQuestionFeedbackNode
  questionFeedbackReasons: [QuestionFeedbackReason!]!
  questionList(
    categorySlug: String
    filters: QuestionListFilterInput
    limit: Int = 50
    skip: Int = 0
  ): PagifiedQuestionNode
  questionNumByTags(
    difficultyTagSlugs: [String!]
    knowledgeTagSlugs: [String!]
    languageTagSlug: String
  ): Int!
  questionSatisfactionSurvey: QuestionSatisfactionSurveyNode!
  questionSolutions(
    filters: QuestionSolutionsFilterInput!
  ): QuestionSolutionsNode!
  questionSubmissionList(
    lang: Int
    lastKey: String
    limit: Int
    offset: Int
    questionSlug: String!
    status: Int
    withNotes: Boolean
  ): SubmissionListNode
  questionTag(tagId: ID!): QuestionTagNode
  questionTagsAdmin(tagType: TagTypeEnum!): [QuestionTagNode!]
  questionTagsSuggest(search: String = ""): [String]
  questionTopics(
    numPerPage: Int = 10
    orderBy: TopicSortingOption
    pageNo: Int = 1
    query: String = ""
    questionId: Int = -1
  ): PagifiedTopicNode
  questionTopicsList(
    after: String
    before: String
    first: Int = 0
    last: Int
    orderBy: TopicSortingOption
    query: String
    questionId: String
    questionSlug: String
    skip: Int
    tags: [String]
  ): TopicConnection
  questionTopicTags(
    after: String
    before: String
    first: Int
    last: Int
    skip: Int
  ): TopicTagConnection
  randomPanelQuestion(
    categorySlug: String = ""

    """
    新版题单的真实收藏夹slug, 仅在env_type为company, problem-list-v2时有效
    """
    childFavoriteSlug: String = ""
    currentQuestionSlug: String!
    envId: String = ""
    envType: String = ""

    """
    新版题单的过滤条件, 仅在env_type为company, problem-list-v2时有效
    """
    favoriteFilters: FavoriteQuestionFilterInput
    filters: QuestionListFilterInput

    """
    版本号, 默认为空, 新版企业题单需要传版本号v2
    """
    version: String = ""
  ): String
  randomQuestion(
    categorySlug: String
    filters: QuestionListFilterInput
  ): QuestionNode
  recaptchaKey: String
  recaptchaKeyV2: String
  recentAcSubmissionList(limit: Int, username: String): [SubmissionDumpNode!]
  recentSubmissionList(limit: Int, username: String): [SubmissionDumpNode!]
  recommendSolutionTags(questionSlug: String!): [SolutionTagNode]!
  redeemedTimeTravelTicketCount: Int!
  relatedSolutions(topicId: Int!): [TopicNode]!
  rewindData(year: Int): RewindNode
  rootCategory: [DiscussCategoryNode!]!
  schools(search: String): [SchoolNode!]!
  scripts: [ScriptNode!]
  scriptTaskResult(taskId: String!): JSONString
  sessions: DebugSessionNode
  showAnnualModalOnQd(submissionId: Int): MedalNode
  siteAnnouncements: [SiteAnnouncementNode]
  siteRegion: String
  sitewideAnnouncement: String
  skillTags(search: String): [SkillTagNode]
  solutionLanguageTags(questionSlug: String): [SolutionTagNode]!
  solutionTopicTags(questionSlug: String): [SolutionTagNode]!
  solvedQuestionsInfo(
    filters: ProgressListFilterInput
    numPerPage: Int = 10
    pageNo: Int = 1
  ): PagifiedQuestionLastSolveNode!
  spamModerationPosts(
    endDate: DateTime
    ip: String
    numPerPage: Int = 20
    orderBy: String
    pageNo: Int = 1
    reported: ReportedStatus = "ALL"
    reportType: ReportTypeEnum = 200
    search: String
    startDate: DateTime
    status: PostStatus = 1000
    submissionCount: Int
    usernames: String
    wordListType: String
  ): PagifiedPostNode
  statusList: [SubmissionStatusNode]
  storeItems: [StoreItemNode!]!
  storeOrderOperationLogs(orderId: ID!): [OrderOperationLogNode!]!
  streakCounter: StreakCounterNode
  stripePublicKey: String!
  studyPlanMedalPolling(submissionId: Int): StudyPlanMedalPollingNode

  """
  get advertisement study plans of feature on playground
  """
  studyPlansV2AdFeature: [StudyPlanFeatureNode!]!

  """
  get advertisement study plans on questions page
  """
  studyPlansV2AdQuestionPage: [StudyPlanBriefNode!]!

  """
  get study plans by catalog
  """
  studyPlansV2ByCatalog(
    catalogSlug: String!

    """
    default value is 6
    """
    limit: Int = 6
    offset: Int = 0
  ): StudyPlanListNode!

  """
  get study plans by tag
  """
  studyPlansV2ByTag(
    """
    default value is 6
    """
    limit: Int = 6
    offset: Int = 0
    tagSlug: String!
  ): StudyPlanListNode!

  """
  get study plans by upc
  """
  studyPlansV2ByUpc: [StudyPlanBriefNode!]!

  """
  get study plans for homepage
  """
  studyPlansV2ForHomepage: [StudyPlanWithProgressNode!]!

  """
  get all enabled study plan catalogs
  """
  studyPlanV2Catalogs: [StudyPlanCatalogNode!]!

  """
  Poll this API after submission get AC.
  """
  studyPlanV2CompletedStatus(
    planSlug: String!
    submissionId: ID!
  ): PlanCompletedStatusNode

  """
  get a study plan detail
  """
  studyPlanV2Detail(planSlug: String!): StudyPlanDetailNode

  """
  get a user progress detail
  """
  studyPlanV2ProgressDetail(
    """
    user progress ID
    """
    id: ID = ""
    planSlug: String!
  ): PlanUserProgressDetailNode

  """
  get the ranking board of a study plan
  """
  studyPlanV2RankingBoard(
    """
    default value is 10
    """
    limit: Int = 10
    offset: Int = 0
    planSlug: String!
  ): UserRankInfoList!

  """
  get the most recent user completed progress detail
  """
  studyPlanV2RecentCompletedProgress(
    planSlug: String!
  ): PlanUserProgressDetailNode

  """
  whether the current user hide on the rank board
  """
  studyPlanV2UserHideRank: Boolean

  """
  user on going study plans
  """
  studyPlanV2UserProgresses(
    """
    default 6, no more than100
    """
    limit: Int = 6
    offset: Int = 0
    progressType: PlanUserProgressTypeEnum!
  ): PlanUserProgressListNode

  """
  get current user rank in a plan
  """
  studyPlanV2UserRank(planSlug: String!): UserRankInfoNode

  """
  get weekly task records by year and month
  """
  studyPlanV2WeeklyTaskRecords(
    """
    records of the month
    """
    month: Int!
    planSlug: String!

    """
    user progress obfuscated id
    """
    progressId: String

    """
    records of the year
    """
    year: Int!
  ): UserWeeklyTaskRecordListNode

  """
  query submission complexity
  """
  submissionComplexity(submissionId: ID!): SubmissionComplexityNode
  submissionDetails(submissionId: Int!): SubmissionDetailsNode
  submissionList(
    lastKey: String
    limit: Int
    offset: Int
    questionSlug: String
  ): SubmissionListNode
  submittableLanguageList: [LanguageNode]
  subscribeUrl: String
  subscriptionPricing(code: String): SubscriptionsNode
  subscriptionReferral: SubscriptionReferralNode
  survey(surveyId: ID!): SurveyNode
  surveyStatus(surveyType: SurveyType!): SurveyStatusNode!
  surveyV2(surveyKwargs: JSONString, surveySlug: String!): SurveyV2Node!
  surveyV2WithoutCheckFunc(surveySlug: String!): SurveyV2Node!
  syncedCode(lang: Int!, questionId: Int!): SyncedCodeNode
  tagTopicList(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: TopicSortingOption = ""
    query: String = ""
    skip: Int
    tag: String!
    tags: [String]
  ): TopicConnection
  topic(id: Int): TopicNode
  topicComments(
    numPerPage: Int = 10
    orderBy: String
    pageNo: Int = 1
    topicId: Int!
  ): PagifiedCommentNode
  topicTag(slug: String): TopicTagNode
  topicTags(
    categorySlugs: [String]
    numTags: Int
    query: String = ""
    selectedTags: [String]
    tagType: String
  ): [DiscussTopicTagNode!]!
  topicTagsSuggest(search: String = ""): [DiscussTopicTagNode!]!
  topicUsers(prefix: String, topicId: Int): [UserNode]!
  topTwoContests: [ContestNode]!
  upcomingContests: [ContestNode!]
  upcV2InterestTags: [UpcV2TagNode!]
  user: UserNode
  userAccountFrozenInfo: UserAccountFrozenInfoNode!
  userCategoryTopics(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: TopicSortingOption = ""
    skip: Int
    username: String
  ): TopicConnection
  userContestRanking(username: String): UserContestRankingNode
  userContestRankingHistory(username: String): [UserContestRankingHistoryNode!]
  userCountryCode: String
  userManagementCreditCards(userId: ID!): [ManagementCreditCardNode]!
  userManagementIpList(data: UserManagementIpListInput!): ManagementIpListNode!
  userManagementIpManagementLogs(ipAddress: String!): [IPManagementLogNode!]
  userManagementLogsByManager(userSlug: String!): [UserManagementLogNode!]
  userManagementOperationHistory(
    data: UserManagementOperationHistoryInput!
  ): ManagementOperationHistoryNode!
  userManagementPremiumTrialRecordDetail(id: ID!): TrialRecordNode!
  userManagementPremiumTrialRecords(
    data: PremiumTrialRecordsInput!
  ): TrialRecordListNode!
  userManagementScoreHistory(
    data: UserManagementScoreHistoryInput!
  ): ManagementScoreListNode!
  userManagementSearch(
    dimension: SearchDimensionType!
    keyword: String!
    limit: Int! = 10
    skip: Int!
  ): ManagementUserListNode
  userManagementStoreOrders(
    data: UserManagementStoreOrdersInput!
  ): ManagementStoreOrderListNode!
  userManagementStripeCharges(
    data: UserManagementStripeChargesInput!
  ): ManagementStripeChargeListNode!
  userManagementUserBanTypes: [UserBanTypeNode]!
  userManagementUserDetail(userId: ID!): ManagementUserDetailNode
  userManagementVac(data: VacRecordsInput!): VacRecordListNode!
  userOfficialSolutionFeedback(
    questionSlug: String!
  ): OfficialSolutionFeedbackBriefNode

  """
  获取用户当前 session 的做题进展，新版接口
  """
  userProfileUserQuestionProgressV2(
    userSlug: String!
  ): UserQuestionProgressNodeV2!
  userRecentTopics(limit: Int, username: String): [TopicNode!]
  userReports(
    endDate: DateTime
    handled: Boolean
    numPerPage: Int = 20
    pageNo: Int = 1
    startDate: DateTime
  ): PagifiedUserReportNode
  users(usernamePrefix: String): [UserNode]
  userSolutionTopics(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: TopicSortingOption = ""
    skip: Int
    username: String
  ): TopicConnection
  userStatus: MeNode
  userToManage(usernameOrEmail: String): UserNodeAdminOnly
  validTimeTravelTicketCount: Int!
  video(id: String): VideoNode
  votes(topicId: Int): JSONString
  webPage(id: String): WebPageNode
  websocketUrl: String
  wordListTypes: [WordListTypeNode]!
  worldCities(country: String, subcountry: String): [String!]
  worldCountries: [String!]
  worldSubcountries(country: String): [String!]

  """
  list of yearly medals which are qualified to acquire
  """
  yearlyMedalsQualified(excludeAcquired: Boolean = true): [MedalBriefNode!]
}

type QuestionActivityNode {
  activityType: LibraryActivityType!
  dateCreated: DateTime!

  """
  The ID of the object.
  """
  id: ID!
  isBaseline: Boolean!
  payload: String
  question: LibraryQuestionNode!
  user: PrivateContestUserNode
}

type QuestionActivityNodeConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [QuestionActivityNodeEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
}

"""
A Relay edge containing a `QuestionActivityNode` and its cursor.
"""
type QuestionActivityNodeEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: QuestionActivityNode
}

type QuestionAdminVoteOptionsNode {
  positionOptions: [CommonTagNode]
  timeOptions: [InterviewTimeOption]
}

type QuestionAttachmentNode {
  content: String!
  extension: String!
  name: String!
}

type QuestionCountByDifficultyNode {
  count: Int!
  difficulty: String!
}

type QuestionCountNode {
  count: Int!
  difficulty: DifficultyDescribedEnum!
}

type QuestionFeedbackNode {
  createDate: DateTime!
  extraInfo: String!
  hasComment: Boolean
  id: ID!
  question: QuestionNode!
  reasonChoices: JSONString!
  user: PrivateContestUserNode!
}

type QuestionFeedbackReason {
  id: Int!
  name: String!
}

type QuestionLastSolveNode {
  lastAcSession: QuestionSolveSessionNode
  question: QuestionNode!
  totalSolves: Int!
}

type QuestionNode {
  acRate: Float
  adminUrl: String
  allowDiscuss: Boolean
  article: JSONString
  articleTopicId: String
  attachments: [QuestionAttachmentNode!]!
  boundTopicId: Int
  canSeeQuestion: Boolean!
  categoryTitle: String
  challengeQuestion: ChallengeQuestionNode
  challengeQuestionsV2: [ChallengeQuestionNode!]!
  codeDefinition: JSONString
  codeSnippets: [CodeSnippetNode]
  companyTags: [CompanyTagNode!]
  companyTagStats: JSONString
  companyTagStatsV2: JSONString
  content: String
  contributors: [ContributorNode]
  dataSchemas: [String]
  difficulty: String

  """
  discussion count for one question, 0 if no question exist
  """
  discussionCount: Int
  dislikes: Int
  enableDebugger: Boolean
  enableRunCode: Boolean
  enableSubmit: Boolean
  enableTestMode: Boolean
  envInfo: String
  exampleTestcaseList: [String]!
  exampleTestcases: String
  freqBar: Float
  frequency: Float!
  frontendPreviews: JSONString
  hasFrontendPreview: Boolean!
  hasSolution: Boolean!
  hasVideoSolution: Boolean!
  hide: Boolean
  hideLastTestcases: HideLastTestcasesNode
  hints: [String]
  infoVerified: Boolean
  interpretUrl: String
  isFavor: Boolean!
  isLiked: Boolean
  isPaidOnly: Boolean
  judgerAvailable: Boolean
  judgeType: String
  langToValidPlayground: JSONString
  libraryUrl: String
  likes: Int
  metaData: String
  mysqlSchemas: [String]
  nextChallengePairs(questionId: String): JSONString
  nextChallenges: [QuestionNode!]
  note: String
  questionDetailUrl: String
  questionFrontendId: String
  questionId: String
  questionTitle: String
  questionTitleSlug: String
  questionType: String
  randomQuestionUrl: String
  sampleTestCase: String
  sessionId: String
  similarQuestionList: [QuestionNode]!
  similarQuestions: JSONString
  solution: ArticleNode

  """
  solution for one question, 0 if no question exist
  """
  solutionNum: Int
  stats: JSONString
  status: String
  submitUrl: String
  title: String!
  titleSlug: String!
  topicTags: [TopicTagNode!]
  translatedContent: String
  translatedTitle: String
  urlManager: JSONString
}

type QuestionSatisfactionSurveyNode {
  leetcoinAmount: Int!
  showSurvey: Boolean!
  surveyJson: JSONString
}

type QuestionSolutionsNode {
  hasDirectResults: Boolean
  solutions: [TopicNode]!
  totalNum: Int
}

type QuestionSolveSessionNode {
  question: QuestionNode!
  time: DateTime
  wrongAttempts: Int!
}

type QuestionTagNode {
  createdAt: DateTime!
  id: ID!

  """
  Deprecated in Tag System. Still used by old products.
  """
  isEnabled: Boolean!
  keywords: [String!]!
  name: String!
  questions: [QuestionTagStatsNode!]!
  slug: String!
}

type QuestionTagStatsNode {
  frontendId: ID!
  id: ID!
  interviewedCount: Int!
  title: String!
}

"""
quit a study plan
"""
type QuitStudyPlan {
  """
  whether delete this progress record
  """
  deleted: Boolean!
  ok: Boolean!
  progressId: String!
}

type RankingNode {
  currentGlobalRanking: Int
  currentRating: String
  dataRegion: String
  ranking: String
  user: UserNode
}

type RateArticle {
  error: String
  ok: Boolean
  scoreResult: Int
}

type RatingNode {
  average: Decimal!
  count: Int!
  id: ID!
  userRating: UserRatingNode
}

type RawQuestionNode {
  categoryTitle: String
  difficulty: String
  isPaidOnly: Boolean
  questionFrontendId: String
  questionId: String
  status: String
  title: String
  titleSlug: String
  translatedTitle: String
}

type RecordABExperimentEvent {
  error: String
  ok: Boolean!
}

type RejectContestReports {
  rejectedReports: [ContestReportNode!]!
}

type RejectContribution {
  contribution(id: ID): ContributionNode
  error: String
  ok: Boolean
}

type RemoveFavoriteFromMyCollectionV2 {
  error: String
  ok: Boolean!
}

type RemoveQuestionFromFavorite {
  error: String
  favoriteIdHash: String
  ok: Boolean
  questionId: String
  userName: String
}

type RemoveQuestionFromFavoriteV2 {
  error: String
  ok: Boolean!
}

type RemoveUsersFromInternalContest {
  ok: Boolean
}

type ReorderFavoriteQuestionV2 {
  error: String
  ok: Boolean!
}

type ReportInfoNode {
  content: String!
  id: ID!
  isHandled: Boolean
  reporter: PrivateContestUserNode!
  reportType: String
}

type ReportUser {
  error: String
  ok: Boolean
}

type RequestAnalysisEmail {
  sessionWithReport: InterviewSessionNode
}

type RequestUpdateToReportedPost {
  error: String
  ok: Boolean
}

type ResetFavoriteSessionV2 {
  error: String
  ok: Boolean!
}

type ResetWeeklyTaskSchedule {
  ok: Boolean!
  progressId: String!
}

type ResourceTypeNode {
  flaggedObjects(
    after: String
    before: String
    first: Int
    last: Int
    order: SortingOrderEnum
    orderBy: FlaggedObjectListOrderByEnum
    skip: Int
    status: FlagStatus
  ): FlaggedObjectConnection!
  name: ResourceTypeEnum!
  operations: [FlagStatus!]
}

type RewardPost {
  error: String
  post: PostNode
}

type RewindNode {
  ageInDays: Int!
  attendedContestCount: Int!
  badges: [UserBadgeNode]
  currentGlobalRank: Int
  dccSolvedCount: Int!
  easyProblemsSolved: Int!
  givenVoteDownCount: Int!
  givenVoteUpCount: Int!
  hardProblemsSolved: Int!
  highestRankedContest: ContestNode
  highestRankedContestId: Int!
  highestRankingInContest: Int
  id: ID!
  maxStreak: Int!
  mediumProblemsSolved: Int!
  mostAttemptedQuestion: QuestionNode
  mostAttemptedQuestionId: Int!
  mostSolvedTags: [String]
  mostUsedLanguage: String!
  mostUsedLanguageId: Int!
  problemSolvePercentile: Float!
  receivedVoteUpCount: Int!
  solutionsPublished: Int!
  tags: String!
  totalAcSubmissions: Int!
  totalQuestionsSolved: Int
  totalSubmissions: Int!
  userId: Int!
  year: Int!
}

type RuleNode {
  difficultyNames: [String]!
  knowledgeNames: [String]!
  languageName: String!
}

type RunDebuggerCommand {
  session: DebugSessionNode!
  taskId: String!
}

type SampleCodeNode {
  code: String!
  hasNext: Boolean!
  hasPrevious: Boolean!
}

type SaveSessionCode {
  session: InterviewSessionNode
}

type SchoolNode {
  colloquial: String!
  id: ID!
  name: String!
  slug: String!
}

type ScoreNode {
  category: ScoreCategory!
  date: DateTime!
  description: String!
  extraInfo: String
  id: ID!
  score: Int!
}

type ScriptNode {
  content: String!
  creationDate: DateTime!
  description: String!
  id: ID!
  inputSample: String!
  name: String!
  updationDate: DateTime!
}

type SearchMetaNode {
  commentAuthor: UserNode
  content: String
  contentType: SearchMetaContentType!
  highlights: [String]!
  replyAuthor: UserNode
}

type SendAccountRecoveryEmail {
  message: String
  ok: Boolean
}

type SendInternalContestEmail {
  error: String
  ok: Boolean
}

type SendVerificationEmail {
  ok: Boolean
}

type SetBlacklistWords {
  error: String
  ok: Boolean
}

type SetItemStartTime {
  cardId: String
  errors: JSONString
  newProgress: JSONString
  ok: Boolean
}

type SetNotificationSetting {
  error: String
  notificationType: NotificationTypeNode
  ok: Boolean
}

"""
whether hide current user rank info on rank boards
"""
type SetVisibleOnPlanRank {
  ok: Boolean!
}

type ShareEventNode {
  endDate: Date!
  hasUserSharedEvent: Boolean!
  startDate: Date!
}

type SiteAnnouncementNode {
  blacklistUrls: String
  content: String!
  navbarItem: String
  title: String
  whitelistUrls: String
}

type SkillTagNode {
  name: String!
}

type SocialAccountNode {
  accountProvider: String!
  profileLink: String
}

type SocialLoginNode {
  id: String
  loginUrl: String
}

type SolutionTagNode {
  count: Int!
  name: String!
  slug: String!
}

type SponsorNode {
  darkLogo: String
  description: String!
  lightLogo: String
  logo: String
  name: String!
  watermark: String
  website: String!
}

type StartProgress {
  progress: PlanProgressNode
}

type StartSession {
  session: DebugSessionNode!
  taskId: String!
}

type StoreAddressNode {
  address: String!
  city: String!
  country: String!
  createDate: DateTime!
  creationDate: DateTime!
  fullName: String!
  id: ID!
  phone: String!
  postalCode: String!
  province: String!
  storeorderSet: [StoreOrderNode!]!
  updationDate: DateTime!
  user: PrivateContestUserNode
}

type StoreAdminCreateOrder {
  error: String
  ok: Boolean
}

type StoreItemNode {
  available: Boolean!
  buckydropConfig: String
  creationDate: DateTime!
  description: String!
  disabledMsg: String
  displayConfig: JSONString
  fields: [String!]
  hideIfPaid: Boolean!
  id: ID!
  img: String
  imgSlug: String
  itemSlug: String!
  name: String!
  needsProcessing: Boolean!
  needsShipping: Boolean!
  order: Int!
  promoImg: String
  promoImgSlug: String
  show: Boolean
  storeorderSet: [StoreOrderNode!]!
  updationDate: DateTime!
  value: Int!
  visible: Boolean!
}

type StoreOrderEdit {
  error: String
  ok: Boolean
}

type StoreOrderNode {
  address: StoreAddressNode
  buckydropPackageCode: String
  buckydropShopOrderId: String
  createDate: DateTime!
  creationDate: DateTime!
  details: String
  id: ID
  items: [StoreItemNode!]!
  note: String!
  orderId: String!
  status: String!
  storeorderoperationlogSet: [OrderOperationLogNode!]!
  trackingId: String!
  updationDate: DateTime!
  user: UserNode
}

type StoreOrderSave {
  error: String
  storeOrder: StoreOrderNode
  success: Boolean!
}

type StreakCounterNode {
  currentDayCompleted: Boolean!
  daysSkipped: Int!
  hasCompletedChallenge: Boolean!
  streakCount: Int!
}

type StudyPlanAwardNode {
  badge: UserBadgeNode!
  medal: MedalNode!
}

type StudyPlanBriefNode {
  cover: String!
  highlight: String!
  name: String!
  onGoing: Boolean!
  premiumOnly: Boolean!
  questionNum: Int!
  slug: String!
}

type StudyPlanCatalogNode {
  name: String!
  recommendedStudyPlans: [String!]
  slug: String!
}

type StudyPlanDetailNode {
  allowedLanguages: [String!]!
  award: MedalNode
  awardDescription: String!
  colorPalette: String
  cover: String!
  defaultLanguage: String
  description: String!
  hasMedal: Boolean!
  highlight: String!
  name: String!
  needShowTags: Boolean!
  onGoing: Boolean!
  planSubGroups: [PlanSubGroupInfoNode!]!
  premiumOnly: Boolean!
  questionNum: Int!
  relatedStudyPlans: [StudyPlanBriefNode!]!
  slug: String!
  staticCoverPicture: String!
  threeDimensionUrl: String
}

type StudyPlanFeatureNode {
  cover: String!
  coverBackgroundColor: String!
  highlight: String!
  name: String!
  onGoing: Boolean!
  premiumOnly: Boolean!
  questionNum: Int!
  slug: String!
}

type StudyPlanListNode {
  hasMore: Boolean!
  studyPlans: [StudyPlanBriefNode!]!
  total: Int!
}

type StudyPlanMedalPollingNode {
  awards: [StudyPlanAwardNode]
  keepPolling: Boolean!
}

type StudyPlanWithProgressNode {
  cover: String!
  finishedQuestionNum: Int
  highlight: String!
  name: String!
  onGoing: Boolean!
  premiumOnly: Boolean!
  questionNum: Int!
  slug: String!
}

type SubmissionComplexityNode {
  isLimited: Boolean!
  memoryComplexity: ComplexityInfoNode
  timeComplexity: ComplexityInfoNode
}

type SubmissionCountNode {
  count: Int!
  difficulty: String!
  submissions: Int!
}

type SubmissionDetailsNode {
  code: String!
  codeOutput: String
  compileError: String
  expectedOutput: String
  flagType: SubmissionFlagTypeEnum
  fullCodeOutput: [String]
  id: Int
  lang: LanguageNode!
  lastTestcase: String
  memory: Int
  memoryDisplay: String!
  memoryDistribution: String!
  memoryPercentile: Float
  notes: String!
  question: QuestionNode!
  runtime: Int
  runtimeDisplay: String!
  runtimeDistribution: String!
  runtimeError: String
  runtimePercentile: Float
  statusCode: Int!
  stdOutput: String
  testBodies: [String]
  testDescriptions: [String]
  testInfo: [String]
  timestamp: Int!
  topicTags: [TopicTagNode]!
  totalCorrect: Int
  totalTestcases: Int
  user: UserNode!
}

type SubmissionDumpNode {
  flagType: SubmissionFlagTypeEnum
  hasNotes: Boolean
  id: ID
  isPending: String
  lang: String
  langName: String
  langVerboseName: String
  memory: String
  notes: String
  runtime: String
  status: Int
  statusDisplay: String
  time: String
  timestamp: String
  title: String
  titleSlug: String
  topicTags: [TopicTagNode]
  url: String
}

type SubmissionListNode {
  hasNext: Boolean
  lastKey: String
  submissions: [SubmissionDumpNode]
}

type SubmissionNoteComplexity {
  ok: Boolean
}

type SubmissionStatusNode {
  id: Int
  name: String
}

type SubmissionVoteComplexity {
  ok: Boolean
}

type SubmitCancelSurvey {
  error: String
}

type SubmitQuestionSatisfactionSurvey {
  error: String
  ok: Boolean!
}

type SubmitQuestionSuggestion {
  msg: String
}

type SubmitSubscriptionSurvey {
  error: String
}

type SubmitSurveyV2 {
  error: String
  ok: Boolean!
}

type SubscribeTopic {
  error: String
  ok: Boolean
  subscribe: Boolean
  topic: TopicNode
}

type SubscriptionPricingNode {
  canPurchaseCredit: Boolean
  couponCode: String
  discount: Float!
  discountedPrice: Float!
  discountPercent: Float!
  isEligibleForIndiaDiscount: Boolean!
  isValidCode: Boolean!
  originalPrice: Float!
  proration: Float!
}

type SubscriptionReferralNode {
  link: String!
  referredCount: Int!
}

type SubscriptionsNode {
  monthlyPrice: SubscriptionPricingNode!
  yearlyPrice: SubscriptionPricingNode!
}

type SubscriptionViewCountIncrement {
  error: String
  ok: Boolean
}

type SurveyNode {
  createDate: DateTime!
  description: String!
  endDate: DateTime
  id: ID!
  isActive: Boolean!
  startDate: DateTime!
  surveyQuestions: [SurveyQuestionNode!]
  surveyquestionSet: [SurveyQuestionNode!]!
  title: String!
}

type SurveyQuestionChoiceNode {
  allowTextAnswer: Boolean!
  description: String!
  id: ID!
  surveyQuestion: SurveyQuestionNode!
  value: String!
}

type SurveyQuestionNode {
  choices: [SurveyQuestionChoiceNode!]
  description: String!
  extra: JSONString!
  id: ID!
  isRequired: Boolean!
  questionType: SurveyQuestionQuestionType!
  survey: SurveyNode!
  surveyquestionchoiceSet: [SurveyQuestionChoiceNode!]!
  title: String!
}

type SurveyStatusNode {
  lastCompleted: Int
}

type SurveyV2Node {
  leetcoinAmount: Int!
  showSurvey: Boolean!
  surveyJson: JSONString
}

type SyncedCodeNode {
  code: String!
  timestamp: Int!
}

type TagCategoryNode {
  creationDate: DateTime!
  group: TagGroupNode!
  id: ID!
  isEnabled: Boolean!
  name: String!
  slug: String!
  tags: [TagNode!]!
  updationDate: DateTime!
}

type TagGroupNode {
  creationDate: DateTime!
  id: ID!
  name: String!
  slug: String!
  tagcategorySet: [TagCategoryNode!]!
  updationDate: DateTime!
}

type TagNode {
  companySet: [InterviewCompanyNode!]!
  createdAt: DateTime!
  discussTopicTag: [DiscussTopicTagNode!]!
  favorites: [FeaturedQuestionListNode!]!
  favoriteSet: [FeaturedQuestionListNode!]!
  hotScore: Int
  id: ID!
  imgUrl: String
  interviewTagsCategories: [InterviewTagsCategoryNode!]!

  """
  Deprecated in Tag System. Still used by old products.
  """
  isEnabled: Boolean!

  """
  Whether this is a standard tag or not
  """
  isStandard: Boolean!

  """
  Whether this tag is enabled or not. If not enabled, we NEVER show it to our users.
  """
  isTagEnabled: Boolean!

  """
  Whether user can select this tag or not
  """
  isUserSelectable: Boolean!
  keywords: JSONString!
  name: String!
  order: Int
  parentTag: TagNode
  questionapplicationSet: [ApplicationNode!]!
  slug: String!
  tagCategories: [TagCategoryNode!]!

  """
  Deprecated in Tag System. Still used by old products.
  """
  tagType: TagTypeNode
}

type TagProblemCountsCategoryNode {
  advanced: [TagProblemsCountNode!]!
  fundamental: [TagProblemsCountNode!]!
  intermediate: [TagProblemsCountNode!]!
}

type TagProblemsCountNode {
  problemsSolved: Int!
  tagName: String!
  tagSlug: String!
}

type TagSearchHit {
  error: String
  ok: Boolean!
}

type TagTypeNode {
  name: String!
  slug: String!
}

type ToggleContestDynamicLayout {
  error: String
  ok: Boolean!
}

type ToggleContestRankingDynamicLayout {
  error: String
  ok: Boolean!
}

type ToggleFavorite {
  card: CardNode
  errors: JSONString
  isCurrentUserAuthenticated: Boolean
  newFavoriteCards: [CardNode]
  ok: Boolean
}

type ToggleFavoriteSolution {
  error: String
  ok: Boolean
}

type TogglePinComment {
  comment: CommentNode
  error: String
  ok: Boolean
}

type TogglePinTopic {
  error: String
  ok: Boolean
  topic: TopicNode
}

type TopicConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [TopicEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `Topic` and its cursor.
"""
type TopicEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: TopicRelayNode
}

type TopicNode {
  authors: [UserNode]
  category: DiscussCategoryNode
  challengequestionSet: [ChallengeQuestionNode!]!
  commentCount: Int!
  contestSet: [ContestNode!]!
  favoriteCount: Int!
  hideFromTrending: Boolean
  id: Int!
  index: Int
  isFavorite: Boolean
  lastActivity: Int
  lastComment: CommentNode
  nodebbTid: Int!
  pinned: Boolean!
  pinnedAt: DateTime
  post: PostNode!
  searchMeta: SearchMetaNode
  solutionTags: [SolutionTagNode]!
  subscribed: Boolean
  tags: [String!]!
  title: String!
  topLevelCommentCount: Int!
  viewCount: Int!
}

type TopicRelayNode {
  challengequestionSet: [ChallengeQuestionNode!]!
  commentCount: Int!
  commentSet: [CommentNode!]!
  contestSet: [ContestNode!]!
  id: ID!
  lastComment: CommentNode
  nodebbTid: Int!
  pinned: Boolean!
  pinnedAt: DateTime
  post: PostNode!
  questionTitle: String
  tags: [DiscussTopicTagNode!]!
  title: String!
  topLevelCommentCount: Int!
  url: String!
  viewCount: Int!
}

type TopicTagConnection {
  """
  Contains the nodes in this connection.
  """
  edges: [TopicTagEdge]!

  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  totalNum: Int
}

"""
A Relay edge containing a `TopicTag` and its cursor.
"""
type TopicTagEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: TopicTagNode
}

type TopicTagNode {
  companySet: [InterviewCompanyNode!]!
  createdAt: DateTime!
  discussTopicTag: [DiscussTopicTagNode!]!
  favorites: [FeaturedQuestionListNode!]!
  favoriteSet: [FeaturedQuestionListNode!]!
  frequencies: String
  hotScore: Int

  """
  The ID of the object.
  """
  id: ID!
  imgUrl: String
  interviewTagsCategories: [InterviewTagsCategoryNode!]!

  """
  Deprecated in Tag System. Still used by old products.
  """
  isEnabled: Boolean!

  """
  Whether this is a standard tag or not
  """
  isStandard: Boolean!

  """
  Whether this tag is enabled or not. If not enabled, we NEVER show it to our users.
  """
  isTagEnabled: Boolean!

  """
  Whether user can select this tag or not
  """
  isUserSelectable: Boolean!
  keywords: JSONString!
  name: String!
  questionapplicationSet: [ApplicationNode!]!
  questionIds: [Int]
  questions: [QuestionNode!]
  slug: String!
  tagCategories: [TagCategoryNode!]!
  tagId: Int!

  """
  Deprecated in Tag System. Still used by old products.
  """
  tagType: TagTypeNode
  translatedName: String
}

type TrialRecordListNode {
  nodes: [TrialRecordNode!]!
  totalNum: Int!
}

type TrialRecordNode {
  applicant: ManagementUserSimpleNode!
  applyTime: DateTime!
  attachments: [String!]
  id: ID!
  notes: String!
  premiumInfos: [PremiumInfoNode]
  reviewedTime: DateTime
  sku: String!
  status: PremiumTrialApplyStatus!
  trialDays: Int!
  userInfo: ManagementUserSimpleNode!
  uuid: ID!
}

type UmApplyForPremiumTrial {
  error: String
  ok: Boolean
}

type UmBanIP {
  error: String
  ok: Boolean
}

type UmBanUser {
  error: String
  ok: Boolean
}

type UmCreateScore {
  error: String
  ok: Boolean
}

type UmDeleteUserCreditCard {
  error: String
  ok: Boolean
}

type UmEditIPStatus {
  error: String
  ok: Boolean
}

type UmSendVerificationEmail {
  error: String
  ok: Boolean
}

type UmSetEmailPrimary {
  error: String
  ok: Boolean
}

type UnlockFavorite {
  error: String
  ok: Boolean!
  unlockQuestion: FavoriteQuestionNode
}

type UnlockShareEvent {
  error: String
  ok: Boolean
}

type UnpublishContestAnnouncement {
  ok: Boolean
}

type UpcomingBadgeNode {
  icon: String!
  name: String!
  progress: Int!
}

type UPCSubmitResponse {
  ok: Boolean
}

type UpcV2SubmitSurvey {
  ok: Boolean!
}

type UpcV2TagNode {
  name: String!
  slug: String!
}

type UpdateAnnualReportViewStatus {
  error: String
  ok: Boolean
}

type UpdateBetaParticipation {
  error: String
  ok: Boolean
  userStatus: MeNode
}

type UpdateComment {
  comment: CommentNode
  error: String
  ok: Boolean
}

type UpdateContribution {
  contribution(id: ID): ContributionNode
  error: String
  ok: Boolean
}

type UpdateEducation {
  error: String
  ok: Boolean
  record: EducationRecordNode
}

type UpdateEmailPrimary {
  error: String
  ok: Boolean
}

type UpdateFavoriteEmojiBackgroundV2 {
  error: String
  ok: Boolean!
}

type UpdateFavoriteIsPublicV2 {
  error: String
  ok: Boolean!
}

type UpdateFavoriteNameDescriptionV2 {
  error: String
  ok: Boolean!
}

type UpdateInvalidUsername {
  error: String
  ok: Boolean
}

type UpdateNote {
  error: String
  ok: Boolean
  question: QuestionNode
}

type UpdateOccupation {
  error: String
  ok: Boolean
  record: OccupationRecordNode
}

type UpdatePassword {
  errors: [PasswordErrorEnum]!
  ok: Boolean
}

type UpdatePlayground {
  error: String
  ok: Boolean
}

type UpdatePlaygroundFolder {
  error: String
  ok: Boolean
}

type UpdateProblematicPost {
  error: String
  ok: Boolean
}

type UpdateProfile {
  error: String
  ok: Boolean
}

type UpdateProfileV3 {
  errors: [ProfileUpdateErrorEnum]!
  ok: Boolean
}

type UpdatePublicBadge {
  activeBadge: UserBadgeNode
}

type UpdateSolution {
  error: String
  ok: Boolean
  topic: TopicNode
}

type UpdateSubmissionNote {
  error: String
  ok: Boolean
}

type UpdateSyncedCode {
  message: String
  ok: Boolean
}

type UpdateTeamMember {
  error: String
  ok: Boolean
}

type UpdateTopic {
  error: String
  ok: Boolean
  topic: TopicNode
}

type UpdateTopicWithCategory {
  error: String
  topic: TopicNode
}

type UpdateUserAvatarStatus {
  error: String
  ok: Boolean
}

type UpdateUsername {
  error: String
  ok: Boolean
  username: String
  userSlug: String
  warning: String
}

type UserAccountFrozenInfoNode {
  notEligibleToDeleteAccountReasons: [String]
  planDeleteDate: Date
  userFrozenStatus: AccountFrozenStatus!
}

type UserBadgeNode {
  badge: BadgeBadge!
  category: BadgeCategoryEnum
  creationDate: String!
  displayName: String!
  expired: Boolean!
  expiredDate: DateTime
  hoverText: String
  icon: String!
  id: ID!
  medal: MedalNode
  name: String!
  shortName: String!
  updationDate: DateTime!
  user: PrivateContestUserNode!
  userCount: Int!
}

type UserBanTypeNode {
  slug: String
  typeName: String
}

type UserCalendarNode {
  activeYears: [Int]!
  dccBadges: [CalendarBadgeNode!]!
  streak: Int!
  submissionCalendar: JSONString!
  totalActiveDays: Int!
  user: UserNode!
  year: Int!
}

type UserContestRankingHistoryNode {
  attended: Boolean!
  contest: ContestNode!
  finishTimeInSeconds: Int!
  problemsSolved: Int!
  ranking: Int!
  rating: Float!
  totalProblems: Int!
  trendDirection: TrendingDirectionEnum
}

type UserContestRankingNode {
  attendedContestsCount: Int!
  badge: UserBadgeNode
  globalRanking: Int!
  rating: Float!
  topPercentage: Float!
  totalParticipants: Int!
}

type UserContestStatNode {
  afterContestRating: Int
  contest: ContestNode
  finishTimeInSeconds: Int!
  penaltyCount: Int!
  problemsSolved: Int!
  ranking: Int
  ratingDiff: Int
  totalParticipants: Int
  totalProblems: Int!
}

type UserContributionNode {
  points: Int!
  questionCount: Int!
  testcaseCount: Int!
}

type UserIPNode {
  banned: Boolean!
  firstAccessed: DateTime!
  id: ID!
  ipAddress: String
  lastAccessed: DateTime!
  user: UserNodeAdminOnly!
  usersCountSharingThisIp: Int!
  usersSharingThisIp: [UserNodeAdminOnly!]!
}

type UserManagementLogNode {
  operation: String!
  operationTime: DateTime!
  operator: ManagementUserSimpleNode!
}

type UserNode {
  activeBadge: UserBadgeNode
  badges: [UserBadgeNode!]!
  contestBadge: UserBadgeNode
  contributions: UserContributionNode!
  email: String
  emails: [EmailNode]
  firstName: String!
  githubUrl: String
  hasChangedUsernameRecently: Boolean
  hasUsablePassword: Boolean
  id: ID

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  isCurrentUserPremium: Boolean
  isCurrentUserVerified: Boolean
  isDiscussAdmin: Boolean
  isDiscussStaff: Boolean
  joinedTimestamp: Int!
  languageProblemCount: [LanguageProblemCountNode!]
  lastName: String!
  linkedinUrl: String
  nameColor: String
  phone: String
  problemsSolvedBeatsStats: [ProblemSolvedBeatsNode!]!
  profile: UserProfileNode!
  socialAccounts: [String!]
  submissionCalendar: JSONString!
  submitStats: UserSubmitStatsNode!
  submitStatsGlobal: UserSubmitStatsNode!
  tagProblemCounts: TagProblemCountsCategoryNode!
  twitterUrl: String
  upcomingBadges: [UpcomingBadgeNode!]!
  userCalendar(year: Int): UserCalendarNode!

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
  yearJoined: Int!
}

type UserNodeAdminOnly {
  achievementSet: [AchievementNode!]!
  activeBadge: UserBadgeNode
  allUsersWithSharedIps: [UserNodeAdminOnly!]!
  archiveduserSet: [ArchivedUserNode!]!
  articlepageSet: [ArticleNode!]!
  badges: [UserBadgeNode!]!
  badgeSet: [UserBadgeNode!]!
  banned: Boolean!
  categoryscoreSet: [InterviewTagsCategoryScoreNode!]!
  commentSet: [CommentNode!]!
  companySet: [SponsorNode!]!
  completionSet: [CompletionNode!]!
  contestBadge: UserBadgeNode
  contestreportlccnSet: [ContestReportLCCNNode!]!
  contestreportSet: [ContestReportNode!]!
  contributions: UserContributionNode!
  contributionSet: [ContributionNode!]!
  contributorSet: [ContributorNode!]!
  createdBy(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): LibraryQuestionNodeConnection!
  dateJoined: DateTime!
  debugSession: [DebugSessionNode!]!
  educationrecordSet: [EducationRecordNode!]!
  email: String
  emailaddressSet: [EmailNode!]!
  emails: [EmailNode]
  favoriteSet: [FeaturedQuestionListNode!]!
  firstName: String!
  flagresultSet: [FlagResultNode!]!
  flagSet: [FlagNode!]!
  githubUrl: String
  hasChangedUsernameRecently: Boolean
  hasUsablePassword: Boolean
  id: ID

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  isCurrentUserPremium: Boolean
  isCurrentUserVerified: Boolean
  isDiscussAdmin: Boolean
  isDiscussStaff: Boolean
  isPremium: Boolean!

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean!

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  joinedTimestamp: Int!
  languageProblemCount: [LanguageProblemCountNode!]
  lastLogin: DateTime
  lastName: String!
  libraryactivitySet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): QuestionActivityNodeConnection!
  linkedinUrl: String
  nameColor: String
  notificationSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): NotificationNodeConnection!
  occupationrecordSet: [OccupationRecordNode!]!
  password: String!
  phone: String
  playgroundfolderSet: [PlaygroundFolderNode!]!
  playgroundSet: [PlaygroundNode!]!
  playgroundtemplateSet: [PlaygroundTemplateNode!]!
  postReport: [ReportInfoNode!]!
  postSet: [PostNode!]!
  problemsSolvedBeatsStats: [ProblemSolvedBeatsNode!]!
  profile: UserProfileNode!
  questionapplicationSet: [ApplicationNode!]!
  questionlastsolveSet: [QuestionLastSolveNode!]!
  questionSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): LibraryQuestionNodeConnection!
  questionsolvesessionSet: [QuestionSolveSessionNode!]!
  questionsuggestionSet: [QuestionFeedbackNode!]!
  reportee: [UserReportNode!]!
  reporter: [UserReportNode!]!
  scoreUser: [ManagementScoreNode!]!
  sessionSet(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int
  ): InterviewSessionNodeConnection!
  socialAccounts: [String!]
  storeaddressSet: [StoreAddressNode!]!
  storeorderoperationlogSet: [OrderOperationLogNode!]!
  storeorderSet: [StoreOrderNode!]!
  submissionCalendar: JSONString!
  submissionSet: [FilteredSubmissionNode!]!
  submitStats: UserSubmitStatsNode!
  submitStatsGlobal: UserSubmitStatsNode!
  tagProblemCounts: TagProblemCountsCategoryNode!
  twitterUrl: String
  upcomingBadges: [UpcomingBadgeNode!]!
  userCalendar(year: Int): UserCalendarNode!
  userIps: [UserIPNode]!
  useripSet: [UserIPNode!]!

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
  userratingSet: [UserRatingNode!]!
  userskilltagSet: [UserSkillTagNode!]!
  usersyncedcodeSet: [SyncedCodeNode!]!
  virtualcontestscoreSet: [VirtualContestScoreNode!]!
  voteSet: [VoteNode!]!
  yearJoined: Int!
}

type UserNotificationNode {
  lastModified: Int
  numUnread: Int
}

type UserProfileNode {
  aboutMe: String!
  acStats: AcStatsNode
  age: Int
  birthday: String
  categoryDiscussCount: Int!
  categoryDiscussCountDiff: Int!
  company: String
  contestCount: Int
  country: UserProfileCountry
  countryCode: String
  countryName: String
  displayMySubmissionHistory: Boolean
  education: String
  gender: String
  globalRanking: Int
  jobTitle: String
  joinStudyPlanLeaderboard: Boolean
  lastModified: DateTime!
  location: String
  occupation: UserProfileOccupation
  postViewCount: Int!
  postViewCountDiff: Int!
  privacyContact: Boolean
  publicBadgeType: Int!
  ranking: Int!
  realName: String!
  reputation: Int!
  reputationDiff: Int!
  rewardStats: [String]
  school: String
  skillTags: [String]!
  solutionCount: Int!
  solutionCountDiff: Int!
  starRating: Float!
  userAvatar: String
  userSlug: String!
  websites: [String]
  yearsOfExperience: Int
}

type UserQuestionProgressNodeV2 {
  numAcceptedQuestions: [QuestionCountNode!]!
  numFailedQuestions: [QuestionCountNode!]!
  numUntouchedQuestions: [QuestionCountNode!]!

  """
  用户击败其他用户的题目百分比
  """
  userSessionBeatsPercentage: [LevelBeatPercentageMixin!]!
}

type UserRankInfoList {
  hasMore: Boolean!
  total: Int!
  userRankInfos: [UserRankInfoNode!]!
}

type UserRankInfoNode {
  currentRank: Int!
  finishedQuestionNum: Int!
  hideOnBoard: Boolean!
  previousRank: Int!
  userInfo: PlanBriefUserNode!
}

type UserRatingNode {
  id: ID!
  score: Int!
}

type UserReportNode {
  createdAt: DateTime!
  handled: Boolean!
  id: ID!
  lastModified: DateTime!
  message: String!
  reportee: PrivateContestUserNode!
  reporter: PrivateContestUserNode!
}

type UserSkillTagNode {
  id: ID!
  name: String!
  user: PrivateContestUserNode!
}

type UserSubmitStatsNode {
  acSubmissionNum: [SubmissionCountNode!]!
  totalSubmissionNum: [SubmissionCountNode!]!
}

type UserUploadSchoolLogo {
  error: String
  ok: Boolean!
}

type UserWeeklyTaskRecordListNode {
  planFinishDate: Date
  planWeeklyTaskSetDate: Date
  userWeeklyTaskRecords: [UserWeeklyTaskRecordNode!]!
}

type UserWeeklyTaskRecordNode {
  date: Date!
  expectedFinishedQuestionNums: Int!
  finishedQuestionNums: Int!

  """
  Whether finish enough questions no matter user has schedule on the date
  """
  hasCompletedWeeklyTask: Boolean!

  """
  Whether user has weekly task schedule on the date
  """
  hasWeeklyTaskSchedule: Boolean!
}

type VacRecordListNode {
  nodes: [VacRecordNode!]!
  totalNum: Int!
}

type VacRecordNode {
  chargeAmount: Int
  chargeAmountRefunded: Int
  chargeTime: DateTime
  completionPercentage: Int
  vacName: String!
}

type ValueAddedContentNode {
  creationDate: DateTime!
  description: String!
  hasAccess: Boolean!
  id: ID!
  isActive: Boolean!
  name: String!
  pricing: PricingNode
  slug: String!
  updationDate: DateTime!
}

type VideoNode {
  """
  Collapsible HTML under video
  """
  content: String
  editLink: String

  """
  Embedded HTML video
  """
  html: String!
  id: ID!
  paidOnly: Boolean!
}

type VirtualContestScoreNode {
  contest: ContestNode
  finishTime: Int
  ranking: Int!
  score: Int!
  startTime: Int
  totalAcQuestions: Int!
  totalQuestions: Int
  totalScore: Int
  totalUsers: Int
}

type VoteNode {
  date: DateTime!
  id: ID!
  post: PostNode!
  postId: Int
  type: Int
  user: PrivateContestUserNode!
}

type VotePost {
  error: String
  ok: Boolean
  post: PostNode
  value: Int
}

type WebPageNode {
  editLink: String
  html: String!
  id: ID!
  paidOnly: Boolean!
}

type WordListTypeNode {
  name: String!
  slug: String!
}
